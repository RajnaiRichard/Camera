
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009ad0  08006578  08006578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010048  08010048  00030024  2**0
                  CONTENTS
  4 .ARM          00000008  08010048  08010048  00020048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010050  08010050  00030024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010050  08010050  00020050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010054  08010054  00020054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08010058  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009794  20000024  0801007c  00030024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200097b8  0801007c  000397b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171a6  00000000  00000000  00030054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6d  00000000  00000000  000471fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00049d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  0004aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026491  00000000  00000000  0004b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c4e  00000000  00000000  00071b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daef0  00000000  00000000  00084767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015f657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003590  00000000  00000000  0015f6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006560 	.word	0x08006560

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08006560 	.word	0x08006560

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_Z13cameraIO_initv>:
#include "Camera.h"
#include "string"
#include "string.h"

int32_t cameraIO_init()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	if(hdcmi.State != HAL_DCMI_STATE_READY)
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <_Z13cameraIO_initv+0x44>)
 8000512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000516:	b2db      	uxtb	r3, r3
 8000518:	2b01      	cmp	r3, #1
 800051a:	bf14      	ite	ne
 800051c:	2301      	movne	r3, #1
 800051e:	2300      	moveq	r3, #0
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <_Z13cameraIO_initv+0x20>
	{
		HAL_DCMI_Init(&hdcmi);
 8000526:	480a      	ldr	r0, [pc, #40]	; (8000550 <_Z13cameraIO_initv+0x44>)
 8000528:	f001 ff5c 	bl	80023e4 <HAL_DCMI_Init>

	}
	if(hi2c3.State != HAL_I2C_STATE_READY)
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <_Z13cameraIO_initv+0x48>)
 800052e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b20      	cmp	r3, #32
 8000536:	bf14      	ite	ne
 8000538:	2301      	movne	r3, #1
 800053a:	2300      	moveq	r3, #0
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <_Z13cameraIO_initv+0x3c>
	{
		HAL_I2C_Init(&hi2c3);
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <_Z13cameraIO_initv+0x48>)
 8000544:	f003 ffc8 	bl	80044d8 <HAL_I2C_Init>
	}

	return OV5640_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20009720 	.word	0x20009720
 8000554:	2000966c 	.word	0x2000966c

08000558 <_Z15cameraIO_deinitv>:

int32_t cameraIO_deinit()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	if (hdcmi.State != HAL_DCMI_STATE_BUSY)
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <_Z15cameraIO_deinitv+0x44>)
 800055e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b02      	cmp	r3, #2
 8000566:	bf14      	ite	ne
 8000568:	2301      	movne	r3, #1
 800056a:	2300      	moveq	r3, #0
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <_Z15cameraIO_deinitv+0x20>
	{
		HAL_DCMI_DeInit(&hdcmi);
 8000572:	480a      	ldr	r0, [pc, #40]	; (800059c <_Z15cameraIO_deinitv+0x44>)
 8000574:	f001 fd37 	bl	8001fe6 <HAL_DCMI_DeInit>
	}
	if(hi2c3.State != HAL_I2C_STATE_BUSY)
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <_Z15cameraIO_deinitv+0x48>)
 800057a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b24      	cmp	r3, #36	; 0x24
 8000582:	bf14      	ite	ne
 8000584:	2301      	movne	r3, #1
 8000586:	2300      	moveq	r3, #0
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <_Z15cameraIO_deinitv+0x3c>
	{
		HAL_I2C_DeInit(&hi2c3);
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <_Z15cameraIO_deinitv+0x48>)
 8000590:	f004 f8e6 	bl	8004760 <HAL_I2C_DeInit>
	}


	return OV5640_OK;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20009720 	.word	0x20009720
 80005a0:	2000966c 	.word	0x2000966c

080005a4 <_Z9i2c_writettPht>:

int32_t i2c_write(uint16_t deviceAddress, uint16_t address, uint8_t* data, uint16_t Lenght)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	60ba      	str	r2, [r7, #8]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4603      	mov	r3, r0
 80005b0:	81fb      	strh	r3, [r7, #14]
 80005b2:	460b      	mov	r3, r1
 80005b4:	81bb      	strh	r3, [r7, #12]
 80005b6:	4613      	mov	r3, r2
 80005b8:	80fb      	strh	r3, [r7, #6]
	uint8_t addressAndData[Lenght+2] = {(uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
	std::copy(data,data+Lenght,addressAndData+2);
	HAL_I2C_Master_Transmit(&hi2c3, deviceAddress, addressAndData, sizeof(addressAndData), HAL_MAX_DELAY);

	return OV5640_OK;
 80005ba:	466b      	mov	r3, sp
 80005bc:	461d      	mov	r5, r3
	uint8_t addressAndData[Lenght+2] = {(uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	1c5c      	adds	r4, r3, #1
 80005c2:	617c      	str	r4, [r7, #20]
 80005c4:	4623      	mov	r3, r4
 80005c6:	3301      	adds	r3, #1
 80005c8:	4618      	mov	r0, r3
 80005ca:	f04f 0100 	mov.w	r1, #0
 80005ce:	f04f 0200 	mov.w	r2, #0
 80005d2:	f04f 0300 	mov.w	r3, #0
 80005d6:	00cb      	lsls	r3, r1, #3
 80005d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005dc:	00c2      	lsls	r2, r0, #3
 80005de:	4623      	mov	r3, r4
 80005e0:	3301      	adds	r3, #1
 80005e2:	4618      	mov	r0, r3
 80005e4:	f04f 0100 	mov.w	r1, #0
 80005e8:	f04f 0200 	mov.w	r2, #0
 80005ec:	f04f 0300 	mov.w	r3, #0
 80005f0:	00cb      	lsls	r3, r1, #3
 80005f2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005f6:	00c2      	lsls	r2, r0, #3
 80005f8:	4623      	mov	r3, r4
 80005fa:	3301      	adds	r3, #1
 80005fc:	3307      	adds	r3, #7
 80005fe:	08db      	lsrs	r3, r3, #3
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	ebad 0d03 	sub.w	sp, sp, r3
 8000606:	ab02      	add	r3, sp, #8
 8000608:	3300      	adds	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	89ba      	ldrh	r2, [r7, #12]
 8000610:	0a12      	lsrs	r2, r2, #8
 8000612:	b292      	uxth	r2, r2
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	1e61      	subs	r1, r4, #1
 800061c:	89ba      	ldrh	r2, [r7, #12]
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	701a      	strb	r2, [r3, #0]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	1e4b      	subs	r3, r1, #1
 8000626:	2b00      	cmp	r3, #0
 8000628:	db04      	blt.n	8000634 <_Z9i2c_writettPht+0x90>
 800062a:	2100      	movs	r1, #0
 800062c:	7011      	strb	r1, [r2, #0]
 800062e:	3201      	adds	r2, #1
 8000630:	3b01      	subs	r3, #1
 8000632:	e7f8      	b.n	8000626 <_Z9i2c_writettPht+0x82>
	std::copy(data,data+Lenght,addressAndData+2);
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	18d1      	adds	r1, r2, r3
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	3302      	adds	r3, #2
 800063e:	461a      	mov	r2, r3
 8000640:	68b8      	ldr	r0, [r7, #8]
 8000642:	f000 f945 	bl	80008d0 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
	HAL_I2C_Master_Transmit(&hi2c3, deviceAddress, addressAndData, sizeof(addressAndData), HAL_MAX_DELAY);
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	b2a3      	uxth	r3, r4
 800064a:	3301      	adds	r3, #1
 800064c:	b29b      	uxth	r3, r3
 800064e:	89f9      	ldrh	r1, [r7, #14]
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	9000      	str	r0, [sp, #0]
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <_Z9i2c_writettPht+0xc4>)
 8000658:	f004 f8b2 	bl	80047c0 <HAL_I2C_Master_Transmit>
	return OV5640_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	46ad      	mov	sp, r5
}
 8000660:	4618      	mov	r0, r3
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bdb0      	pop	{r4, r5, r7, pc}
 8000668:	2000966c 	.word	0x2000966c

0800066c <_Z8i2c_readttPht>:
int32_t i2c_read(uint16_t deviceAddress,uint16_t address, uint8_t* data, uint16_t Lenght)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af02      	add	r7, sp, #8
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	461a      	mov	r2, r3
 8000676:	4603      	mov	r3, r0
 8000678:	81fb      	strh	r3, [r7, #14]
 800067a:	460b      	mov	r3, r1
 800067c:	81bb      	strh	r3, [r7, #12]
 800067e:	4613      	mov	r3, r2
 8000680:	80fb      	strh	r3, [r7, #6]
	uint8_t addressArray[] = {(uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
 8000682:	89bb      	ldrh	r3, [r7, #12]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	b29b      	uxth	r3, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	753b      	strb	r3, [r7, #20]
 800068c:	89bb      	ldrh	r3, [r7, #12]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(&hi2c3, deviceAddress, addressArray, sizeof(addressArray), HAL_MAX_DELAY);
 8000692:	f107 0214 	add.w	r2, r7, #20
 8000696:	89f9      	ldrh	r1, [r7, #14]
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2302      	movs	r3, #2
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <_Z8i2c_readttPht+0x5c>)
 80006a2:	f004 f88d 	bl	80047c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c3, deviceAddress | 0x0001, data, Lenght, HAL_MAX_DELAY);
 80006a6:	89fb      	ldrh	r3, [r7, #14]
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	b299      	uxth	r1, r3
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	f04f 32ff 	mov.w	r2, #4294967295
 80006b4:	9200      	str	r2, [sp, #0]
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <_Z8i2c_readttPht+0x5c>)
 80006ba:	f004 f97f 	bl	80049bc <HAL_I2C_Master_Receive>
	return OV5640_OK;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000966c 	.word	0x2000966c

080006cc <_Z19HAL_GetTick_Wrapperv>:

int32_t HAL_GetTick_Wrapper(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	return (int32_t)HAL_GetTick();
 80006d0:	f001 fb16 	bl	8001d00 <HAL_GetTick>
 80006d4:	4603      	mov	r3, r0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <_Z13Send_test_imgv>:
	.Mode = PARALLEL_MODE
};

//send a test image to test to communication and display program on PC side
void Send_test_img()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	f5ad 4d16 	sub.w	sp, sp, #38400	; 0x9600
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

	uint16_t rowSize = 160;
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	f507 4216 	add.w	r2, r7, #38400	; 0x9600
 80006ec:	f102 020a 	add.w	r2, r2, #10
 80006f0:	8013      	strh	r3, [r2, #0]
	uint16_t rowSizeBytes = 160*2; //one pixel 16 bit
 80006f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80006f6:	f507 4216 	add.w	r2, r7, #38400	; 0x9600
 80006fa:	f102 0208 	add.w	r2, r2, #8
 80006fe:	8013      	strh	r3, [r2, #0]
	uint16_t columnSize = 120;
 8000700:	2378      	movs	r3, #120	; 0x78
 8000702:	f507 4216 	add.w	r2, r7, #38400	; 0x9600
 8000706:	f102 0206 	add.w	r2, r2, #6
 800070a:	8013      	strh	r3, [r2, #0]
	char header[] = "CAM";
 800070c:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <_Z13Send_test_imgv+0xf0>)
 800070e:	f507 4216 	add.w	r2, r7, #38400	; 0x9600
 8000712:	6013      	str	r3, [r2, #0]
	//int testImgSize = rowSize*comomnSize; //160x120=19200 image
	uint16_t testImg[]={ 44240, 44272, 44303, 46351, 48399, 48399, 46319, 44239, 44240, 42160, 42160, 42160, 33904, 33904, 33904, 33872, 33872, 33872, 33872, 33872, 33872, 33840, 31792, 31792, 31792, 31792, 31760, 29712, 29712, 29712, 29680, 27633, 29713, 29681, 27633, 25553, 25553, 25553, 25553, 23505, 23505, 23537, 23505, 23505, 21458, 19410, 17330, 17330, 15282, 15282, 13234, 13234, 13234, 13234, 13234, 11186, 11186, 11186, 11186, 11187, 11187, 11187, 11187, 9139, 11187, 9139, 9139, 9139, 9139, 9139, 9139, 7091, 7091, 5043, 5043, 5044, 2996, 2996, 2996, 2996, 2996, 948, 948, 948, 948, 948, 980, 948, 980, 980, 980, 980, 980, 980, 980, 981, 981, 981, 981, 981, 981, 981, 981, 981, 981, 981, 981, 981, 981, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 981, 981, 981, 1013, 1013, 1013, 1013, 1013, 981, 981, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1012, 1012, 1012, 1012, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 44304, 44304, 46384, 48432, 48431, 48400, 46352, 46320, 44272, 42192, 44240, 44240, 38064, 35984, 35985, 35953, 35953, 35953, 35953, 35953, 35953, 35953, 33873, 33873, 33873, 33873, 33841, 31793, 31793, 31793, 31761, 31793, 33841, 31793, 29713, 27665, 27665, 27665, 27665, 25617, 25618, 25586, 27666, 23538, 23538, 21490, 19410, 19410, 17362, 15314, 15315, 15315, 15315, 15315, 15315, 15315, 15315, 13267, 13267, 13267, 13267, 13267, 13267, 13267, 13267, 13267, 15315, 13299, 13300, 13300, 11220, 11220, 9172, 9172, 9172, 9172, 7124, 7124, 7124, 7124, 7124, 5076, 5076, 5077, 5109, 5109, 5109, 3061, 3061, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1045, 1045, 1045, 1045, 1045, 1045, 1013, 1013, 1013, 1013, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1013, 1013, 1013, 1013, 1013, 1012, 1012, 1012, 1012, 1012, 980, 44337, 46416, 48464, 50512, 50480, 50480, 48432, 46352, 46352, 44273, 44273, 44273, 40145, 38065, 38065, 38065, 38065, 38033, 38033, 38033, 38033, 38033, 35953, 35953, 35953, 35953, 35921, 33873, 33873, 33873, 33873, 35954, 35922, 33874, 31793, 29746, 29746, 29746, 29746, 27698, 29746, 29746, 27666, 25650, 23570, 23571, 21523, 19475, 19475, 17395, 17395, 17427, 17427, 17395, 17395, 17395, 17395, 17395, 17395, 17396, 17428, 17428, 17428, 17428, 17428, 17428, 17428, 17428, 15380, 15380, 15348, 13300, 13300, 11252, 11252, 11252, 11252, 11285, 11253, 11253, 11253, 11285, 9205, 9205, 9237, 9237, 9237, 9237, 9237, 7189, 7189, 7189, 7189, 5141, 5141, 5142, 5142, 5142, 3094, 3094, 3126, 3126, 3126, 3126, 3126, 3126, 1078, 3126, 3126, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1046, 1046, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1044, 46449, 48497, 50544, 50544, 50513, 50513, 48465, 46385, 46385, 46385, 46385, 46385, 44305, 40145, 40145, 40145, 40145, 40145, 40145, 40146, 40114, 40114, 38066, 38033, 38033, 38034, 38034, 35986, 35954, 35954, 38034, 38034, 38034, 35954, 33906, 33874, 31826, 31826, 31826, 31826, 33907, 29778, 27731, 27731, 25651, 23603, 23603, 21555, 21555, 19507, 19508, 19508, 19508, 19508, 19508, 19508, 19508, 19508, 21556, 21556, 21556, 21556, 21556, 21556, 21556, 19508, 19508, 19508, 17460, 17460, 17461, 15412, 15413, 15413, 13365, 13365, 13333, 13333, 13365, 13365, 13365, 13365, 11317, 13365, 13365, 13366, 11318, 11318, 11318, 11318, 11318, 11318, 11318, 11318, 11318, 9270, 9302, 9302, 9302, 9302, 7222, 7254, 7254, 7254, 7254, 7254, 7254, 7254, 7254, 7254, 5206, 3158, 3158, 3158, 3158, 3158, 3158, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1078, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1078, 1078, 1078, 1078, 1077, 1077, 1077, 1077, 1077, 1077, 1045, 1045, 1045, 48529, 50577, 52625, 52593, 50545, 50545, 50514, 48466, 48466, 48433, 48466, 48466, 46386, 42225, 42225, 42258, 42258, 42226, 42226, 42226, 42226, 42226, 40146, 40146, 40146, 40114, 40114, 38066, 38066, 40114, 42194, 40146, 40114, 38066, 35987, 35987, 33939, 33939, 33939, 36019, 33939, 31859, 29811, 29811, 27763, 27731, 25683, 23636, 23636, 21588, 23636, 23636, 23636, 23636, 23668, 23668, 23668, 23668, 25716, 25716, 25716, 25717, 25716, 25716, 23637, 23637, 21589, 21589, 21589, 19541, 19541, 19541, 17493, 17493, 17493, 15445, 15445, 15445, 15445, 15445, 15445, 15446, 15446, 15446, 15446, 15446, 15446, 15446, 15446, 15446, 13398, 13398, 13398, 13430, 13430, 13398, 13430, 13430, 13398, 13430, 13430, 11382, 11382, 11382, 13398, 11383, 11382, 11383, 11383, 11382, 9335, 9335, 9335, 9334, 9335, 9335, 7287, 7286, 7286, 7287, 7286, 5239, 5239, 5239, 5239, 5239, 5239, 5239, 5239, 3190, 3190, 3190, 3190, 3190, 3190, 3190, 1142, 1142, 1142, 1142, 1142, 1142, 1110, 1142, 1142, 1142, 1142, 1142, 1142, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1109, 1109, 1077, 50609, 52658, 52658, 52626, 52594, 52594, 50546, 50514, 50514, 50514, 50514, 50514, 50514, 44306, 44306, 46386, 46386, 44306, 44306, 44306, 44306, 44306, 42258, 42226, 42226, 42226, 42226, 40147, 40147, 44275, 44275, 42227, 42227, 40147, 38099, 38067, 36019, 36019, 40147, 36019, 33972, 33940, 31892, 29844, 29844, 27796, 27796, 27796, 25748, 25748, 25748, 25748, 27796, 27797, 27797, 27797, 27797, 27797, 27829, 29877, 29877, 27797, 27797, 25749, 25749, 25749, 23701, 23669, 23669, 21621, 21621, 21621, 19574, 19574, 19574, 19574, 19574, 19574, 19574, 17526, 17526, 17526, 17526, 17526, 17526, 17526, 17526, 17526, 17526, 17526, 17558, 17559, 17559, 17559, 17559, 17559, 15511, 15511, 15511, 15511, 15511, 15511, 15511, 15511, 15511, 15511, 15511, 15511, 15511, 13463, 13463, 13463, 13463, 13463, 13463, 11415, 11415, 11415, 11415, 11415, 11415, 11415, 11415, 11415, 11415, 11415, 11415, 9367, 9367, 9367, 9367, 9367, 9367, 9367, 9367, 9367, 7319, 7319, 7319, 5271, 5271, 5271, 5271, 5271, 3223, 3222, 1174, 1174, 1174, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 52722, 54739, 54707, 54675, 54675, 52595, 52595, 52595, 52595, 52595, 52595, 52595, 52595, 48435, 48435, 48435, 48467, 48435, 46387, 46387, 46387, 46387, 44339, 44339, 44339, 44307, 44307, 44307, 44307, 46387, 46387, 44307, 44307, 42259, 40179, 40180, 40180, 42260, 40180, 38100, 36052, 34004, 34004, 34004, 31956, 31956, 31925, 29877, 29877, 29877, 29909, 29909, 29909, 29909, 31957, 31957, 31957, 31957, 31957, 31957, 31957, 29909, 29909, 27829, 27830, 27829, 25782, 25782, 25782, 25782, 23702, 23702, 23702, 21654, 21654, 21654, 21654, 21654, 21654, 19606, 19607, 21687, 21687, 19607, 19607, 19639, 19639, 19639, 19639, 19639, 19639, 19639, 19639, 19639, 19639, 19639, 19639, 17591, 17591, 17591, 17591, 17591, 17591, 17591, 17591, 17591, 17591, 17591, 17591, 17591, 17591, 17591, 15543, 15543, 15544, 15544, 15544, 15543, 15543, 15543, 15543, 15543, 15543, 15543, 15543, 15543, 15543, 13495, 13496, 13496, 13495, 13495, 13495, 13495, 13495, 13495, 11447, 11447, 11447, 11447, 11447, 11447, 11447, 9399, 9399, 9399, 7351, 7351, 7351, 5303, 5303, 5271, 5271, 5270, 3223, 1174, 1174, 1174, 1174, 1174, 54739, 56755, 56756, 54708, 54708, 54708, 54708, 54676, 54708, 54708, 54708, 54707, 54707, 50548, 48467, 50548, 50547, 50515, 48467, 48467, 48467, 48467, 48467, 46420, 48468, 46419, 46388, 46420, 48500, 48468, 48468, 46388, 46420, 44340, 42292, 42260, 44340, 44340, 40212, 38164, 38165, 36117, 36117, 36085, 36085, 36085, 34037, 34037, 34037, 34037, 34037, 34069, 34069, 34037, 34070, 36118, 36118, 34069, 34070, 34038, 34038, 31990, 31990, 29942, 29942, 29910, 27862, 27862, 27862, 27862, 25814, 25814, 25814, 23766, 23766, 23766, 23767, 23767, 23767, 23735, 23767, 23767, 23767, 23767, 23767, 21719, 21719, 21719, 21719, 21719, 21719, 21719, 21719, 21719, 21719, 21719, 21719, 21720, 21720, 21720, 21720, 21720, 21752, 21752, 21752, 21720, 21720, 21720, 19672, 19672, 19672, 19672, 19672, 19672, 19672, 19672, 19672, 17624, 17624, 17624, 17624, 17624, 17624, 17624, 17624, 17624, 17624, 17624, 17656, 17624, 17624, 17624, 17624, 17624, 15576, 15576, 15576, 15575, 15576, 15575, 15575, 15575, 15575, 13527, 13527, 13527, 13527, 13495, 11479, 11479, 11479, 11447, 11479, 9399, 9431, 7351, 7351, 5302, 3254, 1206, 56820, 56820, 56788, 56788, 54740, 54740, 54740, 54740, 54740, 54740, 56788, 56788, 56788, 52660, 50580, 52628, 52628, 52628, 50580, 50580, 50580, 50548, 50548, 50580, 48500, 48500, 48500, 50580, 50580, 50580, 50580, 48500, 46452, 46420, 46420, 46452, 46453, 42324, 42325, 42325, 40245, 40245, 40245, 38197, 38197, 38197, 38197, 36150, 36150, 38198, 38198, 38198, 38198, 38198, 38198, 38198, 38198, 38198, 36150, 36150, 36150, 34070, 34070, 32022, 32022, 32022, 32022, 29975, 29943, 29942, 29943, 27895, 27895, 25847, 25847, 25847, 25847, 25847, 25847, 25847, 25847, 25847, 25847, 25847, 25847, 25847, 25848, 25848, 25848, 25848, 25848, 25848, 25848, 25848, 23800, 23832, 23800, 23800, 23832, 23832, 23832, 23832, 23832, 23832, 23832, 23832, 23832, 23832, 23832, 23832, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 21784, 19736, 19704, 19704, 19704, 19704, 19704, 19704, 19704, 19704, 19704, 19704, 19704, 19704, 17656, 17656, 17656, 17656, 17656, 15607, 15607, 15607, 15607, 15607, 13559, 13559, 13559, 11511, 11479, 11479, 9431, 7382, 56853, 56853, 56853, 56853, 56853, 56853, 56853, 56853, 56821, 56821, 56821, 56821, 56853, 54773, 52660, 54741, 54741, 52693, 52661, 52661, 52661, 52661, 52660, 52661, 50612, 50613, 50612, 52693, 52693, 52661, 50613, 50613, 48533, 48533, 50613, 48533, 46485, 46453, 44405, 44405, 44405, 42358, 42358, 42358, 42358, 42358, 40278, 40278, 40310, 40310, 40310, 40310, 40311, 40311, 40310, 40310, 40311, 38231, 38231, 38231, 36183, 36183, 36183, 36151, 34103, 34103, 34103, 32055, 32023, 32023, 29975, 29975, 29975, 29975, 27927, 27927, 27927, 27927, 27927, 27928, 27928, 27928, 27928, 27928, 27928, 27928, 27928, 27928, 27960, 27960, 27928, 27928, 27928, 27960, 27960, 25912, 25912, 25912, 25912, 25912, 25912, 25912, 25912, 25912, 25912, 25913, 25913, 25913, 25912, 25913, 25913, 25912, 25912, 25912, 25913, 25913, 23865, 23865, 23864, 23864, 23864, 23864, 23864, 23864, 23864, 23864, 23864, 23864, 23832, 23864, 23864, 23864, 23864, 23864, 23832, 21784, 21816, 21816, 21784, 21784, 21816, 21784, 21784, 21784, 19736, 19736, 19736, 19736, 19736, 19736, 19736, 19736, 17688, 17688, 17688, 15640, 15607, 15608, 15607, 13559, 58934, 58934, 58934, 58934, 58934, 58934, 58966, 58934, 58934, 58933, 58934, 58934, 58933, 56885, 54773, 54805, 56821, 54773, 54773, 52693, 52725, 52725, 54773, 54773, 52693, 52693, 54773, 54805, 54773, 52725, 52693, 52693, 52693, 52693, 52725, 50645, 48566, 48566, 48566, 46518, 46518, 46518, 46518, 44470, 44470, 44470, 44470, 44471, 44471, 44438, 44439, 44471, 42423, 42391, 42391, 42391, 40343, 40343, 40343, 40311, 38263, 38263, 38263, 36215, 36183, 36183, 36183, 34135, 34135, 34135, 32088, 32088, 32088, 32056, 30008, 30008, 30008, 30008, 30008, 30008, 30040, 30008, 30040, 30040, 30040, 30040, 30040, 30040, 30040, 30040, 30040, 30040, 30040, 30041, 30041, 27993, 27993, 30041, 30041, 30041, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 27993, 25945, 25945, 25945, 25945, 25945, 25945, 25945, 25945, 25945, 25945, 25945, 25945, 25945, 25945, 25945, 23896, 23896, 23896, 23896, 23864, 23864, 23864, 23864, 23864, 21816, 21816, 21816, 21816, 21816, 21816, 21816, 21816, 21816, 19768, 19768, 17688, 17719, 58998, 58998, 58998, 58999, 58998, 58998, 58998, 58998, 58998, 58998, 58998, 58998, 58998, 58966, 56886, 56886, 56886, 56886, 56854, 54806, 54806, 54806, 56885, 54806, 54806, 54806, 56885, 56886, 54806, 54806, 54806, 54806, 54838, 54838, 52758, 50678, 50678, 50678, 50678, 48630, 48598, 48598, 48599, 48599, 48599, 48631, 48631, 46551, 46551, 46551, 46551, 46551, 44503, 44503, 44471, 44471, 42423, 42423, 42423, 40376, 40344, 40344, 38295, 38296, 38296, 38296, 36216, 36216, 36216, 36216, 34168, 34168, 34168, 32120, 32120, 32120, 32120, 32120, 32120, 32120, 32120, 32120, 32121, 32121, 32121, 32121, 32121, 32121, 32121, 32121, 32121, 32121, 32121, 32121, 32121, 30073, 30073, 30073, 32121, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 30073, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 25977, 25977, 25977, 25977, 25977, 25945, 25945, 25945, 23897, 23896, 23896, 23896, 23896, 23896, 23896, 23896, 23896, 21848, 21848, 61111, 61111, 61111, 61111, 61111, 61111, 61111, 61111, 61079, 61079, 61079, 61079, 61079, 61079, 56919, 58999, 58998, 58966, 56918, 56918, 56886, 56918, 56918, 56886, 56918, 56918, 58966, 56918, 56918, 56918, 56918, 56918, 56919, 54838, 52758, 52759, 52759, 52759, 52759, 50711, 50711, 50711, 50711, 50711, 52791, 50743, 50711, 50711, 48664, 48632, 48632, 46584, 46584, 46584, 46584, 44504, 44504, 44504, 44504, 42456, 42456, 42456, 40376, 40376, 40376, 40376, 38328, 38296, 38296, 36248, 36248, 36248, 36248, 34200, 34200, 34200, 34201, 34201, 34201, 34201, 34201, 34201, 34201, 34201, 34201, 34201, 34201, 34201, 34201, 34201, 34201, 34201, 34201, 32153, 32153, 32153, 32153, 32153, 32153, 32153, 32153, 32153, 32154, 32154, 32154, 32153, 32153, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 32154, 30105, 30105, 30105, 30105, 30105, 30105, 30105, 30105, 30105, 30105, 30105, 30105, 30105, 30105, 28057, 28057, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 25977, 25977, 25977, 25977, 25977, 25976, 23928, 23928, 63192, 61144, 61144, 61144, 61144, 61144, 61144, 61144, 61144, 61144, 61111, 61111, 61111, 61111, 59031, 59031, 61079, 59031, 58999, 58999, 58999, 58999, 58999, 56951, 58999, 59031, 59031, 58999, 58999, 56951, 59031, 59031, 56951, 54871, 54871, 54871, 54871, 54839, 52823, 52791, 52791, 52791, 54872, 54872, 54872, 52824, 52792, 50744, 50744, 50744, 48664, 48664, 48664, 48664, 46616, 46616, 46616, 46616, 44536, 44536, 44536, 44536, 42488, 42456, 42456, 40408, 40408, 40408, 40409, 38329, 38329, 38329, 38329, 36281, 36281, 36281, 36281, 36281, 36281, 38329, 38329, 38361, 38329, 38329, 36281, 36313, 36281, 36281, 36281, 36281, 36281, 36281, 36282, 36282, 36282, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34266, 34266, 34266, 34266, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 34234, 32186, 32186, 32186, 32186, 32186, 32186, 32186, 32186, 32186, 32186, 32186, 32186, 30138, 30138, 30137, 30105, 30105, 30105, 30105, 30105, 30105, 30105, 30105, 30105, 28057, 28057, 28057, 28057, 28057, 28057, 63289, 63257, 63257, 63257, 63257, 63224, 63224, 63224, 63224, 63224, 63224, 63224, 63224, 63224, 61144, 61112, 61144, 61112, 61112, 59063, 59063, 61111, 59031, 59031, 59063, 61111, 59063, 59063, 59063, 59063, 61143, 59031, 56951, 56952, 56951, 56951, 56952, 54904, 54904, 54904, 54904, 56952, 56952, 54904, 54904, 54904, 52824, 52824, 52824, 50776, 50776, 50777, 50745, 48697, 48697, 48697, 48697, 46649, 46617, 46617, 44569, 44569, 44569, 44569, 44569, 42489, 42489, 42489, 40441, 40441, 40441, 40409, 38361, 38361, 38361, 40441, 40409, 40442, 40442, 40442, 40442, 40442, 38362, 38362, 38362, 38362, 38394, 38394, 38394, 38394, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36346, 36346, 36346, 36314, 36314, 36314, 36314, 36346, 36346, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 36314, 34266, 36314, 36314, 34266, 34266, 34266, 34266, 34266, 34266, 34266, 34266, 34266, 34266, 34266, 34266, 34266, 34266, 32218, 32218, 32218, 32218, 32218, 32218, 32186, 32185, 32217, 32185, 32185, 32185, 32185, 32185, 30137, 30137, 30137, 30137, 63191, 63322, 63290, 63289, 63289, 63289, 63289, 63257, 63257, 63257, 63257, 63257, 63257, 63224, 61176, 61176, 61176, 61176, 61176, 61144, 61144, 61144, 61144, 61144, 61144, 61144, 61144, 61144, 61144, 61176, 61144, 59064, 59032, 59032, 59032, 56984, 56984, 56984, 56984, 59032, 59032, 59032, 56984, 56985, 56985, 54937, 54905, 54905, 52857, 52857, 52857, 52857, 50809, 50809, 50777, 50777, 48729, 48729, 48729, 48697, 46649, 46649, 46649, 46649, 44569, 44569, 44569, 42521, 42521, 42521, 42522, 42521, 42522, 44570, 44570, 44570, 42522, 42522, 42490, 42490, 40474, 40442, 40442, 40442, 38394, 38394, 38426, 38426, 38426, 38426, 38394, 38394, 38394, 38394, 38394, 38394, 38394, 38394, 38394, 38394, 38394, 38394, 38395, 38395, 38395, 38427, 38427, 38426, 38426, 38427, 38427, 38426, 38426, 38426, 38426, 38426, 38427, 38394, 38394, 38395, 38395, 38394, 38394, 38394, 38426, 36346, 38426, 38426, 38394, 38394, 36346, 36346, 36346, 36346, 36346, 36346, 36346, 36346, 36346, 36346, 36346, 34298, 34298, 34298, 34298, 34298, 34266, 34266, 34266, 34266, 34298, 34298, 34266, 34266, 34266, 34298, 34298, 32250, 32249, 32217, 58799, 63256, 65370, 65370, 65370, 65370, 65370, 65338, 63322, 63289, 63290, 63289, 63289, 63257, 63257, 63257, 63257, 63257, 63257, 63257, 63257, 63225, 61177, 61177, 61176, 61176, 63224, 63224, 63257, 63257, 61144, 59097, 59097, 59097, 59097, 59064, 59064, 59097, 61145, 59097, 59097, 59097, 59065, 57017, 57017, 57017, 54969, 54937, 54937, 54937, 52889, 52889, 52890, 52890, 50810, 50810, 50810, 50810, 48762, 48730, 48730, 48730, 46682, 46682, 46682, 46650, 46682, 46650, 46650, 46682, 46682, 46650, 46650, 46650, 44602, 44602, 44602, 42554, 42522, 42522, 42522, 40474, 40474, 40474, 40474, 40474, 40474, 40474, 40474, 40474, 40474, 40474, 40475, 40475, 40475, 40475, 40475, 40475, 40475, 40475, 40475, 40475, 40475, 40475, 40507, 40507, 40507, 40507, 40507, 40507, 40507, 40475, 40475, 40475, 42490, 44504, 56724, 52564, 46421, 38395, 38427, 40475, 38427, 38427, 38427, 38427, 38427, 38427, 38427, 38427, 38427, 38427, 38427, 38426, 38426, 38426, 38427, 38427, 38427, 36378, 38394, 36346, 36346, 36346, 36346, 36346, 36346, 36346, 36346, 36346, 36346, 36346, 34298, 34298, 34298, 34298, 34298, 34298, 34298, 34330, 56555, 65303, 65403, 63355, 65403, 65403, 65403, 65403, 65403, 65370, 65370, 65370, 65370, 65370, 63290, 63290, 63290, 63290, 63290, 63290, 63289, 63257, 63257, 63257, 63257, 63257, 63257, 63289, 63289, 63257, 61177, 61177, 61177, 61177, 61177, 61177, 61177, 61177, 61177, 61177, 59097, 59097, 59097, 59097, 57049, 57050, 57049, 54970, 54970, 54970, 54970, 54970, 52922, 52890, 52890, 52890, 52890, 50842, 50842, 50810, 50810, 48762, 48762, 48762, 50810, 50810, 50810, 50810, 50810, 48730, 48730, 48730, 46682, 46682, 46682, 44634, 44634, 44634, 44602, 42554, 42554, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42555, 42587, 42555, 42587, 42587, 42587, 42587, 42587, 42555, 48501, 56657, 58673, 56626, 56722, 37969, 29715, 33940, 40507, 40507, 40507, 40507, 40507, 40507, 40507, 40507, 40507, 40507, 40507, 40507, 40507, 36248, 34006, 36248, 38459, 38459, 38459, 38459, 38459, 38427, 38426, 38426, 38426, 38426, 38426, 38426, 38426, 38426, 38426, 38426, 38426, 38426, 38426, 36378, 36378, 36378, 36378, 54408, 58799, 63288, 63091, 65303, 65435, 65435, 65435, 65403, 65403, 65403, 65403, 65403, 65403, 65402, 65370, 65370, 65371, 65370, 65370, 65370, 63290, 63290, 63290, 63290, 63290, 65370, 65370, 63290, 63257, 61210, 61210, 61210, 61209, 61209, 63258, 63258, 63258, 61210, 61210, 61178, 59130, 59130, 59130, 59130, 59130, 57082, 57050, 57050, 57050, 55002, 55002, 54970, 54970, 54970, 52922, 52922, 52890, 52890, 52890, 52922, 52922, 54970, 52922, 52922, 52922, 52890, 50842, 50842, 50843, 48794, 48762, 48762, 46714, 46714, 46682, 46714, 44635, 44635, 44635, 44667, 44635, 44667, 44635, 44635, 44635, 44635, 44635, 42587, 42587, 44635, 44635, 44635, 44635, 44635, 44667, 44667, 44635, 44635, 44635, 44635, 44635, 44635, 42619, 44635, 44667, 44667, 44667, 44635, 44668, 44635, 44635, 52725, 48306, 56626, 50386, 60850, 54579, 31697, 29617, 33810, 33940, 40507, 40540, 42587, 42587, 40539, 42587, 42554, 38231, 36151, 36118, 33972, 31827, 31729, 31730, 27601, 36151, 40507, 40507, 40539, 40507, 40539, 40507, 40507, 40507, 40507, 40507, 40507, 38458, 38458, 38458, 38458, 38458, 38458, 38458, 38458, 38458, 38458, 38490, 58799, 58798, 60944, 62860, 63056, 65435, 65468, 65436, 65436, 65435, 65436, 65436, 65436, 65435, 65403, 65403, 63355, 65403, 65402, 65403, 65403, 65371, 63322, 63322, 65370, 65402, 65402, 63322, 63290, 63290, 63290, 63290, 63290, 63290, 63290, 63290, 63290, 63290, 61210, 61210, 61210, 61210, 61210, 61210, 59162, 59130, 59130, 59130, 57082, 57082, 57082, 57050, 57051, 57051, 55002, 55003, 55003, 57051, 57051, 57051, 57051, 57050, 55003, 55003, 54971, 52923, 52923, 52923, 50875, 50875, 50843, 48795, 48795, 48795, 46715, 46715, 46715, 46715, 46715, 46715, 46715, 46715, 46715, 46715, 46715, 46715, 46715, 46715, 46715, 46715, 46716, 46716, 46715, 46715, 46715, 44667, 44667, 44667, 44668, 46715, 44667, 44667, 44667, 44668, 46716, 46715, 46715, 46747, 44668, 46716, 52791, 58868, 48306, 46162, 58737, 50321, 60850, 52465, 31697, 29584, 33745, 29617, 40213, 52727, 44407, 38231, 36086, 33842, 31794, 33777, 33842, 33842, 33842, 31761, 31761, 29681, 29714, 25489, 29681, 40409, 40571, 42587, 42587, 42587, 40539, 40539, 40539, 40539, 40539, 40539, 40539, 40539, 40539, 40539, 40539, 40539, 40539, 40539, 40539, 40539, 56456, 58700, 58601, 60582, 60778, 63254, 65301, 65435, 65468, 65468, 65468, 65435, 65467, 65436, 65436, 63355, 63157, 63190, 65337, 65403, 65403, 65403, 65403, 65403, 65403, 65435, 65403, 63323, 63323, 63323, 63322, 63323, 63323, 63323, 63323, 63322, 63323, 63290, 63290, 63291, 61243, 61243, 61243, 61211, 61211, 59163, 59163, 59163, 59163, 59163, 57083, 59163, 59131, 59163, 59163, 59163, 59163, 59131, 57083, 57083, 57083, 57083, 55035, 55003, 55003, 55003, 52955, 52955, 52923, 50875, 50875, 50875, 50875, 48795, 48795, 48795, 48795, 48795, 48795, 48795, 48795, 48795, 50875, 50844, 50844, 48796, 48795, 48795, 46747, 46747, 46748, 46748, 46748, 46748, 46748, 46748, 46748, 46748, 46748, 46748, 46748, 48631, 38068, 42424, 42489, 44602, 46748, 46748, 50777, 44341, 44211, 37905, 40082, 44178, 46193, 62930, 60786, 52466, 33777, 29649, 33777, 31697, 35922, 40049, 42130, 46290, 27537, 29649, 29649, 29649, 33875, 31730, 31762, 31762, 33842, 33874, 33842, 31762, 31762, 29682, 40246, 42586, 44667, 42619, 42619, 42619, 42619, 42619, 42619, 42619, 42619, 42619, 42619, 42619, 42619, 42619, 42619, 42619, 42619, 42619, 58765, 60781, 58632, 58501, 60646, 60709, 62889, 65134, 65469, 65468, 65469, 65435, 63156, 65468, 65469, 63124, 60812, 62827, 60648, 62959, 63388, 65436, 65436, 65436, 65403, 63191, 63355, 65403, 63355, 63323, 65403, 65403, 65403, 63355, 63323, 63323, 63323, 63323, 63323, 63291, 63323, 61243, 61243, 61243, 61243, 61243, 59195, 59195, 61243, 61243, 61243, 61243, 61243, 61243, 61243, 59195, 59163, 59163, 59163, 57115, 57115, 57083, 57116, 57083, 55036, 55035, 55035, 55036, 55036, 52956, 52988, 52955, 52955, 52956, 52956, 52956, 52955, 52956, 52956, 50876, 50876, 50876, 50876, 48828, 48828, 48828, 48828, 48828, 48828, 48828, 48828, 48828, 48828, 48827, 48828, 48828, 48828, 48828, 48828, 48828, 52857, 56658, 35922, 33842, 33842, 33842, 42359, 42294, 44242, 40051, 37938, 33810, 40051, 39985, 50450, 54578, 48305, 42098, 35890, 33842, 33777, 33809, 37970, 35890, 37970, 46323, 35858, 33810, 31697, 38003, 31762, 21296, 23343, 23343, 31762, 33874, 31729, 33809, 40115, 33810, 27602, 36216, 44700, 44699, 44700, 44700, 44667, 44699, 44700, 44699, 44699, 44667, 44667, 44699, 42651, 42651, 42651, 42651, 42651, 42651, 58732, 60780, 58534, 60516, 60612, 60645, 62790, 64969, 65200, 65468, 65469, 65469, 63022, 65238, 65469, 65369, 65170, 62990, 62858, 60582, 62926, 65436, 65468, 65468, 63124, 58800, 65404, 63356, 65435, 65436, 65435, 65403, 65403, 63355, 63355, 63355, 63355, 63323, 63323, 63323, 63323, 61275, 61275, 61275, 61275, 61243, 61276, 63324, 63324, 63324, 61276, 61276, 61276, 61244, 61244, 59196, 59196, 59196, 59196, 59196, 59196, 59164, 57116, 57116, 57115, 57116, 57116, 57116, 57116, 57084, 55036, 55036, 55036, 55004, 52956, 52956, 50908, 50908, 50908, 50908, 50908, 50908, 50908, 50908, 50908, 48860, 48860, 48860, 48860, 48860, 48860, 48860, 48860, 50908, 50908, 48762, 46617, 48763, 48860, 52825, 58770, 54611, 37970, 37970, 33842, 33810, 33874, 33874, 33842, 35954, 37938, 37970, 40050, 40050, 44178, 35825, 37905, 37938, 37969, 42130, 48402, 54610, 35922, 35890, 37970, 40083, 38003, 31697, 40115, 35889, 38002, 35857, 31697, 29617, 35955, 35955, 33874, 33842, 38067, 33874, 29681, 27667, 34038, 40311, 42423, 44699, 44700, 44700, 44699, 44732, 44700, 44700, 44699, 44731, 44732, 44732, 44731, 44731, 44731, 44731, 56455, 58732, 60745, 60612, 60645, 62725, 62757, 62920, 65165, 65132, 65333, 65402, 65204, 65069, 65368, 63419, 63022, 65069, 62922, 62991, 60715, 63256, 65469, 65469, 63224, 56524, 58835, 65436, 65436, 65436, 65436, 65436, 65436, 65436, 65404, 63356, 63356, 63356, 63356, 63356, 63356, 63356, 63356, 63356, 63356, 63356, 63356, 63356, 63356, 63324, 63356, 63356, 61276, 61276, 61276, 61276, 61276, 61276, 61276, 61276, 59228, 59228, 59196, 59196, 59196, 59196, 57148, 57148, 55068, 55068, 55036, 52988, 52988, 52988, 52988, 52988, 52988, 52988, 52988, 50940, 50940, 50940, 50940, 50908, 50908, 50908, 50940, 50940, 50940, 50940, 50908, 50908, 50940, 50941, 54938, 40050, 40083, 38002, 46552, 42194, 52531, 52562, 40083, 46290, 35922, 35954, 38035, 33842, 33842, 31761, 35890, 37970, 35889, 38002, 40050, 37970, 37905, 33744, 37970, 42163, 50418, 60883, 38035, 33842, 35922, 35922, 37970, 31697, 40050, 35857, 46355, 60818, 37970, 33842, 33874, 33874, 33842, 31761, 33874, 35954, 35955, 25521, 37970, 48272, 35824, 40278, 48795, 48761, 46780, 46779, 46780, 46747, 46747, 46780, 46780, 46780, 46780, 46779, 46779, 46780, 58468, 58436, 60517, 60581, 60645, 62725, 62789, 64869, 65032, 65198, 65164, 65299, 65234, 63019, 65201, 65234, 65234, 65134, 62921, 62726, 62727, 62892, 63289, 63322, 60946, 60782, 63092, 65370, 65468, 65469, 65469, 65436, 65436, 65436, 65436, 65436, 65436, 65436, 65436, 65436, 63388, 63388, 63388, 63388, 63388, 63388, 63356, 63356, 63356, 63356, 63357, 63356, 63356, 63356, 63356, 63356, 63356, 61276, 61276, 61276, 59098, 59196, 59229, 57149, 57149, 57148, 55100, 55068, 55068, 55069, 55068, 55068, 55068, 55068, 55068, 53020, 55068, 53020, 53020, 52988, 53020, 53020, 53020, 52988, 52988, 52988, 52988, 52988, 53021, 52988, 53020, 53021, 48665, 48567, 48403, 38003, 38002, 37970, 35826, 42163, 48435, 50483, 44210, 50483, 42130, 35955, 35922, 35955, 35955, 35922, 35890, 40051, 38002, 42195, 42227, 42195, 42163, 37937, 44276, 46323, 56753, 65203, 44308, 37971, 33842, 33842, 35890, 35889, 37970, 40082, 42162, 54546, 46193, 56592, 44177, 31794, 38100, 35955, 35922, 35954, 35922, 35857, 35856, 31696, 33776, 37872, 50288, 60719, 38100, 42424, 48599, 50711, 50843, 48860, 48860, 46779, 46779, 48860, 48860, 48860, 62692, 62693, 60613, 60612, 62693, 62758, 62821, 64901, 64999, 63148, 65299, 65362, 65399, 65266, 65366, 65297, 63350, 65399, 65266, 65037, 62924, 62793, 63190, 65370, 60813, 60747, 63223, 65370, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65437, 65437, 65437, 65437, 65437, 65437, 65437, 63389, 63389, 63357, 63291, 59098, 56952, 52661, 50516, 46323, 46387, 50614, 50679, 52857, 57084, 57149, 57149, 57149, 57149, 57149, 55101, 52825, 42325, 50777, 50810, 46487, 44406, 53020, 53021, 53021, 53021, 53021, 53020, 53021, 53053, 53053, 52988, 53020, 53021, 53021, 57018, 52563, 46291, 42098, 40083, 38002, 40115, 37971, 40082, 42227, 40082, 42130, 44243, 42195, 38002, 38035, 38035, 38035, 35955, 35890, 38035, 42163, 42227, 44308, 44308, 42195, 37938, 46355, 48371, 61011, 60980, 42130, 35890, 35890, 33842, 35890, 38002, 38002, 40115, 40050, 46226, 58738, 56594, 58706, 46290, 38035, 33874, 38035, 38002, 35921, 33777, 31728, 33777, 33808, 44145, 50352, 62799, 54544, 48336, 42096, 50384, 50385, 38066, 33939, 31728, 40049, 46550, 44437, 37933, 58436, 60580, 62789, 64902, 62855, 64869, 64934, 64902, 64966, 65064, 65161, 65330, 65361, 65364, 65431, 65296, 65298, 65297, 65265, 65136, 65170, 62826, 62828, 62992, 62959, 62927, 63124, 63224, 65502, 65501, 65501, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65469, 65468, 65468, 65469, 65437, 65437, 65437, 63389, 61211, 59033, 56920, 61211, 61211, 52596, 48435, 48403, 48370, 48403, 48436, 48468, 46355, 46356, 44243, 42162, 48567, 59197, 57181, 57116, 50809, 46519, 42195, 40050, 40082, 40115, 40083, 40147, 40115, 44374, 55036, 55101, 55101, 55101, 46552, 44406, 40213, 38035, 36019, 54906, 56757, 60884, 48371, 46323, 46291, 38002, 38035, 38035, 38067, 35922, 42196, 40083, 40083, 40115, 40083, 40082, 40115, 35955, 38067, 38035, 35923, 33745, 40083, 42195, 44340, 44308, 42195, 46356, 50516, 50483, 52596, 44242, 40018, 35889, 37970, 33777, 35954, 38002, 38002, 37937, 54513, 46225, 65010, 54578, 60752, 52465, 37937, 40050, 35857, 35921, 35889, 35889, 35857, 33776, 35889, 50352, 50385, 60687, 50319, 37936, 52433, 48272, 44145, 33808, 35757, 35658, 35623, 35559, 37637, 35589, 56260, 56324, 58436, 62661, 62790, 62853, 64999, 65063, 65131, 65064, 65128, 65194, 65226, 65292, 65330, 65431, 65360, 65362, 65197, 65034, 65202, 63056, 62956, 65336, 62922, 62890, 63122, 63222, 65501, 65502, 65502, 65502, 65502, 65501, 65501, 65501, 65501, 65501, 65501, 65469, 65469, 63421, 63290, 58900, 58901, 63291, 63421, 63356, 63389, 61243, 52628, 50515, 50515, 50483, 48435, 48435, 50483, 48403, 46323, 46322, 48436, 46388, 46323, 44243, 44243, 44275, 42195, 44275, 48566, 44275, 42163, 42163, 42163, 42163, 42195, 40115, 38035, 40115, 38035, 40115, 40148, 48664, 55004, 48599, 42195, 42228, 40180, 38035, 35955, 40082, 48436, 46322, 46323, 44211, 42163, 38003, 33874, 35954, 35922, 35955, 35922, 38035, 40083, 42163, 40147, 40083, 38035, 35955, 35922, 35955, 33874, 31729, 33777, 37970, 44308, 44276, 44276, 44243, 54611, 60753, 40049, 33809, 35922, 33841, 35890, 33841, 35857, 35889, 37969, 37937, 50450, 46257, 52401, 54545, 58640, 46225, 35921, 33841, 33809, 37970, 46290, 37969, 35889, 33809, 35889, 54512, 42097, 50417, 42097, 35888, 46157, 46091, 33577, 33479, 27239, 33510, 31366, 35589, 37669, 31398, 56228, 56292, 58405, 58437, 60582, 62694, 62791, 64935, 65096, 65262, 65262, 65295, 65328, 65362, 65361, 65361, 65395, 65430, 65332, 65200, 65132, 65131, 65098, 65265, 65133, 65132, 65232, 65434, 65501, 65502, 65502, 65534, 65502, 65502, 65502, 65502, 65502, 65501, 65470, 65470, 65470, 63291, 58900, 56820, 56788, 56789, 59000, 56821, 54773, 54740, 52595, 52595, 52660, 50548, 50516, 50516, 50548, 48435, 46355, 46355, 48436, 46355, 46388, 46355, 46323, 46356, 44308, 44275, 44308, 44275, 40115, 44275, 42227, 44275, 42195, 42227, 40083, 42195, 42195, 40083, 42195, 40147, 38035, 42163, 42195, 44308, 42195, 40115, 35987, 38035, 38035, 40116, 38002, 40115, 40148, 38067, 35955, 38035, 38035, 38068, 35955, 40115, 40083, 40115, 40115, 40115, 42228, 42195, 35987, 38068, 35955, 35955, 35954, 40115, 42195, 44276, 40050, 37970, 44210, 37970, 35889, 29649, 31729, 33809, 35890, 38002, 38002, 40115, 38002, 40051, 40082, 40082, 40049, 40082, 40050, 38001, 35921, 35889, 35889, 37970, 44145, 33810, 33809, 35922, 35856, 37903, 41932, 37737, 37671, 35557, 35559, 33478, 33447, 31398, 27239, 37637, 39749, 37637, 35558, 33510, 54051, 54148, 56260, 58405, 58469, 60484, 62662, 62727, 64871, 65001, 65130, 65261, 65328, 65393, 65498, 65502, 65502, 65464, 65432, 65362, 65326, 65326, 65330, 65262, 65162, 65232, 65266, 65332, 65502, 65502, 65502, 65502, 65502, 65502, 65502, 65502, 65502, 65502, 65470, 65404, 61112, 58900, 58900, 58868, 56788, 56788, 54707, 54708, 54708, 54709, 52628, 52628, 52628, 50548, 50548, 50548, 48468, 48435, 46355, 48435, 48468, 50516, 48436, 46420, 46388, 46388, 46388, 44275, 46356, 44276, 44275, 46355, 44275, 42227, 42227, 42227, 40115, 42195, 42227, 40147, 42195, 42228, 42195, 42195, 44308, 46421, 44340, 40148, 38067, 38067, 38034, 38068, 38035, 40115, 40147, 42228, 38035, 38035, 38035, 40180, 38067, 37970, 40115, 40115, 40115, 42228, 42227, 42227, 40115, 35987, 38068, 35955, 44373, 46388, 46421, 40082, 37970, 37970, 40083, 40050, 40083, 33810, 33842, 38002, 38002, 40082, 40083, 40083, 35922, 38002, 38002, 37970, 35857, 37969, 40050, 38002, 40082, 37970, 37937, 39983, 37870, 33710, 33709, 35788, 37737, 37670, 39718, 37638, 29351, 18952, 33479, 31398, 35558, 33479, 37669, 37669, 37638, 37638, 37669, 25159, 54116, 56228, 56293, 58405, 58438, 60550, 60648, 62695, 64839, 64969, 65099, 65198, 65229, 65329, 65464, 65533, 65534, 65501, 65496, 65394, 65360, 65261, 65364, 65299, 65033, 65002, 62923, 62925, 63090, 65468, 65503, 65502, 65502, 65502, 63290, 63291, 65503, 65502, 65502, 61078, 60981, 58901, 58901, 58869, 56820, 56789, 56789, 54708, 54708, 54709, 52628, 52628, 50580, 50580, 50548, 50548, 48468, 50516, 50549, 50548, 50581, 50581, 48500, 48468, 48468, 48501, 46420, 44275, 46388, 46388, 46388, 46388, 44308, 44275, 42227, 44275, 42227, 40115, 42195, 42260, 42227, 44275, 44308, 44308, 44307, 44340, 44308, 42260, 40115, 38035, 38035, 40147, 40147, 40147, 40148, 42228, 40115, 42260, 40148, 40147, 38035, 40115, 42195, 42195, 42195, 42260, 44308, 42163, 38002, 35954, 35954, 40115, 42228, 40115, 37970, 35889, 35857, 40115, 40115, 42195, 40115, 38002, 35921, 35922, 35921, 37970, 40082, 35889, 35889, 35889, 40050, 40050, 37938, 39951, 37837, 33612, 31498, 31498, 31466, 35625, 33577, 35591, 35559, 35558, 35591, 33479, 31399, 27272, 29319, 27240, 33479, 35559, 39749, 39717, 39749, 37638, 33510, 35526, 39686, 27270, 56260, 56292, 58404, 60517, 60549, 62628, 62758, 62823, 65001, 64999, 65097, 65196, 65329, 65395, 65430, 65501, 65533, 65497, 65464, 65426, 65358, 65292, 65259, 65329, 65066, 64935, 64904, 62857, 65336, 65503, 65535, 65535, 65535, 65502, 65403, 60980, 65437, 65469, 65371, 63093, 61013, 58933, 58901, 58901, 56821, 56821, 56821, 54708, 54708, 54709, 54709, 52661, 52693, 52694, 52694, 52662, 52662, 52693, 52694, 52661, 50613, 50581, 48500, 48500, 48500, 48501, 48501, 46420, 46421, 46420, 46388, 46356, 44308, 44308, 44275, 44307, 44308, 42195, 42227, 42195, 44308, 44275, 44308, 44308, 46356, 46420, 44308, 42227, 40082, 33808, 35922, 40179, 42260, 42228, 42260, 40148, 40147, 40147, 40147, 38034, 35954, 38002, 40147, 44308, 42195, 40114, 40115, 40115, 40147, 38034, 38067, 40115, 35889, 35889, 35922, 35922, 40115, 40115, 42163, 42162, 40115, 40082, 38002, 35922, 37970, 37970, 40050, 38002, 40082, 35922, 40017, 39917, 37739, 35593, 35626, 35625, 37705, 39753, 39783, 35591, 35558, 33511, 35559, 35559, 31368, 37607, 31401, 35593, 31400, 25193, 37639, 41798, 37639, 35558, 41798, 29320, 33447, 31400, 29319, 29319, 58502, 60516, 60548, 62693, 62757, 64870, 64902, 64934, 65065, 65032, 65096, 65161, 65260, 65326, 65359, 65395, 65429, 65395, 65431, 65294, 65259, 65293, 65258, 65290, 65225, 65159, 65095, 65098, 65200, 65402, 65534, 65535, 65535, 65469, 63192, 60882, 63323, 63159, 63126, 63126, 61046, 61013, 58933, 58933, 58933, 58901, 56821, 56821, 54741, 54741, 56854, 56854, 54806, 54774, 54806, 52694, 52726, 52661, 52694, 52661, 50613, 50581, 50549, 50581, 50581, 48501, 48500, 48500, 48501, 48533, 48500, 46420, 46421, 46453, 46420, 46421, 46388, 44308, 46420, 44340, 44340, 44275, 44275, 44340, 46388, 46453, 42194, 35823, 35856, 33775, 31695, 38034, 44308, 46420, 40146, 42292, 42227, 38002, 38002, 35921, 35921, 38034, 35953, 40147, 40147, 40147, 40147, 40115, 38035, 35921, 38001, 35954, 38002, 40115, 38002, 33840, 38034, 40115, 40082, 42163, 40082, 40050, 40082, 38034, 40114, 40082, 42163, 38001, 39918, 41932, 37706, 39786, 39817, 39785, 39785, 39753, 41832, 41831, 37703, 31433, 35559, 31432, 33480, 35559, 41802, 54345, 41833, 39687, 35591, 39719, 39751, 37640, 41767, 41798, 25160, 23080, 35558, 29320, 33479, 29319, 60515, 62595, 62692, 62725, 62757, 62789, 62790, 64870, 62887, 65031, 65127, 65159, 65226, 65226, 65227, 65293, 65328, 65297, 65297, 65164, 65097, 65096, 65129, 65095, 65095, 65127, 65095, 65161, 65196, 65333, 65499, 65535, 65535, 65469, 65337, 62992, 62993, 62994, 65270, 65238, 63158, 63126, 61045, 61046, 61046, 58966, 58933, 58901, 58901, 56853, 56853, 56854, 56854, 56886, 54806, 52726, 52693, 52693, 54774, 52694, 50613, 50581, 50613, 52661, 52661, 50581, 48533, 50581, 48501, 50581, 48501, 48469, 48533, 48501, 48501, 48501, 46421, 46421, 46421, 44340, 44340, 44308, 46388, 46421, 46420, 42162, 35855, 33743, 35823, 35855, 31695, 31695, 38002, 38000, 42226, 40114, 35921, 40147, 44308, 40146, 42227, 38066, 33872, 35953, 40180, 38067, 38034, 38002, 35922, 42227, 40115, 38035, 35922, 40115, 40115, 40114, 38034, 40083, 42163, 42195, 40115, 40082, 40082, 40114, 38034, 38034, 42096, 39885, 39819, 41866, 39817, 43945, 41865, 43944, 39752, 39784, 41799, 41799, 37609, 27273, 41767, 33480, 35529, 41833, 45962, 50153, 37608, 41799, 45958, 41766, 31432, 41798, 43847, 33479, 25194, 37670, 35591, 33479, 29352, 41797, 62693, 62628, 60548, 62596, 62596, 62627, 62724, 64901, 65032, 65095, 65127, 65094, 65095, 65064, 65130, 65160, 65195, 65263, 65263, 65166, 64968, 64969, 65000, 64967, 64934, 64966, 64966, 65100, 63083, 64999, 65266, 65502, 65535, 65468, 63186, 63054, 62825, 62925, 65302, 65271, 63223, 63190, 63158, 63158, 63158, 63126, 61045, 61045, 61013, 60981, 58900, 58966, 56886, 58967, 56919, 56919, 54806, 54806, 54806, 52726, 52726, 52693, 52693, 52694, 52661, 50548, 50613, 50613, 50581, 48468, 48468, 48468, 50613, 48533, 48501, 48533, 48533, 48533, 46453, 46388, 46388, 46420, 42162, 37969, 37936, 37904, 37901, 35855, 35823, 35855, 35855, 33775, 33776, 38001, 33775, 42291, 35921, 31727, 40114, 33808, 38034, 35920, 31695, 29679, 29680, 33808, 38034, 40115, 42195, 42228, 40147, 40115, 35954, 35954, 40147, 40147, 40115, 40114, 42195, 40082, 40115, 42162, 40115, 42195, 42096, 39886, 39819, 39787, 46025, 46025, 48105, 43944, 41864, 39752, 35625, 35561, 41801, 41768, 39720, 43879, 45960, 33513, 35595, 50185, 45992, 39720, 45958, 45959, 37640, 39751, 39687, 37608, 50054, 35560, 35560, 45958, 35560, 43910, 43878, 31399, 58371, 58371, 60451, 60548, 62659, 62756, 62853, 64933, 64999, 65032, 65063, 65031, 64934, 62888, 65131, 65131, 65131, 65201, 65233, 65167, 62790, 65002, 65069, 64937, 62888, 62790, 62822, 62922, 65036, 65068, 63121, 65401, 65468, 65300, 63253, 65068, 63087, 65169, 65335, 65335, 65303, 65270, 63189, 63157, 63125, 63125, 63126, 63126, 61012, 61045, 60914, 58900, 61079, 61079, 59031, 58999, 56886, 58967, 56919, 54773, 54806, 54774, 54774, 54741, 50482, 48402, 50548, 50613, 48468, 44209, 46322, 46388, 50614, 50646, 50646, 48501, 48501, 48468, 46420, 42162, 44242, 40016, 37936, 37936, 40048, 37968, 39846, 35855, 37969, 37969, 37936, 35888, 35855, 37969, 35856, 46064, 38001, 33807, 35888, 33808, 33775, 33807, 31728, 31728, 31727, 31727, 31727, 35921, 44373, 44276, 42195, 40115, 40147, 40114, 40178, 42226, 42259, 46388, 44340, 42260, 44275, 44275, 46224, 44013, 43947, 39819, 41899, 46058, 48136, 48073, 41865, 43912, 41864, 41833, 33514, 41801, 45929, 43914, 52200, 45993, 54281, 37641, 45991, 37672, 41800, 45991, 41768, 35560, 35528, 48070, 31401, 41799, 45960, 43879, 43910, 48037, 37639, 48037, 45958, 37671, 58339, 58403, 60483, 62659, 62723, 62723, 64804, 62788, 64933, 62919, 64902, 62824, 60646, 62823, 62886, 64999, 65003, 62922, 63052, 64969, 64807, 62858, 62858, 62857, 62726, 60612, 60612, 62760, 62991, 62958, 62825, 65203, 65301, 65333, 65170, 63056, 62825, 62890, 63154, 65268, 65268, 65236, 65203, 63123, 63091, 63058, 63059, 60979, 60979, 60947, 58834, 58835, 61014, 58999, 61014, 58966, 56852, 58999, 58934, 54675, 56886, 56821, 52563, 50450, 48402, 48370, 48435, 48402, 46289, 44209, 44209, 44242, 46387, 46387, 46387, 46387, 46354, 46191, 44209, 40049, 42129, 42162, 40049, 40049, 42161, 40081, 37668, 37933, 42194, 40114, 40048, 42162, 44307, 37968, 40048, 48240, 37936, 42063, 37904, 33775, 33743, 31695, 35824, 37903, 35823, 33743, 31695, 31727, 31728, 40146, 46453, 44339, 38066, 38064, 35952, 35984, 35952, 38033, 38034, 40081, 46158, 48140, 37805, 41901, 43980, 44011, 46058, 48105, 48105, 43913, 46025, 45992, 33514, 37673, 25258, 48072, 48041, 35626, 52232, 50154, 50120, 39753, 43944, 45990, 46021, 35592, 35560, 31432, 45992, 50086, 31432, 35559, 35624, 48069, 35622, 43909, 45957, 43846, 41829, 43876, 58371, 60516, 60515, 60546, 60579, 62659, 62691, 62756, 64839, 62790, 60614, 58601, 58437, 62725, 64837, 62788, 62825, 62790, 65037, 62988, 62694, 62761, 62861, 63057, 60813, 60549, 58469, 60780, 60648, 60551, 58437, 58566, 63090, 63156, 62991, 60682, 60877, 60779, 65170, 65236, 65236, 65203, 65203, 63123, 63090, 63091, 63058, 60978, 60946, 60914, 60914, 58834, 58867, 61013, 58867, 56787, 56755, 56853, 56756, 54642, 54675, 52530, 52562, 52530, 50449, 50449, 50482, 48401, 48369, 46322, 48435, 48435, 46322, 46355, 42129, 44210, 46322, 46059, 40015, 40016, 40049, 42162, 40081, 44307, 42130, 44176, 46088, 37900, 40114, 40082, 42161, 48467, 42096, 40016, 39983, 44111, 37902, 41964, 33743, 31695, 31727, 31695, 31695, 31695, 31663, 31663, 29615, 31664, 31695, 31695, 31727, 31727, 33807, 33807, 37935, 42062, 39983, 39982, 46157, 48172, 44012, 44012, 37772, 48139, 48138, 48106, 46058, 46026, 43913, 33579, 52232, 48041, 45993, 41833, 35626, 45992, 43912, 37674, 45960, 37673, 45992, 45992, 45990, 45960, 41799, 33512, 41831, 37640, 31432, 45958, 35591, 39719, 39751, 45958, 41799, 39780, 43909, 35558, 41798, 43847, 58437, 58435, 58403, 60482, 60482, 60546, 62692, 62692, 60613, 58436, 54244, 54245, 58437, 60613, 62789, 62757, 62793, 60812, 65071, 62856, 60614, 60647, 60680, 60713, 60714, 58437, 56357, 58569, 58668, 56458, 56294, 56422, 60713, 58602, 60782, 60847, 60683, 60813, 60878, 63123, 63123, 63123, 63091, 63026, 63059, 63059, 63058, 63026, 60946, 60946, 60947, 60948, 58867, 58835, 58834, 56754, 56722, 56722, 54674, 54642, 54642, 52595, 52595, 50482, 50449, 48402, 50482, 48369, 48369, 48370, 48402, 46289, 46289, 44241, 44177, 44209, 46354, 44045, 39983, 40081, 40049, 42194, 42194, 48501, 48500, 40013, 37636, 33576, 44274, 44144, 42030, 39950, 37870, 35854, 37902, 35823, 33742, 41898, 33742, 31695, 29615, 31695, 31695, 29615, 31695, 29615, 29615, 29615, 27498, 31695, 31695, 31694, 37902, 44046, 44077, 44109, 48204, 50219, 44012, 44011, 46091, 43979, 44011, 43979, 46058, 46026, 46026, 45994, 39787, 43978, 58538, 43946, 48106, 45993, 43913, 41833, 43880, 45992, 43912, 48103, 48102, 48102, 43942, 41800, 35592, 41831, 41830, 43912, 41799, 41863, 41831, 39751, 39718, 35592, 43908, 33542, 39782, 31431, 37639, 41830, 58405, 58339, 58371, 60451, 60450, 62627, 60580, 58338, 56293, 52133, 47908, 50020, 56292, 60547, 62724, 60613, 58501, 58534, 60516, 62759, 60582, 60780, 60780, 60681, 60682, 56292, 54212, 54343, 56458, 54313, 52167, 52068, 54376, 56555, 58734, 54444, 52263, 54376, 63090, 63123, 63123, 63091, 63059, 58733, 60912, 60979, 60946, 60946, 60946, 60946, 60947, 60947, 60948, 58835, 56787, 56722, 56722, 54674, 54642, 54675, 54707, 54707, 52562, 52530, 50481, 50450, 48370, 48370, 48435, 46354, 46289, 44242, 44209, 44242, 46355, 46322, 46322, 41995, 42128, 44242, 42129, 42161, 48467, 50613, 50515, 39948, 39714, 37699, 48270, 46190, 35756, 37870, 37935, 37870, 35823, 35823, 37870, 29349, 31530, 31694, 31727, 31695, 31695, 31695, 31695, 31695, 31726, 29612, 19043, 39915, 39916, 37869, 37836, 48203, 48171, 46091, 46091, 46058, 39883, 39883, 41930, 41898, 37739, 39818, 48138, 41899, 37706, 45994, 29451, 50185, 48073, 48104, 48072, 45993, 43913, 41865, 48136, 48103, 50151, 43912, 43912, 43880, 39784, 39752, 39783, 46022, 41831, 48039, 35592, 39751, 46021, 39751, 43910, 35621, 48100, 43909, 39749, 39719, 50119, 33511, 56326, 56324, 58306, 58370, 60483, 58403, 56292, 54213, 47910, 45894, 43780, 54246, 56324, 58499, 60611, 58436, 56292, 54211, 56324, 60549, 60549, 58536, 58471, 58470, 60650, 54245, 54212, 50052, 52296, 52136, 47975, 47908, 54344, 56522, 58669, 52265, 45957, 45927, 52395, 58768, 63092, 63092, 63058, 54376, 52197, 58702, 60979, 60946, 60914, 58866, 58834, 58866, 58834, 58900, 60981, 58900, 56755, 56722, 54642, 56723, 54642, 54642, 52562, 52562, 50482, 50449, 48402, 48402, 48434, 46321, 46289, 44241, 46355, 44209, 44242, 42161, 44307, 33511, 35724, 44241, 44176, 42128, 44240, 42091, 40012, 37734, 35555, 35555, 35722, 27336, 20998, 27370, 35855, 35823, 35822, 31628, 33611, 33575, 29447, 31661, 31727, 33742, 33742, 37869, 37902, 39949, 37870, 33606, 29380, 46091, 35757, 27470, 27470, 33645, 52298, 48139, 46090, 46058, 41930, 46090, 41931, 31563, 29483, 39850, 46026, 35659, 46025, 31532, 44009, 43978, 46025, 45993, 41834, 46025, 50152, 52295, 41865, 41865, 41865, 37673, 35625, 43912, 41863, 39752, 43879, 46023, 48038, 39782, 48070, 41799, 37639, 50181, 33510, 46022, 33511, 31431, 41830, 45989, 46020, 31399, 56391, 58405, 58307, 58339, 56226, 52002, 47811, 43715, 39556, 54510, 43748, 47875, 54244, 58436, 60483, 56227, 52067, 52100, 54179, 58436, 60517, 56326, 58766, 60749, 56456, 54180, 50020, 54247, 54346, 47975, 43781, 41732, 43845, 52297, 45894, 45927, 48040, 48138, 50251, 50316, 54606, 63059, 60945, 50216, 54345, 52198, 56654, 60979, 60979, 60946, 60915, 58834, 58802, 56754, 56820, 58901, 56787, 56755, 56754, 54674, 54674, 54610, 52562, 52562, 52530, 50482, 50450, 48402, 48402, 48369, 46289, 46289, 44241, 44209, 44209, 50353, 48271, 33511, 35657, 44142, 48236, 48206, 37896, 33700, 39979, 33605, 25185, 35621, 21092, 20998, 23144, 25258, 35823, 37903, 29481, 19012, 33608, 33508, 27303, 33676, 42029, 46157, 44077, 39950, 35758, 37837, 37805, 29444, 23139, 41963, 35756, 27469, 39916, 50250, 52329, 50217, 44010, 46090, 48169, 50218, 50216, 46057, 39882, 37738, 46058, 46089, 39818, 41897, 46057, 48136, 50183, 50215, 54343, 50215, 46024, 43912, 43976, 41832, 37673, 46024, 45992, 45992, 43912, 43912, 37673, 43911, 43911, 50117, 43973, 48103, 45959, 39751, 46023, 43910, 43910, 46021, 45989, 48070, 43941, 46020, 56294, 58404, 56259, 54115, 47843, 43618, 39491, 37411, 31204, 45993, 48007, 47940, 52099, 56355, 58371, 49954, 49923, 47875, 50019, 54245, 56324, 56423, 54442, 54408, 56423, 52067, 50020, 47972, 56556, 45862, 43813, 39620, 39652, 45927, 43880, 41766, 43878, 41796, 50282, 43976, 43912, 52494, 52429, 43879, 43815, 48039, 52363, 60979, 60979, 60946, 60915, 58834, 58834, 56754, 56755, 56787, 56787, 54674, 54642, 54674, 54674, 54642, 52562, 52562, 52530, 50482, 50482, 50514, 50482, 48369, 46321, 46289, 46289, 50384, 52430, 52399, 46189, 39852, 33577, 48305, 46055, 37734, 33731, 27460, 33702, 27332, 18946, 18946, 23172, 27272, 27305, 27272, 37835, 37901, 18981, 14789, 14819, 21092, 21219, 27463, 35785, 39917, 37837, 41964, 48204, 46156, 46124, 39782, 23140, 25285, 46123, 52329, 52329, 50217, 50217, 54376, 52296, 54343, 48104, 46087, 46024, 37737, 37736, 50184, 41896, 48072, 48103, 48103, 43976, 52262, 46023, 41864, 41832, 35657, 35624, 33546, 33546, 45992, 41832, 50182, 39752, 45959, 46024, 50152, 41831, 46023, 48071, 43912, 45991, 48102, 46023, 45990, 45991, 50150, 41863, 41830, 50212, 39782, 43910, 41830, 54212, 56259, 49954, 43715, 39491, 37443, 33251, 31139, 29157, 39622, 48073, 47941, 54214, 56390, 52098, 47940, 45763, 49989, 47876, 49988, 54147, 56358, 56426, 54379, 54279, 52068, 49988, 45827, 45893, 47943, 41702, 39621, 41799, 46025, 41768, 37640, 37607, 43978, 46088, 37637, 41831, 35589, 46090, 46025, 43880, 45992, 39654, 39784, 58866, 60947, 60947, 60914, 58866, 58834, 56754, 56787, 56787, 54674, 54642, 54642, 54642, 52562, 52562, 52562, 52562, 52530, 52562, 52530, 50449, 50384, 50384, 52431, 52430, 54477, 50317, 48205, 35688, 25187, 27366, 42030, 31398, 25187, 31683, 29572, 27491, 19009, 16835, 16836, 23174, 23144, 25224, 25223, 23172, 27368, 23175, 18950, 16869, 16961, 14850, 19105, 17058, 31659, 39981, 52332, 48203, 50251, 52297, 33540, 23138, 46055, 50249, 52265, 52327, 50185, 48104, 52263, 43912, 50215, 37737, 39817, 43975, 43944, 41864, 41864, 35624, 43944, 48135, 50183, 45992, 48071, 41832, 45991, 43912, 31465, 46056, 41864, 37704, 43943, 43943, 50214, 52230, 45989, 46023, 41830, 43910, 43910, 50181, 45989, 48069, 43878, 41830, 41863, 46021, 43910, 37670, 37670, 31463, 35558, 35622, 43940, 52132, 47875, 39586, 33314, 33314, 31266, 27107, 27107, 29156, 31235, 37540, 52297, 54312, 60682, 52167, 43715, 50152, 41636, 43683, 47941, 49955, 56326, 50052, 43813, 45894, 47940, 47907, 47973, 50153, 43751, 39623, 39622, 39719, 46090, 39752, 33510, 31397, 29317, 33542, 39751, 31332, 33444, 33509, 39751, 39688, 43945, 39751, 46059, 58867, 58867, 60980, 58866, 58834, 58835, 56755, 56755, 56755, 54674, 54674, 54642, 54674, 52562, 52562, 52561, 52529, 52529, 52528, 54576, 54575, 56590, 54478, 50318, 54445, 50317, 48237, 46157, 37703, 21058, 18948, 31594, 31363, 20964, 31685, 27555, 31719, 27399, 23238, 16932, 19045, 21028, 27368, 23207, 19012, 27433, 25320, 18982, 16901, 14849, 16993, 16994, 14978, 37865, 50251, 48202, 48202, 46058, 46089, 37765, 29379, 48103, 54312, 50183, 52232, 50183, 48135, 50214, 43943, 45991, 45992, 50151, 54372, 48071, 41863, 35624, 48101, 45991, 43879, 52261, 50117, 37735, 31496, 37735, 33575, 33544, 35624, 41863, 35623, 41862, 48069, 50181, 45991, 50182, 48070, 48069, 43847, 45958, 50085, 50149, 48038, 48067, 45989, 39750, 50116, 41860, 41860, 23111, 35590, 23175, 21095, 31462, 45859, 39620, 29154, 29154, 29090, 27042, 24962, 22946, 27107, 31300, 35460, 41733, 50151, 60912, 54575, 52299, 39653, 43847, 39523, 43716, 45732, 56490, 56456, 43814, 41733, 43780, 47972, 43844, 48105, 41735, 39623, 37543, 35494, 46091, 37607, 29221, 31269, 27173, 33512, 33479, 33478, 27172, 31398, 41897, 41801, 37575, 35527, 43978, 52463, 58867, 58900, 56755, 56755, 56755, 56755, 56755, 56755, 56820, 54674, 54674, 54641, 54609, 54577, 52529, 52528, 54576, 54543, 54510, 56589, 54477, 50317, 50317, 50317, 48237, 50317, 46157, 37736, 20994, 18916, 23143, 29350, 25220, 31684, 25381, 21189, 12769, 12707, 10596, 16899, 23109, 27302, 25224, 16900, 14787, 21095, 14756, 14789, 12769, 17026, 16962, 12770, 27332, 44010, 33703, 46088, 50249, 46022, 37638, 25188, 45991, 48136, 43976, 41864, 52293, 43912, 52262, 54278, 50244, 48070, 54310, 52229, 33512, 37703, 50182, 54339, 39751, 39750, 39751, 35591, 31432, 27304, 21129, 23177, 31464, 37671, 29416, 23177, 27336, 41831, 43942, 48038, 48100, 39720, 48070, 43879, 33448, 31369, 48006, 58466, 52260, 48037, 48035, 52259, 41860, 41860, 37700, 41891, 35620, 25254, 19047, 35427, 29186, 27074, 27138, 27106, 27075, 22978, 22978, 27172, 29252, 33380, 39589, 45828, 48006, 37540, 39751, 33380, 33348, 33347, 45860, 43684, 50183, 52262, 39718, 37573, 41701, 43813, 45925, 45926, 41768, 37575, 35495, 35527, 46121, 52430, 35528, 35463, 25157, 23108, 35657, 25093, 27238, 31399, 35656, 41802, 41801, 35592, 31333, 37802, 58802, 58834, 58834, 56754, 56754, 56722, 56721, 56722, 56689, 56689, 56689, 56689, 56656, 56656, 56656, 54576, 56622, 58670, 58669, 54508, 50317, 50349, 46158, 44110, 44078, 44077, 44078, 33575, 25220, 16772, 20997, 20996, 23203, 29573, 25287, 27399, 14850, 10562, 10596, 21093, 23110, 21062, 23111, 16835, 23143, 16836, 16838, 20965, 16866, 16993, 16899, 16930, 29412, 37767, 29509, 37766, 52265, 33543, 25187, 25222, 37638, 37735, 37731, 48105, 54342, 50214, 45960, 56388, 41954, 46021, 54310, 52260, 41830, 48070, 48069, 41831, 33513, 35623, 29353, 29351, 25256, 35623, 21097, 21066, 27335, 23146, 33512, 35622, 31433, 37704, 43878, 45926, 50149, 39687, 33510, 25192, 21064, 33543, 39718, 52227, 50115, 43907, 46018, 48004, 46019, 45954, 41827, 50146, 41796, 29317, 29381, 27074, 27106, 27106, 27106, 27107, 25060, 23011, 25091, 25092, 25124, 31365, 35493, 43781, 39620, 33380, 31365, 31461, 31396, 33602, 35555, 35492, 41732, 50117, 39782, 33509, 35525, 39590, 41734, 41765, 39751, 37640, 35527, 31366, 37736, 48302, 35496, 33446, 21060, 18980, 23012, 27237, 20933, 20933, 18980, 35528, 39754, 31303, 31366, 27269, 46221, 58834, 58801, 58801, 58769, 58769, 54609, 54609, 54609, 54609, 54576, 54577, 54576, 56655, 56655, 58670, 58701, 58669, 58636, 54477, 52397, 46157, 44078, 42030, 39918, 39918, 37838, 31498, 23142, 20967, 25223, 20965, 23013, 39879, 35684, 23236, 16930, 12801, 10597, 16868, 23110, 23077, 25156, 18914, 31429, 21028, 14725, 12675, 12769, 14849, 10690, 12707, 10690, 23237, 33638, 35815, 33707, 29348, 16897, 27299, 35653, 35587, 23105, 46024, 50182, 52261, 48103, 46052, 27425, 33571, 48040, 54308, 43942, 41830, 52228, 37671, 27304, 31432, 37672, 35623, 31432, 31464, 27336, 21067, 25259, 27307, 35625, 29385, 37672, 43910, 43910, 35592, 35527, 37638, 45957, 41829, 45989, 43908, 37638, 46051, 46019, 45956, 45987, 41796, 37669, 35526, 50178, 48066, 39749, 35556, 35588, 24994, 27141, 27141, 24996, 20835, 20835, 20900, 20868, 18820, 20932, 25093, 33447, 41797, 33443, 27203, 29220, 29285, 33511, 29411, 31458, 31459, 33506, 43908, 39716, 27172, 31366, 35463, 35558, 37701, 35525, 35591, 31431, 29383, 29415, 35785, 31399, 27270, 23141, 19012, 20932, 20932, 22981, 16772, 20997, 27271, 25158, 23077, 23013, 23045, 37769, 58801, 56689, 56689, 54641, 52561, 52529, 54577, 54576, 54544, 54544, 54543, 56623, 54510, 58670, 58669, 56589, 54510, 50285, 48237, 46157, 44078, 42030, 44078, 41998, 41998, 39918, 35725, 16900, 16838, 14757, 16835, 25125, 48130, 35620, 43974, 19041, 16961, 18853, 20997, 27269, 23139, 20995, 12642, 23075, 18916, 14789, 14787, 10625, 19075, 16933, 14789, 12771, 23300, 23332, 25347, 27525, 29413, 27268, 27268, 18915, 27235, 18946, 33506, 33539, 50182, 43912, 43972, 21153, 33541, 41801, 54341, 50181, 50117, 45990, 41861, 27272, 31495, 37671, 25224, 41830, 31496, 29385, 29387, 29418, 35626, 35595, 39752, 48039, 39719, 43877, 41830, 33511, 31431, 56418, 50148, 48036, 37605, 46051, 48066, 37669, 50179, 29350, 25159, 27270, 37638, 43907, 45955, 43876, 27269, 27301, 25093, 22979, 24962, 22915, 22948, 18820, 16706, 14627, 14661, 16740, 20901, 33415, 41733, 29220, 25158, 25126, 27109, 27205, 25189, 25125, 25091, 27204, 37572, 41699, 29251, 27205, 31399, 33511, 31429, 33445, 31496, 29416, 25287, 25351, 29480, 31496, 27334, 18948, 18980, 16835, 16739, 18820, 16804, 20997, 21029, 22981, 39819, 41801, 29286, 27238, 33609, 56689, 56689, 56657, 56656, 56623, 56623, 56591, 56623, 56590, 52431, 52398, 56589, 56556, 54446, 50317, 50317, 48238, 48237, 46126, 44077, 44077, 44078, 42030, 41998, 41998, 37804, 23142, 14789, 16838, 10562, 20963, 50210, 43971, 37733, 21121, 16994, 16837, 16803, 20997, 20965, 20964, 12642, 16867, 18917, 16838, 14725, 14882, 17059, 10627, 8547, 12803, 14915, 16996, 19076, 21123, 19012, 19075, 23140, 29379, 31428, 23107, 18978, 23139, 41830, 43913, 39814, 25314, 35652, 39752, 48101, 50149, 43974, 35591, 41862, 37703, 31401, 37671, 35592, 37672, 25193, 27274, 45991, 31466, 46022, 35656, 45990, 35559, 29353, 37638, 48069, 33479, 54338, 56385, 54307, 54307, 35558, 43940, 48067, 35525, 41764, 29381, 29318, 21031, 35588, 50082, 37605, 50085, 48035, 52257, 23013, 20867, 18786, 20934, 18886, 14658, 14626, 12514, 10499, 14660, 18787, 33414, 41636, 27074, 22980, 25193, 23012, 23012, 22980, 23046, 25030, 25094, 29220, 39555, 29187, 20899, 27174, 31400, 29350, 31526, 29383, 27431, 25319, 21126, 23239, 21288, 19046, 18916, 21028, 18948, 25093, 16739, 14691, 16771, 23045, 27205, 37707, 25125, 25126, 31431, 37801, 54543, 54543, 54543, 52430, 52430, 52430, 50349, 52429, 50317, 50349, 52396, 52397, 50349, 48237, 48205, 48236, 46125, 46157, 46157, 46157, 46125, 46125, 46125, 48237, 50316, 50251, 43944, 25157, 16836, 10563, 12547, 33541, 39846, 19074, 19073, 12770, 12644, 25059, 25190, 25126, 23045, 10531, 6370, 8451, 14758, 12677, 10563, 14790, 8485, 12710, 14822, 25455, 23339, 14854, 16998, 14882, 12737, 16868, 31460, 29284, 23108, 21027, 10658, 39845, 41863, 37766, 23233, 29444, 43942, 50182, 41863, 33543, 23176, 41862, 35592, 29353, 37639, 45991, 43879, 31464, 37703, 31431, 33513, 25224, 43878, 33511, 31431, 21064, 31463, 29319, 39748, 54338, 60609, 47973, 56450, 31368, 50147, 48068, 33509, 37638, 33477, 23111, 18983, 48066, 43844, 35526, 52225, 39685, 54273, 20901, 18820, 20966, 16740, 18886, 14660, 14627, 10498, 10595, 14724, 18818, 35429, 35393, 23043, 23013, 20933, 18948, 20932, 23014, 23014, 16642, 20934, 23013, 33316, 31234, 16771, 23047, 25126, 25157, 25157, 25222, 25319, 21158, 21126, 16966, 14885, 16965, 16836, 18884, 18916, 18819, 14692, 16804, 18948, 25157, 31399, 31431, 23140, 23077, 31430, 54510, 54510, 52429, 52429, 54508, 54443, 50283, 48235, 50282, 52393, 50249, 48170, 44011, 41962, 39850, 41962, 41963, 41963, 41963, 44043, 44076, 48204, 52395, 52395, 56490, 54441, 50249, 46121, 33512, 21030, 8419, 16773, 33543, 37801, 16866, 12673, 14754, 12579, 25124, 20966, 18886, 25060, 18787, 6338, 12612, 16838, 10532, 10564, 14791, 8452, 16871, 19049, 19181, 19182, 17004, 25359, 19079, 14788, 16837, 23174, 23140, 18948, 10595, 4354, 14850, 21154, 33570, 27362, 25314, 35591, 48039, 29385, 43911, 27272, 29415, 25192, 25256, 43941, 35560, 37672, 25193, 25224, 27305, 23176, 21128, 43879, 29351, 21064, 18984, 41828, 48101, 45987, 52196, 56418, 45956, 50116, 37636, 56449, 45925, 50179, 31397, 37699, 33540, 25126, 50145, 35524, 33476, 52193, 39684, 52225, 18820, 18821, 18821, 14627, 16805, 12612, 10563, 8483, 12579, 16643, 22883, 37477, 33316, 25126, 20900, 18819, 14756, 16803, 18918, 20935, 16740, 18918, 18919, 27173, 33314, 16738, 16839, 21065, 20998, 25028, 22980, 23045, 18949, 16869, 12676, 12708, 14821, 14756, 16837, 14756, 12611, 16740, 16836, 23108, 18948, 20996, 21062, 18980, 27109, 33607, 41962, 52430, 54445, 58635, 56554, 56491, 50251, 52330, 54473, 52329, 43979, 41899, 39851, 39851, 39851, 37771, 37771, 35659, 35692, 35659, 35691, 41932, 48203, 39881, 39818, 37802, 39851, 37801, 29448, 23143, 14724, 12708, 16931, 23141, 14691, 6401, 10626, 6402, 16965, 12675, 16836, 12644, 14691, 14690, 14754, 12611, 6339, 14758, 6338, 4227, 4258, 16937, 17069, 17037, 19118, 23277, 25354, 14759, 14820, 12707, 8546, 8450, 10531, 10531, 10627, 19045, 31588, 25251, 21220, 39813, 39751, 37701, 35624, 23144, 21096, 21128, 23240, 41926, 35751, 35657, 23144, 27273, 33482, 23112, 25224, 39718, 25223, 21064, 31430, 43877, 48006, 52258, 56323, 58466, 45987, 45924, 41827, 50146, 39685, 54306, 48035, 41826, 48066, 27237, 48129, 37573, 48097, 62656, 50052, 58465, 16773, 14693, 14628, 12580, 12580, 10564, 8547, 8515, 8515, 16771, 23043, 35492, 27172, 22948, 18820, 16675, 12546, 12676, 14789, 14724, 14851, 12643, 21065, 23079, 31298, 18818, 10531, 14757, 21164, 23145, 22981, 18852, 16804, 12773, 14790, 12774, 12741, 14853, 16837, 12675, 10628, 12741, 10596, 10627, 10627, 12675, 16901, 21059, 23107, 18949, 39883, 52398, 58667, 60682, 54476, 56523, 56521, 58632, 56520, 50250, 44011, 43979, 41900, 41900, 41899, 37740, 39883, 39820, 39820, 35660, 35692, 37771, 39850, 37770, 35660, 35659, 35689, 23171, 12705, 16899, 25346, 21189, 16993, 18981, 12611, 10624, 14850, 8513, 12672, 12642, 16804, 16805, 8355, 10498, 16803, 14660, 16904, 16839, 8515, 8516, 10564, 18984, 19117, 14989, 19149, 21196, 23277, 4226, 8452, 4289, 4257, 4257, 4257, 4290, 6402, 10627, 16964, 14883, 17058, 21220, 23300, 23239, 25256, 23145, 23241, 27592, 27525, 27524, 29573, 27430, 23176, 31431, 39751, 25191, 29353, 31431, 31462, 29319, 35589, 31399, 52228, 54369, 56417, 58497, 56418, 56418, 54306, 56387, 54435, 60706, 58466, 50115, 43938, 37636, 58433, 52162, 54402, 62656, 58465, 60609, 12547, 10532, 8419, 10565, 8484, 8517, 6436, 6469, 8581, 14757, 27141, 35363, 22850, 20966, 18820, 14627, 12514, 10531, 10628, 10563, 10595, 10595, 14758, 20968, 29253, 25090, 10564, 8482, 12643, 16772, 18787, 18819, 14692, 14691, 12773, 10693, 10789, 10789, 14884, 12706, 10823, 8807, 12740, 17032, 14918, 8547, 14790, 19047, 29448, 41964, 39982, 50382, 62828, 56557, 58636, 56526, 60715, 64872, 60747, 56558, 54444, 48270, 46190, 48272, 46256, 46191, 44111, 44111, 44176, 41965, 42031, 39918, 39884, 41964, 39851, 31682, 19104, 12705, 6401, 12738, 18882, 16833, 16770, 10499, 10468, 6369, 25217, 12611, 10529, 6338, 12611, 18821, 10499, 12870, 23178, 21131, 14923, 10533, 12613, 8482, 8515, 14854, 25356, 12745, 10665, 12712, 12709, 12580, 12612, 10597, 8481, 6369, 8385, 4257, 4257, 6369, 8418, 8418, 10467, 10564, 16869, 21093, 29550, 23306, 25415, 19107, 19108, 19010, 19107, 25317, 31498, 35659, 46353, 33775, 37704, 39721, 33578, 42128, 44110, 41995, 58632, 52425, 50477, 52457, 58626, 60707, 56548, 60675, 62755, 58531, 58436, 56452, 54307, 56450, 54275, 56324, 56419, 58594, 56452, 56484, 12645, 8581, 6371, 6403, 4323, 4355, 4355, 4355, 6467, 16804, 27107, 33348, 25094, 21031, 16803, 14755, 12674, 12708, 12710, 8579, 8514, 10595, 14789, 21033, 23111, 31398, 21194, 12773, 12740, 14722, 14787, 16802, 14690, 12643, 10562, 8483, 10564, 14954, 14919, 19082, 12841, 15084, 17065, 15148, 17291, 19404, 21356, 17099, 27634, 21290, 27698, 23502, 33774, 40048, 50282, 33709, 50250, 42028, 56520, 52362, 46123, 44011, 41900, 43980, 43946, 37706, 39819, 37739, 37772, 37738, 39850, 37738, 33702, 29508, 35821, 27467, 21093, 21153, 21193, 27432, 19105, 25286, 21060, 21156, 23299, 23201, 23137, 16867, 18884, 16771, 23141, 27437, 21061, 16963, 21096, 19116, 17001, 16836, 14724, 16866, 21062, 19010, 23205, 19013, 21029, 18979, 25287, 18981, 18980, 14817, 16865, 16833, 27436, 19046, 14785, 14881, 14818, 16866, 18947, 21031, 19017, 17002, 21192, 19011, 19076, 14916, 14849, 16898, 19045, 27367, 31531, 29453, 25321, 25259, 25259, 25290, 33676, 33678, 27437, 29519, 40078, 42160, 40082, 40082, 33680, 45990, 48036, 50116, 54275, 54306, 48036, 43875, 37668, 37669, 45956, 43845, 50179, 56355, 48004, 50115, 13070, 8680, 4451, 2338, 226, 2274, 2307, 4389, 8549, 14693, 29221, 31301, 20965, 18917, 18981, 14917, 12835, 16965, 17067, 10728, 10725, 12837, 10723, 16904, 21095, 31529, 33872, 10953, 8643, 10691, 14820, 19112, 16931, 19144, 16964, 17065, 10825, 21359, 21393, 21393, 21392, 23472, 17068, 12842, 10792, 15017, 15118, 15053, 17199, 13034, 17264, 10888, 23337, 19277, 33674, 25454, 35722, 27468, 50281, 50281, 39850, 41930, 37802, 39882, 39849, 35656, 37770, 33642, 33642, 39913, 37800, 37895, 35780, 31585, 23207, 17000, 21064, 14857, 19179, 23267, 19110, 23204, 27302, 21161, 16870, 21064, 23044, 25155, 29381, 23141, 20997, 23175, 29315, 25187, 18914, 19014, 19017, 21029, 23075, 25189, 25222, 23202, 25251, 23173, 21031, 23178, 19048, 23109, 21124, 23206, 23145, 18982, 19014, 21093, 23143, 21123, 23173, 27399, 29544, 25287, 29449, 25254, 25221, 25189, 21125, 25222, 25316, 16995, 25223, 25386, 14858, 27402, 35691, 37803, 37806, 37936, 41998, 37739, 29550, 27470, 23240, 23206, 23143, 21031, 25257, 25391, 31595, 46018, 41860, 50211, 41827, 43938, 33572, 37730, 39810, 39748, 50208, 58465, 48035, 46017, 4516, 4452, 2371, 2307, 8648, 4487, 8714, 6665, 10662, 18853, 29221, 25094, 20968, 18953, 21164, 16902, 15019, 19378, 19280, 12876, 17231, 12871, 14950, 16903, 17031, 25382, 27335, 14887, 10855, 13001, 13034, 17130, 19212, 19183, 17066, 15151, 10791, 4715, 8943, 8910, 13135, 15216, 6827, 4682, 4712, 6922, 6989, 4811, 15248, 35851, 23568, 42093, 46188, 50348, 56521, 52329, 48202, 46089, 48168, 52360, 44009, 41897, 35753, 35753, 33673, 33673, 35721, 33673, 33673, 35786, 37867, 39914, 41993, 41991, 37898, 17225, 12899, 12930, 10888, 15111, 10882, 15045, 12932, 10950, 15076, 12962, 17025, 10787, 12900, 10851, 14982, 15082, 15012, 10883, 6758, 4744, 8873, 10821, 8739, 12932, 15047, 12964, 12930, 15012, 14948, 19145, 15048, 12899, 12932, 14981, 17031, 12869, 10822, 15014, 16998, 12963, 15013, 15013, 21287, 19143, 17096, 15015, 17060, 17061, 14982, 17061, 19140, 10852, 19174, 17128, 8681, 21193, 29418, 33643, 29549, 29548, 33644, 29450, 23308, 21260, 19147, 23207, 23176, 21029, 20997, 21129, 23209, 41895, 35688, 33608, 33606, 27337, 14889, 33572, 37732, 35588, 41826, 46018, 39778, 39780, 8676, 4582, 6566, 4454, 392, 489, 2439, 2501, 8677, 18981, 29285, 18950, 14790, 14856, 12940, 10792, 6796, 9040, 9007, 6764, 8973, 4679, 4677, 6662, 8807, 10951, 27530, 6824, 484, 484, 4581, 6792, 10756, 12935, 10757, 6630, 2503, 6893, 2731, 4746, 2536, 586, 2502, 2730, 2793, 2631, 6597, 8677, 27300, 25126, 37834, 50317, 48236, 48236, 48204, 48171, 46123, 46122, 48202, 46090, 46090, 48202, 44010, 44042, 39882, 41930, 41962, 37802, 37803, 35722, 35723, 33642, 33707, 35755, 37834, 33766, 21219, 6562, 226, 2435, 10690, 8610, 8610, 2339, 4419, 2338, 16962, 6500, 2371, 2307, 6500, 12871, 4484, 2630, 10921, 4812, 2601, 2405, 389, 2435, 2435, 2532, 12968, 2470, 4518, 4548, 6758, 4581, 6693, 2532, 2499, 4514, 15051, 4548, 2435, 2467, 6595, 6628, 6628, 4517, 8808, 4713, 11050, 8837, 8867, 4644, 4612, 8739, 10852, 21287, 21322, 23370, 17097, 15050, 15049, 19208, 29612, 25451, 15083, 15181, 29771, 31887, 25615, 23438, 29547, 33642, 29478, 56418, 33572, 31493, 23237, 31493, 8807, 33635, 37699, 35588, 41859, 45986, 45985, 37668, 484, 388, 387, 355, 453, 421, 423, 651, 6696, 14821, 25189, 12773, 10726, 8677, 6662, 4613, 2532, 486, 2600, 422, 388, 452, 388, 2503, 4583, 6630, 25486, 10757, 421, 291, 323, 4387, 6402, 10563, 8547, 4419, 2372, 421, 356, 323, 389, 422, 292, 292, 291, 2339, 6501, 6532, 14788, 8580, 25287, 50349, 50350, 50317, 50349, 50316, 50316, 50284, 50284, 50283, 46124, 44044, 50251, 52361, 46090, 41898, 39819, 37771, 33642, 31562, 31595, 31594, 31594, 29514, 29546, 29546, 29545, 19142, 8676, 8708, 14947, 8806, 6627, 6628, 323, 354, 4515, 290, 2370, 2371, 4452, 4484, 2307, 323, 6597, 4517, 4649, 2437, 324, 323, 389, 10824, 8940, 586, 618, 2633, 2535, 227, 323, 291, 258, 226, 258, 226, 290, 290, 4451, 2339, 4547, 10820, 10818, 25346, 27430, 27430, 27524, 8901, 10948, 8804, 8868, 19174, 10919, 21323, 31855, 27530, 33605, 33606, 37799, 33773, 23469, 29611, 31526, 35784, 46217, 43973, 46019, 39811, 31524, 43970, 31492, 31459, 27397, 23269, 8807, 25285, 41858, 33507, 48005, 45954, 46049, 37698, 683, 586, 389, 258, 259, 195, 194, 259, 6468, 16804, 23012, 12644, 10629, 6566, 6468, 2371, 259, 258, 292, 260, 194, 226, 260, 2407, 2373, 4387, 10563, 14723, 227, 260, 195, 227, 4355, 8451, 8548, 6500, 2469, 355, 324, 227, 227, 260, 2340, 2340, 2339, 12741, 6533, 8580, 16869, 27302, 50317, 48270, 48270, 46190, 46190, 46158, 48238, 46189, 46157, 48237, 48236, 48203, 46124, 48202, 50251, 46121, 44010, 37769, 35690, 33610, 31530, 29482, 31562, 27466, 27467, 27434, 25418, 25418, 17032, 10790, 2308, 2371, 14917, 16997, 4452, 259, 2434, 2371, 4516, 2436, 4516, 4451, 8579, 291, 323, 2372, 324, 4550, 227, 259, 227, 454, 619, 586, 618, 649, 4746, 291, 2372, 290, 258, 2306, 259, 291, 4515, 14980, 29443, 10883, 15044, 33603, 39779, 37732, 39779, 37763, 23301, 13127, 21349, 15141, 17221, 19173, 23271, 12936, 17096, 25350, 21225, 29447, 39814, 37700, 29412, 31492, 33572, 23269, 41891, 46017, 35651, 33572, 39842, 39779, 35651, 39811, 27364, 14950, 17029, 29413, 37698, 39746, 37699, 19109, 19140, 21189, 195, 196, 162, 195, 195, 195, 227, 227, 6436, 18851, 18852, 10563, 8483, 6404, 4420, 2243, 162, 162, 195, 260, 194, 291, 227, 2375, 195, 2274, 4355, 14658, 2439, 392, 228, 196, 2243, 4388, 8516, 8516, 4420, 292, 292, 259, 228, 227, 2340, 4387, 12740, 14790, 23143, 10661, 4452, 12741, 37770, 50350, 52430, 50350, 50350, 46189, 46157, 46157, 46157, 46157, 46124, 44044, 46124, 48171, 46123, 50250, 48170, 50217, 43977, 39817, 33609, 27434, 29514, 25386, 25386, 25386, 23305, 17063, 10759, 4485, 258, 291, 14917, 21222, 2403, 323, 323, 291, 8677, 6629, 4549, 14787, 2339, 291, 356, 2435, 291, 2437, 2372, 259, 4516, 488, 553, 553, 586, 650, 550, 452, 6660, 14948, 10754, 8644, 323, 323, 4515, 15010, 29442, 19075, 25314, 45988, 37699, 31492, 37730, 37730, 14982, 17062, 23301, 21317, 21317, 15046, 10918, 4679, 6760, 15015, 17095, 23270, 23269, 33572, 33604, 27333, 25253, 27363, 31492, 33604, 35651, 37666, 29413, 37730, 37698, 39714, 37698, 33539, 29443, 29380, 41857, 39777, 29380, 27363, 21156, 8805, 196, 131, 163, 131, 228, 228, 228, 227, 8516, 18883, 14723, 8548, 6403, 4355, 2275, 195, 130, 162, 292, 260, 227, 195, 262, 293, 228, 130, 2243, 10596, 8582, 228, 163, 195, 260, 292, 4420, 6500, 6468, 2308, 260, 259, 259, 195, 195, 260, 10694, 6436, 23241, 21031, 18983, 16869, 6500, 39917, 50382, 50350, 50350, 48269, 46189, 46157, 44077, 42029, 44076, 44076, 44043, 44043, 41963, 44010, 46090, 48169, 43976, 39816, 35688, 33609, 27497, 25417, 27465, 25385, 21257, 15016, 4549, 356, 259, 291, 17028, 25282, 2564, 451, 387, 324, 355, 485, 421, 2468, 291, 259, 291, 356, 356, 356, 2437, 324, 12804, 2598, 749, 683, 552, 584, 420, 419, 4547, 27363, 10788, 16994, 388, 6563, 21187, 27395, 23298, 12930, 25346, 39779, 33572, 23300, 39779, 41890, 17061, 23237, 23300, 8806, 10886, 21253, 4711, 583, 4742, 6790, 12966, 10918, 19141, 21191, 33571, 35619, 39778, 27364, 21220, 12933, 6695, 19141, 31491, 43906, 39746, 31491, 39777, 35650, 35681, 35649, 29410, 43969, 27363, 21187, 15013, 2630, 195, 196, 196, 196, 131, 195, 195, 2275, 8483, 20867, 10498, 8418, 6403, 2307, 260, 195, 195, 195, 195, 261, 2244, 130, 229, 196, 162, 130, 195, 4323, 10597, 227, 260, 325, 357, 357, 2405, 6630, 6565, 4387, 227, 227, 195, 163, 227, 227, 8613, 2308, 10662, 10629, 8549, 6533, 39949, 44173, 46223, 46190, 46190, 44110, 44110, 44207, 42062, 42029, 39949, 39916, 37868, 37836, 37835, 37835, 41962, 39849, 41961, 41896, 35688, 31593, 33672, 27464, 33608, 25384, 23271, 2501, 356, 389, 324, 2436, 29441, 21122, 4775, 483, 419, 356, 356, 453, 420, 420, 323, 323, 388, 421, 388, 387, 421, 356, 2500, 2565, 549, 548, 483, 580, 548, 2531, 8772, 17059, 14947, 6691, 387, 14948, 33603, 39811, 15075, 8835, 23331, 37730, 35683, 8870, 25380, 44001, 29475, 19173, 29507, 21252, 19173, 4742, 2663, 646, 10918, 17126, 17093, 2663, 8870, 29476, 31523, 35619, 35683, 27364, 33603, 29444, 21189, 19109, 37699, 45986, 39778, 35618, 39778, 37698, 33602, 29507, 25347, 25347, 12933, 6726, 519, 551, 131, 163, 196, 195, 163, 260, 227, 2275, 8450, 18819, 8451, 6370, 4356, 2210, 195, 228, 228, 227, 227, 195, 228, 164, 228, 195, 163, 162, 162, 228, 8549, 2340, 357, 325, 389, 325, 325, 2470, 6596, 4387, 259, 259, 195, 227, 195, 195, 4453, 6501, 2340, 260, 228, 2339, 42094, 46287, 46190, 44142, 44110, 42030, 39982, 39982, 37869, 37869, 35821, 35821, 35820, 33772, 33740, 33740, 31692, 33739, 35786, 35753, 33673, 33640, 35688, 31559, 27431, 25383, 21223, 2501, 389, 421, 387, 2437, 15011, 10851, 549, 451, 419, 356, 389, 517, 452, 452, 387, 549, 453, 421, 452, 451, 548, 517, 453, 516, 8933, 2724, 4772, 13092, 13061, 10916, 12963, 6691, 6691, 4611, 4643, 19171, 31587, 31588, 4772, 4739, 21284, 35682, 39843, 33636, 15109, 31587, 25380, 27460, 33634, 35714, 25379, 17125, 23332, 19204, 10981, 19206, 29507, 25380, 25380, 33603, 37698, 33603, 33603, 33571, 33603, 29444, 29444, 37667, 39778, 33571, 31523, 27364, 33570, 35682, 25316, 14981, 15013, 14981, 8805, 23268, 10885, 15012, 227, 195, 162, 163, 228, 293, 162, 2210, 10433, 14626, 6403, 4290, 2340, 227, 162, 195, 294, 163, 195, 227, 228, 195, 195, 227, 194, 195, 260, 260, 2372, 6500, 259, 293, 292, 292, 389, 4549, 6598, 6435, 2307, 259, 2372, 4453, 227, 2339, 4420, 6533, 6533, 8581, 4452, 27433, 46255, 46254, 44109, 42061, 39981, 39949, 40014, 37901, 35821, 33772, 35885, 33772, 31724, 31724, 29644, 27596, 27596, 29677, 27595, 23467, 23435, 23466, 27562, 33672, 33671, 27463, 10919, 485, 421, 485, 420, 388, 15143, 4741, 2661, 451, 420, 388, 2532, 485, 517, 517, 452, 550, 485, 452, 452, 419, 484, 420, 485, 484, 6853, 13158, 17319, 11110, 4676, 547, 516, 10915, 2594, 8834, 21347, 33731, 33699, 33699, 2724, 2660, 8966, 25444, 15109, 13061, 25412, 17189, 23396, 27492, 33699, 27460, 35715, 19269, 25412, 21317, 17189, 27460, 19237, 13029, 27460, 27460, 35715, 33604, 29507, 31555, 31523, 31523, 33602, 33635, 33602, 33603, 29443, 31555, 25348, 31523, 25316, 31491, 27396, 27395, 29443, 31490, 37698, 29442, 228, 227, 162, 98, 162, 227, 195, 2242, 12546, 10499, 4323, 2243, 260, 260, 227, 227, 195, 194, 260, 259, 2339, 4516, 6564, 14950, 4419, 227, 260, 260, 292, 8612, 260, 292, 260, 260, 4517, 21256, 4388, 6436, 2307, 259, 6565, 195, 227, 2339, 12806, 12741, 10725, 4452, 19079, 39981, 44109, 42061, 39981, 39949, 37901, 39982, 37934, 35853, 33804, 31724, 31756, 29676, 27596, 25516, 25548, 23468, 21420, 21420, 23500, 21420, 17259, 15211, 15212, 15243, 21418, 27530, 17062, 484, 388, 452, 2629, 548, 645, 581, 613, 484, 420, 420, 4708, 548, 549, 581, 485, 582, 517, 485, 517, 516, 516, 485, 516, 2726, 2790, 678, 9031, 11144, 2628, 6788, 8998, 6952, 4709, 17221, 33795, 29669, 33764, 31684, 17284, 4836, 27587, 29667, 19333, 21380, 23428, 21349, 25508, 27555, 25508, 25477, 33731, 29571, 27491, 25444, 13029, 17190, 10982, 19237, 29539, 25380, 33635, 21252, 27460, 29476, 29443, 25348, 33571, 25316, 27395, 35651, 31524, 29475, 31555, 31523, 33570, 23236, 35618, 31491, 27363, 31490, 31522, 35618, 227, 227, 227, 195, 195, 162, 130, 4291, 12611, 6371, 4323, 227, 228, 260, 227, 226, 195, 260, 323, 291, 14950, 27367, 12742, 35786, 2405, 10789, 260, 227, 260, 10725, 2340, 260, 260, 260, 10725, 8645, 2307, 2307, 2339, 4517, 8710, 259, 195, 259, 4484, 8580, 4452, 6565, 16999, 42061, 42061, 39981, 37900, 37900, 35853, 40079, 37998, 33772, 31724, 29676, 29676, 27628, 25548, 23468, 21388, 19339, 17291, 17291, 17292, 15243, 13163, 11115, 9100, 7019, 2923, 7051, 15178, 485, 453, 582, 613, 516, 709, 644, 613, 548, 484, 453, 517, 580, 613, 614, 485, 550, 615, 485, 517, 516, 580, 516, 549, 2823, 9097, 2822, 2888, 2856, 9031, 6918, 2692, 4902, 777, 745, 4905, 27621, 25541, 17287, 13158, 13125, 21414, 21413, 11110, 4872, 4871, 21382, 17221, 11078, 8934, 25476, 21381, 27524, 27524, 31620, 31619, 27492, 25412, 21252, 15077, 21252, 27396, 25379, 23332, 27458, 21253, 21188, 29411, 33602, 29442, 29475, 27395, 25316, 25316, 29475, 19140, 27362, 29444, 29475, 25283, 29410, 23235, 29442, 194, 162, 130, 162, 195, 227, 227, 4355, 12611, 4322, 2275, 227, 227, 227, 6500, 27499, 14918, 12870, 23305, 323, 12805, 19046, 2340, 8709, 6565, 29578, 2307, 227, 227, 4452, 4388, 195, 195, 2307, 25384, 19078, 2307, 227, 195, 6565, 4485, 227, 227, 259, 4517, 12773, 21029, 10692, 8677, 37932, 39980, 37932, 37932, 35852, 38062, 38062, 33901, 29708, 27628, 27628, 27661, 25580, 23500, 19371, 17324, 17291, 15243, 13195, 15308, 15309, 9099, 4971, 5004, 2987, 3020, 5069, 2792, 548, 517, 777, 646, 549, 774, 709, 742, 644, 2693, 581, 677, 582, 646, 646, 549, 647, 680, 582, 549, 548, 581, 580, 614, 809, 842, 841, 842, 874, 776, 645, 4805, 15302, 2888, 810, 9095, 21414, 21413, 17317, 21413, 6982, 11110, 11078, 4903, 4903, 11047, 23429, 11014, 17221, 15110, 10983, 27492, 25444, 29540, 17157, 23365, 27460, 31587, 27459, 23364, 23299, 21252, 15044, 21220, 23268, 23267, 29475, 23267, 23235, 23268, 27395, 21187, 31522, 17092, 25314, 25283, 17027, 27299, 31458, 27331, 25251, 27330, 21155, 194, 194, 162, 194, 194, 194, 162, 4322, 10530, 2274, 195, 227, 2340, 4453, 25385, 29545, 17032, 2340, 6532, 4420, 195, 259, 195, 14886, 19111, 29642, 2339, 227, 227, 6533, 8581, 227, 227, 227, 4451, 4452, 227, 259, 8645, 10789, 356, 292, 2371, 6629, 4516, 8644, 4484, 10789, 27529, 40011, 37931, 37996, 35948, 36014, 31820, 31788, 27659, 27627, 25579, 23564, 23532, 25645, 23564, 19403, 15275, 13195, 13227, 11147, 7051, 5003, 939, 907, 907, 907, 907, 939, 939, 776, 646, 907, 2790, 677, 773, 774, 807, 645, 516, 549, 646, 646, 647, 678, 646, 711, 615, 582, 581, 580, 581, 613, 646, 810, 810, 810, 810, 810, 744, 614, 712, 810, 809, 808, 4968, 11143, 21446, 21446, 19366, 13158, 11078, 15206, 15173, 11046, 13094, 23396, 19269, 21284, 19237, 8902, 37764, 33636, 19236, 29507, 23300, 23299, 17124, 25379, 25315, 31553, 27426, 27395, 23267, 25346, 12900, 25314, 21186, 27362, 23203, 19075, 23235, 21155, 27362, 19075, 25314, 25282, 16995, 29378, 19012, 29377, 25217, 27297, 162, 194, 227, 227, 194, 194, 162, 6370, 6370, 2242, 195, 259, 12870, 6597, 19144, 8645, 6532, 195, 194, 162, 6533, 227, 163, 4452, 23337, 52691, 4452, 227, 8612, 21290, 17064, 2340, 227, 195, 4484, 4451, 259, 292, 2371, 6628, 2404, 4581, 10757, 31722, 4548, 14852, 14852, 25416, 37995, 35915, 35883, 35947, 33900, 29739, 29772, 27691, 25611, 25644, 23564, 21484, 19436, 19436, 17356, 15308, 11179, 9131, 5003, 5003, 2987, 906, 1004, 3052, 1004, 972, 939, 939, 1003, 744, 711, 874, 5000, 2920, 806, 742, 872, 807, 643, 710, 646, 679, 679, 776, 873, 776, 614, 550, 581, 613, 646, 711, 777, 810, 810, 778, 778, 810, 712, 614, 581, 745, 777, 809, 4936, 9064, 13159, 6984, 13158, 23429, 19302, 17189, 17158, 17125, 23364, 23364, 23364, 21252, 23300, 15013, 27365, 37699, 23268, 31523, 19172, 25348, 21187, 23267, 21187, 23235, 27394, 25314, 25314, 25250, 14979, 19043, 21155, 19075, 10788, 25250, 21122, 21122, 21122, 23138, 21090, 23170, 18979, 27266, 23107, 21059, 25218, 23138, 226, 226, 227, 194, 226, 162, 194, 6338, 4257, 195, 2307, 17031, 8645, 4485, 2307, 162, 194, 194, 194, 162, 195, 194, 162, 10822, 23402, 10791, 2404, 227, 2275, 21290, 12903, 4387, 227, 227, 27464, 8644, 6565, 4549, 2404, 10854, 10790, 15014, 35818, 44171, 17094, 8643, 10788, 35947, 35947, 33899, 31851, 29771, 29771, 29804, 34063, 29869, 29870, 25677, 29935, 23662, 19533, 19533, 15307, 11211, 9131, 5034, 939, 971, 938, 906, 1003, 3051, 1003, 1068, 1004, 1036, 1036, 775, 2791, 906, 971, 1035, 904, 806, 937, 806, 2724, 773, 711, 679, 647, 873, 3083, 938, 646, 613, 742, 709, 645, 777, 810, 810, 809, 809, 777, 777, 712, 549, 614, 7116, 5101, 2955, 841, 809, 777, 809, 810, 2890, 11047, 21317, 21252, 8869, 19172, 19204, 23332, 21219, 23202, 21155, 17028, 25314, 12900, 17027, 8804, 25283, 25283, 16996, 33572, 31460, 27330, 21123, 23201, 25281, 25281, 16963, 14916, 14947, 23139, 23138, 21059, 12868, 23170, 23138, 21058, 27265, 23106, 25153, 25186, 14851, 27265, 23106, 8710, 2404, 227, 2340, 4484, 162, 2242, 6370, 2210, 227, 259, 6533, 6597, 259, 194, 226, 227, 194, 162, 194, 194, 194, 227, 6661, 4485, 4581, 8710, 195, 2308, 10855, 15081, 2404, 227, 259, 12869, 29577, 12838, 4484, 4484, 19142, 17030, 44203, 42155, 42155, 21286, 21254, 33866, 33931, 36011, 33931, 31883, 27723, 29835, 36176, 38256, 36176, 34129, 32015, 34161, 30000, 21646, 27920, 25839, 17484, 11275, 7147, 7180, 9293, 7244, 1003, 970, 1003, 5230, 9423, 11503, 3246, 1166, 904, 905, 1003, 971, 938, 906, 872, 937, 742, 707, 2788, 906, 776, 646, 809, 906, 939, 2857, 8968, 775, 677, 775, 809, 810, 777, 777, 777, 745, 745, 679, 581, 7051, 940, 907, 876, 843, 875, 907, 2923, 7116, 7085, 5004, 9067, 17224, 17126, 15013, 15013, 14980, 21219, 25314, 23266, 19107, 23234, 17027, 19074, 12868, 14946, 27234, 23172, 33507, 27267, 35556, 16964, 27265, 19043, 19074, 23170, 14851, 14852, 27235, 21027, 14852, 27203, 27203, 21090, 29313, 21059, 27233, 25154, 23106, 25186, 27265, 25185, 4484, 8677, 194, 227, 194, 194, 2242, 4322, 162, 194, 2339, 259, 291, 227, 259, 6597, 226, 194, 227, 259, 259, 291, 259, 8775, 6662, 4484, 10791, 194, 194, 291, 2469, 10856, 2372, 2403, 17062, 21256, 10790, 12966, 6531, 33770, 54639, 50510, 46381, 46413, 40172, 42252, 42317, 42285, 44431, 38124, 40269, 31883, 31981, 36208, 38289, 36273, 36241, 32047, 34161, 32080, 23791, 23823, 23791, 25871, 23790, 11340, 9324, 13486, 13486, 9292, 7212, 1101, 3214, 9455, 5295, 3246, 1198, 5229, 1067, 1069, 1101, 1068, 939, 906, 874, 807, 2756, 708, 841, 873, 841, 810, 842, 906, 874, 3116, 808, 2822, 841, 842, 874, 777, 745, 745, 745, 778, 843, 613, 2792, 875, 876, 811, 778, 811, 843, 811, 2891, 6987, 2826, 2827, 2859, 6922, 13065, 15046, 14948, 10820, 19075, 23234, 23234, 23234, 19074, 16994, 12836, 14851, 21058, 21027, 21091, 25218, 29314, 12803, 23108, 27267, 23074, 23106, 23137, 18979, 18978, 21026, 14820, 27170, 18915, 18979, 25154, 16931, 25186, 23106, 16899, 25217, 25154, 21026, 194, 194, 227, 260, 226, 227, 2274, 2275, 259, 227, 226, 292, 2468, 227, 291, 259, 227, 227, 227, 291, 291, 388, 291, 2404, 4582, 8839, 4516, 2372, 291, 4549, 11016, 2404, 259, 10887, 52886, 35982, 19143, 21287, 21255, 25383, 46220, 48495, 46446, 42318, 42285, 44397, 40270, 38222, 36142, 36109, 38222, 31980, 36175, 32047, 34160, 32080, 30000, 25838, 27951, 27951, 23791, 21743, 19630, 21710, 23790, 19662, 15566, 13454, 13454, 11406, 15502, 3181, 3214, 1166, 1166, 1133, 1134, 9129, 3051, 1101, 1069, 1069, 1036, 1101, 1036, 2920, 4803, 677, 809, 809, 777, 777, 939, 841, 1004, 939, 939, 7113, 971, 939, 972, 842, 842, 874, 908, 843, 811, 712, 874, 843, 843, 778, 811, 811, 778, 746, 746, 6922, 6922, 4842, 2762, 8938, 6858, 4810, 10952, 14949, 14884, 19043, 19043, 19042, 19042, 21090, 19010, 16963, 18947, 18946, 16899, 12771, 20994, 14819, 20996, 23076, 35491, 23074, 21027, 23105, 23074, 16867, 18946, 23042, 16866, 8580, 20994, 16835, 16835, 16867, 23074, 20961, 20994, 14787, 2404, 323, 259, 291, 291, 259, 2307, 227, 259, 259, 259, 356, 355, 323, 291, 259, 259, 259, 292, 10952, 6726, 6790, 2437, 291, 2533, 4646, 10952, 2436, 259, 453, 324, 356, 323, 21483, 57048, 52919, 36015, 33900, 12902, 25448, 48333, 48430, 40237, 40237, 38157, 38189, 36109, 34061, 31981, 31981, 29901, 34094, 34062, 29998, 32048, 30032, 27951, 25871, 23790, 25871, 21710, 19630, 17582, 17582, 19629, 17582, 13421, 11341, 11373, 11406, 11406, 7245, 1133, 1133, 1133, 1068, 1069, 3051, 3052, 1069, 1069, 1004, 1004, 1069, 1036, 1069, 6852, 711, 777, 744, 744, 906, 1005, 1036, 940, 972, 907, 2922, 810, 809, 842, 842, 6986, 9100, 6987, 4939, 843, 811, 810, 778, 810, 778, 746, 746, 681, 714, 4842, 6858, 10986, 8841, 8874, 8874, 4777, 8906, 8938, 13001, 12903, 14948, 16963, 14883, 16931, 16963, 16963, 16930, 19010, 18978, 16898, 10660, 10660, 14819, 12739, 14788, 37572, 37573, 16834, 16834, 18915, 18914, 18882, 20962, 20994, 6500, 14755, 18882, 14787, 14787, 18913, 21026, 20993, 16866, 291, 259, 291, 324, 291, 259, 2339, 259, 259, 259, 259, 323, 2436, 356, 356, 291, 324, 291, 291, 323, 356, 15242, 2469, 291, 486, 4581, 323, 259, 227, 259, 582, 2663, 8839, 29935, 57081, 50742, 44532, 34032, 27725, 17127, 44172, 46284, 38157, 36076, 33996, 34028, 31981, 31948, 29868, 27820, 27788, 29901, 31981, 29966, 29967, 27919, 27887, 25838, 25806, 25838, 21710, 21710, 17550, 17517, 17517, 15437, 13421, 7245, 7213, 7277, 5164, 9228, 1036, 1036, 1036, 1004, 1004, 972, 972, 972, 1037, 971, 1004, 1005, 1004, 3052, 8966, 907, 810, 777, 810, 972, 1004, 940, 973, 907, 875, 908, 843, 810, 842, 4939, 15244, 13163, 11084, 6890, 4778, 2827, 747, 746, 4907, 648, 616, 682, 681, 2794, 6890, 6890, 10986, 6858, 4810, 6793, 6761, 6793, 8873, 10889, 10890, 6729, 12904, 16999, 14852, 12803, 14851, 12803, 14883, 16931, 16931, 16898, 14818, 14851, 14787, 12707, 14755, 12707, 12707, 12707, 10627, 16803, 18882, 18882, 20962, 16834, 12643, 16835, 12707, 12707, 14787, 14786, 20961, 18945, 259, 259, 291, 291, 291, 291, 2371, 291, 291, 259, 356, 2564, 2501, 356, 356, 291, 4549, 8775, 2436, 4613, 6726, 6823, 6662, 291, 388, 291, 324, 259, 259, 2404, 2372, 324, 4614, 42419, 61307, 59193, 44532, 34129, 31984, 44501, 61144, 46219, 38059, 33964, 33963, 31915, 31883, 31916, 29836, 27755, 29836, 29868, 27756, 25708, 25709, 23693, 23661, 23596, 25740, 21645, 21678, 21645, 23692, 19565, 15404, 15404, 15437, 5164, 5067, 9261, 7116, 9196, 5099, 971, 971, 971, 939, 907, 907, 972, 972, 939, 972, 940, 939, 1004, 2987, 940, 843, 875, 875, 940, 940, 908, 940, 940, 973, 972, 940, 876, 779, 4874, 9035, 9035, 11148, 13196, 11083, 4842, 682, 747, 779, 11084, 13099, 6825, 6793, 2600, 6826, 13002, 13034, 6826, 2665, 4681, 8809, 6761, 10921, 10856, 8776, 8777, 10857, 10889, 8808, 14983, 17030, 10854, 12902, 12838, 12836, 14852, 12771, 12771, 14818, 16834, 14755, 12675, 10595, 10595, 10595, 12643, 14722, 20962, 18881, 16834, 16803, 14722, 20962, 8547, 6467, 12707, 12707, 14755, 323, 291, 291, 324, 324, 291, 291, 291, 291, 355, 2563, 323, 2501, 356, 291, 291, 2404, 6694, 4549, 10984, 25741, 11049, 6629, 227, 291, 356, 291, 226, 227, 4517, 2436, 13032, 29838, 59226, 61307, 59193, 40338, 29871, 13001, 32017, 61307, 46383, 35947, 31818, 33899, 31819, 29771, 29803, 27723, 25643, 27788, 27756, 25675, 25676, 21548, 21548, 23628, 23563, 23563, 17387, 19435, 23628, 23595, 15372, 15372, 13292, 11276, 3051, 5035, 7083, 3019, 5067, 7148, 939, 939, 939, 907, 810, 908, 875, 907, 940, 908, 875, 907, 972, 972, 940, 875, 876, 875, 940, 908, 908, 940, 940, 908, 876, 876, 877, 843, 842, 2891, 6987, 11083, 15212, 15147, 6859, 2699, 780, 748, 9101, 19308, 21323, 12937, 6761, 6793, 10921, 12937, 2633, 585, 2665, 4810, 8906, 10922, 15082, 10921, 10922, 12970, 12905, 10856, 17065, 17064, 15017, 17097, 10921, 15017, 19144, 14984, 6728, 12903, 16933, 16867, 16866, 16834, 14754, 10595, 12675, 14755, 14722, 8547, 18882, 18882, 18882, 16835, 14722, 8547, 12675, 8548, 10627, 324, 291, 291, 291, 324, 2501, 323, 324, 2435, 4578, 291, 292, 292, 259, 259, 355, 6694, 2404, 389, 2565, 6694, 15145, 2404, 226, 227, 226, 226, 226, 194, 2372, 2469, 15146, 42451, 61275, 61307, 57080, 44500, 13000, 46580, 40307, 61275, 61307, 54935, 40109, 35882, 29707, 27659, 27690, 27723, 25611, 27756, 25643, 23562, 25644, 21516, 21484, 21483, 21516, 19435, 17355, 17322, 17387, 15307, 15339, 13259, 11211, 11211, 5068, 7115, 7083, 907, 2987, 3019, 940, 940, 875, 843, 810, 940, 842, 875, 875, 875, 874, 907, 972, 908, 811, 746, 779, 2956, 874, 875, 907, 875, 843, 843, 875, 876, 811, 747, 2858, 4939, 11115, 11083, 13099, 11019, 2698, 6923, 779, 2859, 8873, 13067, 15051, 17098, 10889, 25321, 21160, 19112, 4648, 2665, 2697, 4713, 8841, 10825, 14985, 12970, 15050, 23338, 21226, 25353, 25321, 25321, 12905, 10857, 10889, 14985, 23209, 19113, 8809, 12937, 17000, 37706, 25289, 33543, 16933, 18980, 20963, 14723, 12675, 12675, 16803, 16834, 18882, 14786, 16867, 14819, 14818, 8579, 10660, 291, 324, 324, 324, 323, 291, 291, 2403, 6626, 259, 291, 259, 356, 291, 259, 292, 259, 227, 291, 2469, 2436, 23531, 10854, 258, 259, 291, 2436, 2307, 194, 227, 4549, 50773, 61274, 61274, 61274, 61274, 54967, 23435, 52920, 40307, 61275, 59227, 59227, 59195, 40208, 27626, 27627, 48693, 57179, 44565, 53017, 29805, 23498, 21483, 19403, 17290, 19435, 21451, 19403, 15274, 15242, 17355, 15307, 13227, 11147, 11114, 7051, 5003, 13422, 19697, 5035, 906, 907, 842, 875, 843, 778, 2827, 778, 778, 811, 5233, 9492, 11507, 4972, 811, 876, 779, 2827, 21419, 29675, 35819, 21451, 25418, 4971, 908, 908, 940, 844, 2858, 2891, 6954, 13098, 11050, 13098, 11051, 2698, 6826, 6858, 6858, 8808, 10792, 12840, 17067, 19146, 17098, 23274, 45994, 35625, 12873, 10824, 10825, 10857, 6728, 10857, 12905, 12904, 23176, 41802, 23240, 50186, 45961, 50057, 25225, 12872, 14953, 12905, 19081, 19081, 14952, 10856, 14952, 45962, 37673, 54249, 17000, 27304, 43849, 29352, 16934, 14789, 16771, 16738, 16738, 14689, 16770, 14722, 12707, 8578, 12770, 291, 291, 291, 291, 291, 259, 323, 2466, 259, 259, 356, 259, 259, 226, 259, 258, 4517, 259, 4517, 38192, 36047, 25677, 6661, 2468, 226, 356, 19404, 2501, 194, 226, 2501, 36145, 57114, 59194, 59194, 59194, 55000, 40241, 57113, 55033, 59194, 59194, 57146, 57146, 55033, 48694, 52953, 55066, 55067, 55066, 55066, 50872, 40339, 38291, 31984, 44598, 35983, 19273, 19338, 17258, 19370, 17323, 17356, 13227, 9163, 11179, 11180, 25939, 36440, 34360, 30231, 23989, 13488, 6986, 778, 2891, 843, 811, 2892, 3055, 5363, 3349, 3349, 3349, 3218, 1234, 1137, 2957, 942, 7379, 19568, 48302, 23467, 13098, 21322, 779, 843, 2860, 2794, 13099, 11019, 10922, 15050, 13034, 12970, 8842, 8875, 6891, 6826, 6761, 8744, 12970, 17131, 19243, 19178, 12937, 23306, 29387, 50284, 54348, 14985, 14920, 10792, 6697, 8809, 12937, 14985, 14984, 23209, 31432, 58475, 45929, 50154, 14953, 12873, 17033, 14920, 14920, 12808, 12808, 14920, 17000, 33513, 58441, 58441, 35593, 37641, 43913, 35627, 19277, 19245, 17066, 27567, 27827, 23405, 25451, 21061, 14754, 14754, 10688, 259, 259, 259, 291, 259, 291, 2532, 259, 290, 259, 2436, 227, 226, 195, 4452, 10985, 2403, 259, 8742, 42386, 52887, 23564, 4516, 4582, 194, 4581, 17194, 194, 6662, 8807, 15081, 44435, 57113, 59193, 59194, 59194, 57114, 59162, 57114, 57114, 57114, 57114, 57114, 57081, 55034, 55033, 55033, 55034, 52986, 52985, 52953, 50905, 50905, 50873, 50905, 48825, 48824, 40437, 36308, 25710, 25677, 17323, 17389, 25906, 27987, 25972, 32279, 32311, 30231, 30231, 28151, 26038, 23958, 15472, 13490, 17749, 11572, 5265, 7444, 3348, 1268, 1268, 1236, 1236, 1236, 1236, 1203, 1203, 1171, 1172, 1108, 11281, 21388, 21291, 6857, 2794, 778, 779, 6858, 13065, 19209, 19210, 27434, 19177, 6825, 6794, 6793, 6826, 6826, 6729, 12970, 10890, 15051, 17163, 17131, 12905, 19113, 23273, 35657, 64877, 33708, 12970, 8777, 8777, 10825, 12840, 14953, 17065, 23176, 37609, 39689, 48042, 10858, 13069, 15052, 14922, 17002, 12872, 12808, 12776, 14855, 16903, 23111, 58344, 25518, 15377, 25813, 30006, 28088, 26073, 28121, 28121, 30202, 30201, 32249, 30202, 30202, 23796, 10985, 21289, 226, 226, 226, 259, 258, 2467, 2371, 4677, 2532, 388, 387, 322, 194, 4484, 10855, 227, 291, 6629, 36080, 38257, 25613, 10985, 4549, 323, 2372, 2469, 2307, 2339, 6630, 6629, 33935, 57081, 59161, 57113, 57113, 57113, 57081, 57081, 57081, 55033, 55033, 55033, 55033, 52953, 52953, 52953, 52953, 50905, 50873, 50873, 48825, 48825, 48792, 48793, 46745, 46744, 44664, 42616, 40536, 40536, 38488, 36375, 36375, 34327, 34327, 32279, 30199, 28150, 26070, 24022, 21910, 19829, 17749, 15700, 13620, 9460, 5364, 3284, 1171, 1203, 1171, 1203, 1203, 1171, 1106, 1106, 1107, 1075, 1074, 1042, 1074, 1042, 3025, 11248, 23371, 4778, 4778, 2697, 8905, 23274, 45996, 12937, 29481, 15018, 2730, 4778, 2697, 6762, 2633, 8777, 10825, 10889, 15049, 15017, 12904, 12904, 14952, 19178, 25321, 58538, 19210, 8841, 8777, 10825, 10825, 12840, 12840, 16968, 43947, 39755, 14953, 17001, 8746, 8745, 8712, 10761, 12874, 8746, 10729, 35560, 23047, 15020, 17588, 19734, 11608, 13656, 15704, 19800, 19832, 21881, 21913, 23993, 26041, 23993, 21846, 23927, 26008, 21814, 13425, 13295, 226, 226, 226, 226, 2532, 612, 516, 321, 2401, 2433, 353, 2467, 290, 323, 291, 290, 6791, 4646, 6597, 2372, 2436, 15177, 6662, 2436, 2468, 2469, 19242, 29710, 162, 6598, 29807, 55032, 57081, 57081, 57081, 55033, 55033, 55001, 55001, 55001, 52953, 52920, 52920, 50872, 50873, 50872, 48824, 48792, 48792, 46744, 46744, 46744, 46712, 44664, 42584, 42584, 40535, 38455, 36407, 36343, 34327, 32279, 32247, 30199, 28118, 26070, 23989, 21909, 21909, 17813, 13652, 13620, 9492, 7444, 3283, 1235, 1203, 1139, 1074, 1074, 1074, 1106, 1074, 1042, 1010, 1010, 945, 945, 945, 978, 1010, 1010, 945, 1010, 19407, 13035, 4876, 2960, 9038, 50156, 48107, 10921, 10922, 4777, 2665, 4746, 4681, 6761, 8809, 10825, 12937, 12905, 17065, 12872, 14919, 14952, 14920, 19112, 25288, 52299, 10857, 8777, 12905, 14985, 10824, 12808, 17033, 14953, 25289, 19016, 6599, 10858, 10826, 10794, 10761, 17035, 10793, 6666, 4846, 2929, 11250, 3254, 3287, 3319, 3287, 3319, 5400, 9528, 11576, 15704, 15704, 15704, 17752, 19832, 19800, 15572, 13361, 13295, 15508, 13426, 226, 226, 227, 2467, 2564, 323, 259, 226, 194, 226, 2306, 6561, 4514, 2434, 2435, 323, 4613, 2403, 2403, 31854, 8646, 19210, 4420, 2436, 8743, 2307, 14952, 4452, 4388, 19275, 25516, 55000, 57080, 55032, 55000, 55000, 55000, 52920, 52920, 52920, 50872, 50840, 48792, 48792, 48792, 46744, 46712, 46712, 44663, 44631, 44631, 44631, 42583, 40503, 40503, 38423, 36375, 34327, 34359, 34327, 32279, 30230, 28150, 26070, 26037, 21909, 19829, 17748, 15604, 11540, 11508, 7444, 3283, 3251, 1203, 1138, 1106, 1041, 1041, 1009, 1009, 1009, 1009, 977, 977, 977, 1041, 977, 945, 913, 880, 912, 881, 912, 880, 848, 880, 912, 913, 11118, 48139, 6825, 4745, 2666, 4713, 4844, 10987, 23274, 10889, 10857, 10857, 15018, 21161, 46026, 31432, 21096, 12839, 12904, 12872, 12872, 12905, 14888, 21129, 27370, 8648, 10728, 17001, 10761, 4552, 4487, 6535, 10729, 10794, 10761, 12873, 14890, 12776, 4748, 1141, 1142, 1141, 1207, 1206, 1207, 3319, 1239, 1271, 3319, 5367, 7415, 9528, 13624, 11576, 13624, 13624, 13656, 13493, 11379, 11214, 11411, 227, 291, 9000, 6887, 2402, 354, 291, 323, 322, 322, 322, 290, 2339, 259, 226, 4484, 10789, 19306, 33999, 15145, 31951, 40305, 10855, 4453, 2372, 195, 36048, 29710, 8678, 19177, 50839, 55000, 55000, 55000, 52920, 52920, 52888, 50840, 50839, 48791, 48759, 46711, 46711, 46679, 46711, 44631, 42551, 42551, 42519, 42519, 40471, 40470, 38422, 38390, 36342, 34262, 34262, 32246, 30198, 28118, 28085, 26037, 23924, 19796, 17748, 17684, 15636, 13555, 9427, 7347, 1170, 1106, 3155, 1042, 1009, 1041, 1041, 977, 977, 945, 945, 944, 944, 912, 944, 1009, 977, 977, 1009, 944, 912, 912, 880, 847, 783, 847, 783, 783, 815, 880, 15182, 8939, 2796, 4845, 4877, 880, 2928, 13166, 23404, 19113, 14985, 17000, 31529, 45994, 50090, 48042, 10792, 6664, 10760, 8712, 14920, 25257, 21097, 14921, 8648, 6632, 8745, 10825, 10793, 10793, 12841, 10761, 10793, 10825, 10728, 8713, 9137, 3027, 1077, 1076, 1077, 1109, 1109, 1174, 1174, 1239, 1239, 1271, 1271, 1239, 1239, 1239, 3319, 5335, 5270, 5367, 7447, 2895, 4877, 9266, 2501, 2630, 4710, 226, 195, 258, 2370, 258, 226, 194, 226, 194, 226, 193, 4516, 8775, 23532, 19274, 27661, 23468, 10856, 19275, 6533, 195, 162, 4420, 48693, 38161, 14984, 14952, 38194, 55000, 55000, 52919, 52887, 50839, 50807, 50807, 48727, 46679, 46679, 46679, 44599, 44598, 42550, 42550, 40470, 40438, 40438, 38358, 38358, 36342, 34229, 34229, 32181, 32149, 30101, 28053, 26005, 23828, 21748, 21812, 19732, 15571, 13555, 13491, 7379, 7346, 5234, 3122, 1074, 1042, 945, 912, 945, 977, 944, 977, 912, 944, 976, 976, 912, 976, 880, 944, 1041, 912, 912, 847, 879, 847, 847, 880, 879, 815, 815, 783, 815, 783, 751, 783, 719, 816, 847, 751, 783, 816, 9039, 33774, 44011, 27305, 43913, 29352, 48074, 48074, 8680, 8647, 12807, 8712, 13070, 19279, 8975, 783, 2701, 6796, 10761, 12808, 10793, 12841, 12809, 10761, 10761, 8745, 4716, 947, 979, 980, 1012, 1012, 1012, 1012, 1044, 1109, 1077, 1141, 1174, 1174, 1238, 1206, 1174, 1206, 1206, 1174, 1206, 1206, 1108, 1011, 619, 2731, 291, 4677, 258, 2401, 2433, 2369, 226, 258, 194, 162, 162, 225, 161, 8807, 19306, 10855, 27726, 15049, 8742, 46645, 40210, 6598, 2437, 292, 2405, 29807, 57048, 55000, 29644, 19210, 44532, 52919, 52887, 50839, 50839, 48726, 48726, 46678, 46646, 44598, 44566, 42518, 42518, 40438, 40438, 38358, 38358, 36277, 36245, 34229, 34197, 34229, 32181, 30101, 28020, 27988, 25908, 23860, 21779, 19732, 19699, 17619, 13491, 13458, 9362, 7282, 3250, 1106, 1074, 1009, 1009, 944, 880, 847, 912, 880, 847, 847, 912, 976, 976, 943, 911, 782, 847, 944, 1008, 943, 911, 815, 782, 847, 783, 815, 879, 847, 750, 750, 686, 718, 718, 686, 750, 718, 751, 751, 815, 783, 783, 783, 9006, 33547, 33545, 50155, 43914, 45995, 12841, 8712, 10825, 4813, 751, 752, 785, 784, 817, 785, 752, 2864, 881, 2864, 4814, 8746, 6665, 2766, 915, 915, 882, 947, 979, 947, 947, 979, 1012, 1012, 1044, 1044, 1044, 1044, 1077, 1109, 1109, 1141, 1109, 1109, 1043, 979, 1076, 1141, 946, 2569, 2402, 4450, 2370, 194, 226, 227, 2371, 12966, 4485, 4420, 8613, 6596, 2274, 4484, 6662, 31790, 59193, 25548, 29743, 59161, 31888, 10921, 2501, 195, 14951, 50806, 55000, 54967, 44435, 23403, 52887, 52887, 50839, 50807, 48726, 46646, 46646, 44598, 44566, 42517, 40437, 40405, 38357, 36277, 36277, 36245, 34197, 34197, 32149, 30068, 30036, 27988, 25908, 25908, 23795, 21715, 21715, 21715, 17587, 15507, 13458, 13361, 11346, 13330, 9233, 7153, 3057, 977, 977, 912, 880, 912, 847, 880, 911, 879, 911, 944, 911, 911, 943, 911, 782, 717, 814, 846, 782, 782, 782, 814, 782, 782, 685, 782, 846, 814, 815, 750, 718, 718, 685, 686, 686, 686, 686, 686, 686, 718, 750, 686, 718, 8974, 25419, 33610, 45994, 41867, 23241, 2700, 2733, 719, 784, 784, 687, 687, 720, 752, 785, 785, 785, 752, 784, 785, 818, 850, 818, 850, 818, 882, 882, 882, 915, 915, 914, 914, 947, 979, 947, 947, 1012, 1044, 1044, 1045, 1077, 1109, 1077, 946, 815, 784, 2764, 616, 2337, 194, 193, 193, 161, 194, 259, 2434, 2371, 258, 194, 195, 2404, 2371, 34032, 59193, 59226, 31822, 48693, 57113, 36048, 2403, 4420, 17065, 50806, 54999, 55000, 52919, 50839, 50807, 50807, 50806, 48759, 48726, 46678, 44598, 44565, 42485, 40405, 38325, 38325, 38293, 36245, 34164, 34164, 32084, 32084, 30036, 30004, 27923, 25843, 25844, 23795, 21715, 21682, 17522, 17554, 17522, 15409, 13362, 13330, 13297, 9169, 9137, 7121, 2992, 912, 912, 879, 879, 879, 847, 815, 815, 814, 879, 847, 814, 750, 782, 846, 846, 846, 782, 814, 814, 749, 749, 717, 749, 749, 749, 717, 749, 717, 782, 782, 717, 685, 685, 620, 588, 653, 621, 621, 621, 685, 653, 653, 653, 653, 654, 686, 815, 9135, 8973, 4846, 719, 751, 687, 687, 719, 655, 719, 752, 720, 720, 720, 752, 720, 752, 785, 785, 817, 785, 785, 753, 818, 850, 850, 850, 850, 882, 882, 883, 850, 915, 980, 947, 915, 947, 915, 980, 1044, 1012, 1076, 914, 749, 881, 1107, 225, 2371, 2306, 225, 2274, 6661, 258, 12934, 10823, 290, 194, 6532, 12903, 36080, 57113, 57113, 59193, 55000, 57145, 57113, 52919, 44467, 44468, 52919, 54999, 52919, 52919, 50839, 50839, 50839, 48759, 48726, 46614, 46581, 42453, 42485, 42453, 40372, 38292, 36244, 36212, 34100, 34068, 31987, 32020, 29939, 27923, 27891, 27891, 23698, 21586, 21618, 21650, 19570, 19505, 17458, 15409, 15409, 13329, 13329, 11249, 11184, 7088, 5040, 2960, 912, 879, 879, 879, 750, 815, 815, 814, 814, 750, 685, 782, 750, 750, 749, 782, 846, 749, 749, 781, 652, 684, 749, 749, 717, 685, 717, 749, 749, 717, 717, 685, 685, 620, 556, 555, 491, 588, 620, 652, 717, 588, 621, 588, 653, 621, 686, 653, 686, 653, 653, 686, 621, 654, 751, 687, 687, 719, 751, 687, 687, 687, 687, 687, 720, 720, 720, 688, 720, 753, 753, 753, 753, 720, 785, 817, 850, 882, 882, 915, 850, 850, 882, 915, 915, 850, 883, 947, 979, 947, 817, 881, 2733, 718, 881, 13032, 8741, 226, 194, 226, 8804, 15077, 13000, 15049, 25611, 17129, 50838, 48692, 57080, 57113, 57113, 57113, 57112, 57112, 57080, 57080, 54999, 54999, 52952, 52919, 52887, 50839, 48758, 48726, 48726, 46645, 44565, 44533, 42453, 42453, 40372, 38292, 36212, 34164, 34164, 32084, 32084, 30004, 29939, 29939, 27891, 25843, 25810, 23730, 21618, 19602, 19602, 19538, 19506, 15345, 15345, 13297, 13297, 11217, 11184, 9072, 7024, 4976, 880, 880, 815, 815, 782, 815, 750, 815, 717, 750, 685, 685, 685, 652, 685, 717, 685, 717, 748, 684, 748, 748, 910, 684, 652, 652, 652, 684, 716, 684, 619, 619, 652, 555, 587, 652, 587, 555, 587, 523, 523, 620, 555, 555, 620, 556, 685, 556, 588, 589, 556, 589, 556, 589, 557, 557, 589, 589, 589, 621, 719, 687, 687, 687, 654, 622, 655, 687, 720, 752, 688, 688, 688, 688, 688, 720, 720, 720, 753, 753, 753, 785, 753, 785, 818, 818, 818, 818, 850, 882, 882, 883, 817, 589, 816, 718, 882, 4516, 4420, 2339, 129, 2307, 4452, 4450, 2339, 27693, 50773, 50773, 59193, 54999, 57113, 57112, 57112, 57080, 57080, 57080, 55000, 55000, 55000, 52919, 50839, 50838, 50806, 48758, 48726, 48694, 46645, 44533, 42453, 42420, 40372, 38292, 36211, 36212, 34164, 34164, 32083, 32051, 29971, 27923, 27859, 25778, 23698, 23730, 23698, 21618, 21618, 19505, 17457, 15377, 15345, 13265, 13297, 11216, 11184, 9136, 7024, 7056, 2863, 2895, 847, 815, 815, 814, 782, 814, 750, 750, 685, 749, 652, 685, 652, 652, 620, 684, 652, 652, 716, 651, 651, 651, 683, 619, 651, 651, 587, 554, 554, 587, 651, 684, 652, 619, 490, 522, 555, 555, 652, 587, 523, 458, 458, 523, 523, 491, 620, 555, 523, 588, 556, 556, 556, 556, 556, 557, 524, 524, 589, 654, 654, 622, 622, 622, 622, 622, 590, 622, 655, 687, 655, 655, 688, 688, 656, 688, 720, 688, 720, 688, 688, 753, 720, 785, 785, 882, 785, 785, 753, 817, 817, 818, 850, 882, 850, 818, 752, 13032, 2372, 2307, 226, 6597, 8710, 8771, 10757, 31822, 54999, 59193, 57080, 54967, 57113, 57080, 57080, 57080, 55000, 54999, 54967, 52919, 52919, 50839, 50806, 48758, 48726, 48694, 46613, 46581, 44501, 42453, 40372, 40340, 38260, 36212, 36180, 34099, 32051, 32019, 29939, 27859, 27858, 27858, 25746, 25714, 23666, 21585, 21585, 19505, 17425, 15280, 15345, 15345, 15344, 13264, 11184, 9103, 9039, 6991, 4975, 2895, 815, 815, 815, 782, 750, 750, 685, 717, 717, 717, 717, 684, 717, 684, 652, 619, 652, 587, 684, 651, 780, 651, 651, 651, 683, 651, 651, 554, 554, 587, 554, 619, 554, 619, 522, 587, 554, 522, 587, 619, 651, 651, 651, 490, 587, 619, 619, 523, 458, 394, 458, 588, 588, 556, 523, 556, 491, 491, 524, 524, 492, 557, 589, 524, 492, 492, 557, 590, 557, 2767, 589, 493, 493, 461, 526, 655, 656, 656, 656, 656, 688, 720, 656, 688, 688, 720, 720, 753, 753, 753, 753, 818, 817, 818, 818, 818, 850, 817, 785, 15048, 15113, 23467, 10887, 10790, 2369, 19270, 34064, 52919, 52887, 57113, 57080, 55032, 57080, 55000, 55000, 55000, 54999, 54967, 52919, 52887, 50806, 48726, 48726, 46645, 46613, 46613, 44533, 44501, 42420, 40308, 38227, 38228, 36147, 34099, 32019, 32051, 32051, 29939, 27858, 27890, 25778, 23633, 23569, 21489, 19440, 19505, 19505, 17457, 15377, 15344, 13232, 13200, 13168, 11119, 11152, 9071, 6991, 6991, 2863, 2830, 750, 782, 750, 685, 685, 749, 749, 749, 652, 684, 684, 684, 684, 555, 587, 587, 586, 2667, 554, 490, 489, 521, 554, 651, 651, 715, 586, 651, 651, 683, 651, 650, 683, 747, 618, 618, 554, 618, 554, 619, 683, 619, 651, 587, 651, 619, 457, 587, 652, 619, 652, 684, 653, 620, 491, 458, 459, 459, 459, 524, 491, 459, 556, 524, 524, 524, 525, 524, 524, 589, 687, 557, 460, 460, 493, 493, 493, 526, 590, 655, 655, 656, 688, 688, 656, 656, 720, 688, 753, 720, 720, 785, 785, 753, 785, 785, 818, 720, 720, 46708, 27822, 17193, 4548, 194, 17158, 23432, 48694, 59193, 50806, 57081, 55032, 55032, 55032, 55032, 54999, 52919, 52919, 52887, 50838, 50806, 48726, 48694, 46613, 46581, 44533, 44501, 42420, 40308, 38227, 38195, 36147, 34067, 31955, 32019, 29939, 27826, 27794, 25713, 25681, 23633, 23569, 21457, 19408, 19409, 19441, 17360, 17328, 15280, 15312, 13264, 13232, 9039, 9039, 9103, 9071, 7023, 4911, 2863, 782, 782, 782, 685, 749, 717, 717, 717, 749, 588, 620, 652, 620, 619, 587, 619, 619, 587, 554, 2699, 586, 618, 553, 425, 489, 586, 618, 586, 650, 650, 683, 618, 683, 618, 683, 4971, 2698, 586, 586, 586, 554, 618, 586, 586, 683, 715, 489, 586, 489, 490, 618, 490, 393, 587, 587, 652, 652, 588, 491, 491, 458, 491, 523, 491, 459, 427, 459, 492, 492, 524, 459, 589, 557, 557, 558, 493, 428, 428, 396, 461, 493, 526, 590, 623, 655, 655, 655, 623, 623, 688, 752, 720, 753, 785, 753, 721, 753, 753, 753, 817, 753, 23597, 15048, 25548, 15145, 8805, 25644, 42386, 50838, 48693, 48693, 54967, 55032, 55000, 55000, 52919, 52919, 52887, 50839, 50838, 48758, 48726, 46645, 46613, 44533, 44500, 42420, 40308, 40308, 38195, 38163, 36115, 34035, 31987, 31954, 29842, 25649, 25617, 25585, 23536, 23536, 23537, 21425, 19376, 19344, 17296, 17296, 15184, 15151, 15248, 13232, 11216, 11184, 9103, 9071, 9039, 4911, 2895, 814, 814, 782, 814, 782, 750, 750, 653, 685, 717, 781, 620, 619, 652, 522, 619, 554, 554, 554, 554, 489, 521, 554, 618, 586, 554, 586, 586, 586, 618, 682, 682, 617, 521, 585, 553, 553, 2665, 2665, 586, 2763, 650, 2699, 586, 619, 618, 651, 715, 586, 715, 586, 650, 4746, 457, 490, 554, 522, 619, 555, 458, 361, 555, 523, 491, 491, 523, 556, 524, 556, 459, 460, 491, 459, 394, 266, 298, 330, 395, 363, 428, 428, 493, 493, 525, 461, 558, 526, 590, 623, 623, 591, 591, 623, 655, 720, 752, 688, 688, 720, 752, 753, 785, 753, 29838, 46645, 50839, 10757, 6627, 38194, 52919, 34064, 50839, 52919, 54999, 52919, 52919, 52919, 52919, 52887, 50839, 50806, 48693, 46613, 46613, 44533, 44500, 42420, 42420, 40340, 40307, 38227, 38195, 36115, 34034, 31922, 29810, 27697, 27633, 25585, 25552, 23504, 23472, 21424, 19344, 17231, 17199, 19280, 17231, 15183, 15183, 13168, 13200, 13200, 11152, 9103, 9039, 6959, 4943, 814, 2863, 2766, 2701, 653, 782, 749, 685, 652, 653, 588, 523, 458, 425, 522, 457, 490, 586, 554, 554, 554, 554, 586, 586, 553, 585, 553, 553, 553, 586, 585, 650, 650, 553, 553, 2633, 391, 424, 4810, 11147, 7019, 2794, 7310, 3150, 456, 488, 424, 521, 456, 2634, 586, 521, 553, 2763, 618, 522, 554, 522, 522, 393, 4715, 2635, 555, 620, 620, 620, 620, 588, 555, 2539, 394, 524, 459, 395, 362, 362, 395, 362, 395, 362, 460, 460, 428, 428, 460, 460, 493, 493, 461, 493, 558, 558, 591, 623, 591, 558, 590, 687, 655, 720, 687, 589, 654, 753, 784, 57145, 38128, 17031, 12871, 15046, 31983, 42354, 38225, 50904, 52919, 52919, 52919, 52887, 50839, 50806, 48726, 48693, 46613, 46613, 44533, 44501, 42452, 42420, 40372, 40340, 38227, 38195, 36083, 34002, 31890, 29810, 29809, 29809, 27665, 25552, 23472, 23472, 21392, 19312, 19279, 19279, 19247, 17167, 17199, 17231, 17199, 15151, 11087, 13232, 13200, 11152, 9136, 5007, 4943, 2927, 2927, 814, 2830, 750, 750, 750, 750, 717, 685, 685, 620, 587, 458, 490, 457, 490, 457, 522, 554, 586, 521, 553, 554, 553, 585, 488, 553, 585, 585, 488, 585, 553, 617, 553, 456, 424, 327, 391, 455, 326, 294, 326, 4745, 2666, 521, 2537, 617, 585, 488, 2633, 2698, 650, 2731, 585, 520, 553, 521, 2472, 360, 328, 2440, 4650, 295, 522, 619, 587, 652, 620, 426, 426, 523, 556, 329, 297, 426, 427, 394, 394, 427, 427, 427, 427, 460, 427, 460, 428, 460, 428, 525, 493, 525, 493, 525, 525, 526, 590, 526, 558, 558, 623, 655, 591, 525, 524, 622, 23338, 40306, 52951, 8678, 34031, 44433, 38256, 50838, 38226, 52920, 52919, 50839, 50806, 48726, 48694, 46645, 46613, 44533, 44533, 42452, 42420, 40372, 40340, 38259, 36147, 34066, 34034, 31954, 31922, 29842, 29842, 27761, 25649, 25552, 23440, 21360, 21360, 19312, 19279, 19247, 17167, 17199, 17199, 15151, 15183, 13135, 13135, 13167, 13167, 11022, 8942, 6958, 4846, 2798, 2862, 846, 911, 814, 814, 814, 782, 749, 717, 684, 716, 684, 586, 10923, 17197, 10988, 6828, 2731, 2602, 521, 554, 553, 489, 521, 521, 456, 456, 617, 552, 617, 2697, 714, 585, 2698, 2600, 455, 2600, 488, 553, 391, 423, 391, 2697, 2826, 682, 2794, 714, 2633, 424, 456, 520, 617, 2795, 2762, 553, 2601, 488, 2634, 521, 2537, 425, 393, 360, 295, 328, 522, 587, 587, 522, 2571, 393, 458, 426, 4554, 2571, 427, 394, 362, 394, 394, 395, 427, 427, 427, 395, 395, 428, 428, 428, 460, 493, 2605, 525, 493, 493, 525, 525, 525, 590, 590, 558, 623, 591, 622, 590, 589, 52951, 55065, 50838, 29773, 40306, 50904, 50806, 50838, 48726, 50839, 50806, 48758, 48726, 48726, 46646, 46645, 44565, 42452, 42420, 42388, 40308, 38227, 36147, 36115, 34034, 31986, 31954, 29842, 29842, 27761, 25649, 25584, 23504, 23472, 21360, 21360, 21328, 19247, 17167, 17134, 17167, 15086, 17199, 15151, 15118, 15183, 13070, 13102, 11022, 8910, 6862, 4781, 4781, 2895, 2830, 782, 878, 782, 846, 846, 749, 685, 684, 652, 652, 8940, 21260, 27501, 25485, 19212, 15084, 10923, 8843, 4747, 682, 618, 553, 553, 488, 424, 2600, 585, 552, 4745, 2697, 552, 423, 326, 326, 326, 358, 359, 293, 2567, 487, 294, 2503, 455, 2504, 2697, 488, 2503, 2536, 326, 294, 359, 2600, 391, 326, 2504, 489, 489, 2634, 327, 263, 327, 392, 425, 393, 392, 4682, 4715, 360, 2538, 2571, 393, 426, 329, 328, 329, 296, 329, 362, 362, 394, 362, 330, 362, 362, 362, 428, 427, 460, 492, 492, 492, 460, 525, 493, 493, 557, 590, 558, 525, 493, 493, 558, 558, 590, 492, 46645, 52984, 50838, 38257, 38192, 52983, 48693, 52919, 50871, 50839, 50806, 48726, 48726, 46645, 44565, 44533, 44501, 42420, 40340, 38227, 38227, 36147, 34034, 34034, 31986, 31922, 29841, 27729, 25617, 25585, 23504, 23472, 23440, 21392, 21328, 19247, 19247, 19215, 17135, 17135, 15054, 15054, 15086, 13038, 13038, 13038, 10990, 11022, 11022, 8877, 6733, 6829, 4781, 2668, 685, 685, 749, 717, 717, 749, 652, 620, 684, 619, 10923, 23243, 29484, 31565, 33710, 21227, 19116, 12874, 12907, 10858, 6762, 2634, 586, 586, 553, 520, 488, 520, 585, 488, 552, 2697, 2633, 455, 358, 358, 326, 326, 423, 2697, 487, 423, 391, 358, 2374, 326, 262, 2342, 2374, 6697, 4648, 295, 11017, 34222, 29933, 2536, 520, 488, 553, 392, 391, 392, 295, 295, 295, 2408, 4520, 8842, 2408, 295, 263, 361, 393, 2409, 6699, 296, 296, 264, 232, 297, 394, 459, 427, 459, 459, 427, 427, 459, 427, 395, 493, 493, 460, 2573, 525, 460, 525, 460, 461, 525, 493, 525, 525, 525, 493, 493, 52952, 52919, 44530, 46677, 36046, 44563, 42451, 50839, 50839, 48758, 48726, 46645, 46645, 44565, 44565, 42452, 42452, 40340, 38259, 36147, 36114, 34034, 31954, 31922, 29841, 29841, 27761, 25649, 25584, 23472, 23440, 23408, 21360, 21327, 19247, 19182, 17134, 17134, 15022, 14990, 15086, 15022, 15022, 13006, 10925, 10926, 10958, 10990, 8909, 8845, 8909, 4780, 2669, 2733, 2700, 2700, 717, 717, 749, 652, 587, 555, 587, 10923, 21195, 29516, 29517, 29517, 21131, 6472, 6440, 6472, 8681, 10826, 10858, 6697, 4649, 553, 553, 553, 552, 2471, 358, 390, 520, 2568, 487, 423, 2471, 2471, 261, 2438, 2730, 2568, 2503, 15243, 391, 2470, 293, 261, 229, 2342, 2341, 4519, 6664, 326, 2374, 10856, 10791, 358, 358, 359, 359, 488, 2440, 2374, 2472, 359, 295, 294, 4455, 359, 2408, 327, 425, 2441, 360, 2408, 393, 393, 2409, 296, 329, 393, 394, 394, 394, 394, 394, 394, 362, 362, 362, 363, 395, 395, 427, 363, 363, 460, 492, 493, 493, 493, 461, 590, 493, 493, 525, 492, 52952, 52952, 44532, 48758, 27596, 40370, 38193, 50806, 48726, 48726, 46645, 46645, 46613, 44533, 42452, 42420, 40340, 38227, 36146, 34066, 34034, 31954, 29874, 29874, 29841, 27761, 25649, 23569, 23504, 23440, 21359, 19247, 19247, 19182, 17134, 17134, 17102, 15022, 17102, 15086, 15054, 14990, 12941, 12973, 12973, 10861, 8813, 10925, 10957, 8909, 8974, 2571, 4684, 2636, 2765, 2829, 749, 2764, 684, 555, 651, 587, 6795, 21195, 23275, 29516, 27371, 19051, 6472, 4391, 4391, 4358, 4326, 6439, 6503, 6535, 4519, 6697, 4649, 520, 520, 488, 359, 2309, 2406, 6696, 4551, 293, 2438, 2438, 2406, 294, 4713, 358, 2373, 11018, 8840, 6792, 4551, 2406, 2309, 293, 2439, 4519, 2536, 4551, 4519, 2406, 4487, 2439, 424, 2472, 294, 359, 294, 4455, 2374, 295, 2439, 359, 2505, 230, 230, 2408, 2376, 2375, 2473, 2440, 2441, 4585, 2343, 2474, 361, 296, 296, 328, 329, 297, 297, 329, 362, 330, 330, 395, 362, 362, 362, 330, 330, 427, 427, 427, 428, 428, 460, 557, 460, 460, 492, 394, 52951, 52919, 46644, 50838, 27629, 40338, 42452, 46645, 48726, 46645, 42452, 42484, 44501, 42420, 40340, 40340, 38227, 36147, 34066, 34034, 31954, 29873, 29841, 27793, 27761, 25681, 23568, 23504, 21424, 21327, 19247, 19215, 19247, 17199, 17231, 17199, 17167, 17199, 15086, 15086, 12974, 12909, 12909, 10828, 10861, 10861, 8780, 8780, 8812, 6667, 4587, 4620, 4652, 620, 684, 716, 684, 555, 587, 587, 587, 2570, 17067, 21195, 19050, 21098, 21131, 10632, 4391, 4391, 4358, 2278, 4326, 2277, 4358, 2277, 6438, 12840, 8745, 4616, 520, 488, 455, 391, 2470, 2503, 2438, 2373, 2341, 2276, 2470, 520, 2439, 10854, 2373, 2438, 4454, 2308, 4486, 4486, 2308, 229, 326, 4551, 4454, 6599, 2406, 229, 2277, 2374, 2439, 2504, 4454, 4519, 391, 294, 2375, 2374, 6633, 4455, 4358, 2277, 230, 360, 2375, 4552, 6731, 4521, 4489, 8778, 10859, 2408, 295, 328, 231, 328, 2474, 296, 264, 263, 232, 232, 264, 297, 297, 297, 297, 362, 362, 362, 395, 395, 427, 492, 492, 524, 427, 428, 427, 427, 48790, 48790, 42483, 42418, 33935, 40274, 48725, 31920, 36081, 36145, 40339, 42452, 40372, 38259, 36211, 36179, 34098, 34066, 31986, 31954, 29874, 27793, 27729, 25681, 23600, 23536, 21424, 21359, 21327, 19215, 19183, 17134, 19247, 17231, 17199, 17102, 15086, 15054, 12941, 12909, 12877, 10828, 10828, 12941, 10893, 10893, 8780, 6667, 6700, 4619, 4619, 2571, 2603, 684, 684, 685, 587, 2667, 619, 490, 2473, 8843, 17002, 16970, 21098, 18986, 10632, 6439, 6439, 4358, 2245, 2245, 2245, 2245, 2213, 6406, 10663, 6438, 8583, 4390, 4519, 2406, 2471, 2439, 2470, 2405, 6631, 6631, 2374, 2374, 2373, 2470, 293, 2373, 6631, 8679, 4486, 2373, 4518, 2276, 4486, 4551, 2342, 4421, 4486, 2373, 229, 4454, 4454, 8647, 2374, 2439, 4487, 2309, 4422, 4487, 6535, 8615, 8583, 12777, 12744, 8616, 2343, 2310, 2310, 4455, 6633, 6504, 4488, 2441, 231, 4489, 2376, 198, 263, 2409, 361, 296, 329, 2506, 361, 329, 296, 297, 297, 265, 297, 395, 362, 362, 330, 395, 362, 427, 492, 459, 460, 427, 427, 492, 46709, 44564, 44596, 36048, 34000, 29872, 42419, 34000, 42484, 42452, 40371, 38291, 38259, 36179, 36146, 34098, 34034, 31954, 29873, 27761, 27761, 25713, 23600, 23536, 23536, 23472, 21359, 19215, 19182, 17166, 19215, 17134, 17102, 17102, 15022, 15022, 12941, 12941, 12909, 10796, 10796, 8748, 8748, 10796, 8780, 8812, 6699, 6700, 4619, 4652, 2571, 491, 2603, 620, 620, 587, 522, 619, 2570, 2505, 8843, 12906, 14857, 18985, 23210, 23179, 12777, 6439, 4358, 4325, 2245, 2245, 2245, 2245, 4325, 4325, 4292, 4292, 4325, 6470, 2309, 2180, 2244, 131, 4519, 390, 2276, 2341, 4389, 4421, 2276, 2341, 4389, 358, 4486, 4389, 2405, 4453, 2340, 4421, 4389, 6534, 4485, 10727, 4357, 2244, 4421, 2341, 4486, 6599, 6632, 229, 2277, 4389, 4422, 6503, 6502, 6503, 4357, 12777, 8584, 2310, 2343, 4424, 230, 8617, 2343, 2440, 8681, 328, 2376, 10794, 6569, 4521, 295, 2408, 328, 296, 329, 2441, 2506, 394, 2442, 2410, 297, 297, 297, 297, 362, 362, 362, 394, 4556, 395, 362, 427, 427, 395, 427, 2540, 46677, 44629, 46677, 46677, 42418, 21324, 17097, 36178, 36146, 40339, 38259, 36179, 36146, 34098, 34066, 31986, 29874, 27793, 27761, 25648, 23568, 21456, 21456, 21456, 21424, 21359, 19247, 17166, 17134, 17199, 17167, 15054, 15022, 14989, 12909, 12941, 12941, 10861, 10828, 10796, 8748, 8748, 8716, 8716, 6700, 6700, 6732, 4587, 4587, 4748, 4748, 587, 2667, 4716, 587, 587, 554, 490, 392, 6763, 10858, 17002, 19017, 21098, 23243, 10632, 2278, 2245, 2245, 2245, 2245, 2245, 4325, 2245, 4325, 4325, 6438, 6470, 8518, 2244, 2212, 131, 4357, 4422, 2341, 2277, 4421, 4485, 4454, 4485, 4389, 8646, 2308, 2373, 4356, 4486, 2405, 4453, 2276, 2341, 6533, 4357, 2276, 2308, 6437, 2276, 4356, 2244, 6502, 261, 4485, 2309, 4389, 4422, 6502, 6535, 6470, 8550, 6406, 6438, 6536, 6438, 2310, 2277, 230, 4391, 4423, 6503, 10729, 2375, 2344, 4391, 2278, 2278, 198, 4488, 4424, 6602, 296, 361, 2473, 328, 329, 329, 2344, 361, 328, 296, 361, 2475, 362, 394, 394, 362, 330, 362, 427, 394, 394, 2604, 42516, 42516, 42516, 42484, 40371, 19178, 19211, 29807, 31920, 36146, 36146, 34066, 31986, 31986, 29873, 29841, 27793, 27761, 23600, 23568, 23504, 21424, 21424, 21391, 19311, 19247, 17134, 17166, 17134, 17166, 17134, 15022, 12909, 12909, 12909, 12909, 10860, 10828, 10796, 10796, 8715, 8715, 8748, 8715, 6732, 6829, 4684, 4716, 4877, 2861, 2700, 2764, 2829, 2829, 2667, 490, 425, 425, 4682, 8746, 12842, 14922, 16937, 14824, 12680, 4293, 2245, 2245, 2245, 2245, 2277, 2245, 2245, 2245, 2245, 4293, 4357, 4324, 8583, 8583, 2212, 2179, 2179, 2244, 4389, 228, 4421, 6469, 2211, 6598, 4389, 6501, 8646, 6598, 6566, 6501, 6437, 6566, 4453, 6533, 8647, 2308, 2277, 2244, 6404, 4324, 4389, 4356, 8582, 2276, 2275, 2243, 4324, 4389, 4389, 6470, 6470, 4324, 4325, 6405, 8551, 6406, 4326, 10664, 6470, 4391, 2278, 4390, 4390, 6504, 230, 8616, 8649, 10761, 2375, 4488, 4585, 8682, 296, 361, 2441, 2409, 329, 2409, 10665, 10698, 6570, 329, 328, 8716, 4587, 362, 394, 394, 2475, 362, 2475, 2507, 426, 393, 40403, 40403, 40371, 40371, 36145, 21226, 25712, 36146, 36146, 34034, 31986, 31954, 29906, 29873, 25583, 25648, 25616, 23471, 23504, 23471, 21391, 21359, 19279, 19247, 17167, 17102, 15022, 15022, 15021, 15118, 15053, 12909, 10861, 10861, 12909, 10828, 10828, 10796, 10796, 8715, 8715, 6667, 6667, 6667, 8747, 6796, 6861, 6925, 6829, 4910, 2861, 2796, 2764, 2829, 554, 490, 2537, 2602, 8746, 12841, 14922, 17002, 14857, 10567, 6406, 2245, 2213, 2213, 2212, 2212, 2212, 2245, 4357, 6438, 4292, 4292, 6373, 4260, 4292, 4324, 2276, 2179, 4357, 4324, 4357, 4292, 12839, 6566, 4325, 6566, 6502, 6534, 8614, 12839, 12871, 10694, 4356, 4356, 6469, 10758, 8581, 2276, 2244, 4356, 6469, 6469, 4420, 10726, 6501, 6533, 4356, 2179, 2179, 6437, 6438, 6437, 2212, 4292, 8551, 8551, 6405, 6405, 6405, 6438, 4293, 4325, 2278, 2245, 8552, 2277, 2278, 4390, 10697, 4423, 4391, 2310, 2278, 262, 197, 230, 296, 2409, 361, 296, 263, 263, 4424, 4457, 2409, 2377, 2345, 362, 297, 296, 362, 2507, 329, 394, 2474, 4554, 36210, 36210, 36242, 36210, 36145, 27727, 8614, 29905, 31953, 29873, 29873, 27825, 27793, 25648, 23471, 23504, 21423, 21423, 23471, 19278, 21359, 19279, 19247, 17134, 15086, 15054, 15053, 15086, 15054, 15054, 12909, 12876, 12909, 10829, 10828, 8716, 8716, 8716, 8748, 8748, 8748, 6667, 6699, 6732, 6732, 6732, 6893, 7054, 2925, 5038, 2796, 554, 2699, 2764, 619, 425, 2570, 6730, 8746, 12841, 12874, 12777, 8519, 6406, 4261, 2212, 2212, 2212, 2212, 132, 2212, 2245, 6405, 2244, 2212, 4357, 8550, 4357, 2211, 4292, 2211, 4260, 4292, 6372, 4356, 4325, 4421, 6534, 4357, 4453, 10726, 8678, 12806, 15016, 14952, 12806, 6468, 6436, 10758, 14920, 12839, 4388, 4356, 6501, 4388, 14887, 2212, 4388, 8614, 6468, 4421, 4324, 4292, 4324, 4357, 4389, 4325, 4357, 8550, 4357, 4324, 4292, 6372, 6404, 4292, 4390, 4325, 4357, 6471, 164, 2245, 8551, 6471, 2278, 10696, 6504, 4358, 2343, 4456, 4489, 295, 328, 231, 263, 2343, 198, 231, 198, 231, 231, 2376, 329, 264, 264, 264, 232, 297, 361, 361, 2441, 32049, 34065, 34098, 27759, 29872, 29937, 17131, 15148, 25680, 27761, 27793, 25713, 25648, 19310, 23472, 23504, 17165, 21423, 19279, 19279, 19247, 17166, 17134, 15086, 15086, 15054, 15054, 13006, 13038, 12909, 10861, 10828, 10861, 10796, 8748, 8715, 8748, 8683, 8715, 8716, 6700, 6796, 6764, 2506, 4651, 4619, 2797, 7054, 6990, 2829, 2796, 619, 716, 522, 2538, 489, 4650, 8746, 10793, 10729, 6536, 4326, 2245, 4293, 2212, 132, 2212, 2212, 2180, 2180, 2212, 4325, 4325, 4292, 4325, 6437, 8517, 4324, 4325, 6405, 6437, 4324, 4324, 4323, 6469, 4356, 4356, 4356, 4356, 10792, 12872, 10759, 12807, 8646, 8581, 10693, 2211, 4323, 6469, 6469, 6437, 2211, 4389, 6469, 14951, 8581, 6437, 8614, 4356, 2211, 12741, 4324, 4357, 4356, 8582, 4389, 4357, 6437, 6405, 6405, 4325, 6372, 6371, 4291, 2243, 2244, 2245, 6470, 4358, 2245, 2212, 10632, 8583, 4390, 4358, 4358, 2310, 2278, 165, 4391, 2343, 2408, 4456, 6536, 2278, 2310, 2279, 198, 263, 2409, 2409, 263, 328, 296, 296, 296, 2409, 329, 263, 263, 25809, 25744, 29872, 25712, 27825, 27857, 23599, 10728, 25648, 25680, 25648, 25616, 23536, 19343, 21423, 15052, 21391, 19246, 17198, 17166, 17166, 15086, 15086, 15118, 15118, 15086, 12973, 13005, 10925, 10893, 10925, 10893, 10925, 10861, 8748, 8747, 6667, 8780, 8780, 6700, 6732, 6797, 4683, 6699, 4683, 4716, 4844, 4683, 2602, 4747, 2634, 586, 554, 424, 489, 2569, 6665, 8745, 8713, 6471, 2277, 2213, 2245, 2245, 2180, 132, 132, 2180, 2180, 2212, 2212, 4293, 6405, 6438, 4325, 4325, 4260, 4324, 6404, 6437, 6437, 8517, 8550, 4324, 6469, 4324, 8582, 6469, 10662, 8582, 8614, 8582, 6534, 6436, 6436, 19177, 14951, 12806, 6468, 6437, 2179, 4324, 12807, 6469, 4323, 6437, 4356, 8580, 6437, 6404, 8516, 8485, 2211, 6405, 4324, 2244, 4389, 6437, 8518, 4325, 4292, 4260, 2178, 4259, 2211, 4325, 4292, 6405, 4293, 6438, 6438, 8551, 12809, 10631, 6438, 132, 8616, 6503, 8648, 2278, 4390, 2278, 4423, 8650, 6504, 2311, 2343, 2311, 2311, 2343, 4489, 8714, 360, 264, 296, 296, 296, 361, 328, 296, 15504, 21583, 23599, 25680, 25712, 25712, 23535, 15051, 19310, 23568, 23504, 21455, 21423, 15084, 17197, 15020, 17166, 15021, 15086, 15086, 15118, 15118, 15118, 15118, 13102, 13005, 12973, 10893, 10860, 10893, 10860, 10860, 10795, 8715, 8780, 8812, 8780, 8812, 8812, 6667, 6667, 6699, 6699, 4554, 4586, 4554, 4650, 4553, 2441, 2473, 2473, 2505, 2538, 2505, 2408, 4488, 6665, 8713, 8584, 10794, 8584, 2277, 4358, 2245, 100, 2180, 2180, 2180, 4292, 2244, 4325, 6438, 6470, 6405, 6405, 6405, 6372, 6405, 4259, 6405, 6502, 8581, 10662, 4357, 6404, 8613, 10726, 6436, 10693, 10694, 8549, 10758, 8549, 14985, 10889, 12871, 12774, 6435, 6404, 4355, 8484, 8549, 6469, 4323, 6404, 6405, 6437, 6404, 12710, 10694, 10662, 6404, 6437, 10597, 6372, 4260, 6437, 8517, 6372, 4324, 4292, 4259, 2146, 2147, 99, 2212, 4325, 6373, 4325, 8486, 10664, 8518, 10631, 10631, 6406, 4358, 12744, 4358, 8584, 6536, 6471, 4358, 12777, 4358, 2310, 4424, 6504, 132, 2278, 230, 263, 2375, 262, 263, 263, 263, 263, 296, 296, 2376, 7247, 15278, 15115, 23631, 23632, 23567, 17131, 23503, 15084, 21423, 21391, 19343, 15052, 15117, 8616, 17134, 15085, 12908, 15086, 13005, 13005, 13037, 13069, 13037, 13005, 10892, 8812, 8812, 10828, 8748, 10925, 8844, 10860, 8812, 8715, 6667, 6699, 6699, 4554, 6602, 6634, 4619, 4586, 2441, 2506, 4715, 6634, 4456, 4489, 2441, 2505, 393, 360, 2472, 4488, 6633, 8713, 6535, 8584, 4390, 8616, 6471, 2245, 2212, 131, 2212, 2212, 4292, 4325, 4325, 6405, 6373, 6373, 4292, 2212, 4292, 4259, 4260, 6405, 6437, 10630, 12742, 8517, 6469, 8614, 10662, 10629, 8516, 10661, 10694, 8549, 10726, 12774, 12807, 12774, 10726, 6501, 10629, 10596, 10694, 6404, 6404, 4291, 12742, 8517, 2179, 4291, 4324, 8484, 10565, 10630, 8485, 4324, 8484, 6373, 8549, 8549, 6437, 10566, 8485, 4227, 6372, 2212, 4292, 6405, 4260, 2212, 6373, 4292, 12776, 4325, 6438, 21260, 10696, 6438, 4325, 6406, 8583, 6406, 4325, 8584, 8584, 2245, 6471, 12777, 8584, 6504, 8616, 6503, 4359, 8617, 198, 198, 198, 198, 2311, 4456, 198, 2311, 231, 780, 13262, 8744, 21455, 21423, 17164, 21390, 17197, 19342, 19310, 17230, 17165, 8616, 8681, 12907, 15053, 8682, 15053, 13005, 13037, 13070, 13037, 10957, 10860, 10860, 8780, 8780, 8748, 8779, 10828, 8812, 8844, 8844, 6699, 6635, 4619, 4716, 6667, 6699, 4586, 4586, 2441, 2441, 2473, 2538, 6634, 4488, 4586, 2473, 2376, 2473, 425, 360, 2440, 4520, 4552, 8681, 8584, 4325, 4358, 4326, 2245, 2245, 2212, 2244, 4325, 4293, 2212, 2212, 2212, 6340, 4260, 4292, 4292, 4292, 2147, 2179, 6405, 6405, 6469, 10630, 10727, 8582, 10760, 12840, 4324, 8485, 10597, 8517, 8581, 8549, 10597, 14918, 8581, 10662, 6404, 2243, 2179, 12709, 14854, 6404, 4324, 2211, 6436, 8549, 10661, 10596, 4323, 6404, 4291, 12710, 6436, 8485, 12677, 8517, 6405, 6404, 10598, 4292, 8517, 4292, 6372, 4259, 8453, 4259, 2179, 2244, 8453, 8485, 10630, 8551, 6373, 6470, 10599, 6373, 4293, 2212, 6406, 4325, 8518, 6438, 4358, 4358, 6470, 6438, 4390, 2278, 2310, 2278, 2278, 8713, 2343, 230, 198, 165, 165, 198, 262, 2376, 2376, 2536, 4940, 6599, 10760, 10858, 19310, 17262, 10761, 17230, 15150, 15118, 12972, 6568, 4422, 12973, 10794, 12940, 13005, 11022, 10989, 10957, 10892, 10860, 8780, 8844, 8780, 8844, 8812, 6731, 8715, 8779, 8715, 6634, 4522, 4522, 4554, 6635, 4618, 4618, 4651, 4618, 4521, 4489, 4456, 4456, 4456, 4456, 4424, 2376, 2376, 2343, 2408, 2375, 2343, 2407, 6665, 8648, 2277, 2245, 2245, 2245, 2213, 132, 2212, 4325, 6438, 4325, 4325, 6406, 4325, 4324, 4292, 4325, 4292, 4293, 4324, 6437, 6437, 6437, 6405, 6437, 12743, 6437, 6437, 8582, 8549, 6436, 12741, 8517, 6436, 8517, 12710, 19079, 10661, 8516, 6403, 2146, 10629, 6371, 6403, 4290, 6403, 6437, 10565, 6436, 8549, 14887, 6436, 6404, 6404, 12710, 8550, 4259, 12709, 4291, 4259, 8452, 8485, 6405, 8452, 10533, 6372, 6340, 6340, 6372, 6340, 6373, 8485, 6405, 8518, 4325, 8454, 4293, 10566, 14824, 2212, 2245, 2180, 2245, 4358, 14792, 4358, 4358, 6406, 4358, 6503, 6471, 6471, 4423, 4391, 8552, 6471, 10696, 2278, 197, 2278, 2278, 165, 132, 165, 2276, 2243, 4486, 13036, 17230, 17198, 15117, 6600, 15149, 15117, 13005, 6437, 4357, 10828, 10827, 8713, 10957, 11022, 11021, 10989, 8812, 8812, 8747, 8812, 8812, 6699, 6764, 8780, 6732, 6667, 6667, 6634, 6602, 4522, 4521, 4521, 6569, 2505, 4586, 2505, 4489, 4521, 4456, 2408, 2376, 2343, 2343, 2343, 2343, 2343, 2343, 2310, 2310, 2342, 6600, 6568, 4325, 4326, 4325, 2277, 2245, 132, 4357, 6470, 6438, 4292, 4293, 4325, 4325, 4292, 2212, 4260, 4325, 6437, 6437, 6469, 8550, 8550, 8550, 8550, 10662, 10694, 8549, 10597, 10597, 4259, 6437, 10597, 6371, 8485, 6436, 8484, 12742, 14855, 12677, 8452, 8516, 14854, 8483, 8484, 4292, 8546, 8452, 8484, 8452, 4227, 4292, 8452, 12677, 10630, 10630, 6404, 6372, 8484, 4259, 6339, 4292, 8485, 8517, 8517, 8453, 4259, 8452, 4259, 10631, 4260, 6373, 8485, 6372, 4260, 4260, 6373, 4292, 4292, 4325, 4357, 4390, 2245, 4293, 4292, 4325, 4325, 6406, 4325, 12712, 8551, 6471, 10631, 8649, 8584, 6504, 4423, 4423, 6471, 2311, 4391, 4358, 6504, 2245, 132, 261, 228, 8973, 13069, 15149, 17133, 12841, 10794, 15085, 15053, 10794, 4357, 6405, 12940, 6503, 12972, 13037, 12973, 12973, 10860, 10795, 8779, 8747, 8779, 8844, 8715, 6699, 6634, 8682, 8714, 8650, 6569, 6569, 4457, 6569, 6569, 6601, 6666, 6569, 6536, 6537, 4456, 4424, 4424, 4391, 4359, 4359, 4391, 4359, 2310, 4358, 2278, 2277, 4390, 8616, 6470, 4325, 4293, 4293, 4293, 4325, 2212, 10664, 4357, 6405, 4293, 4293, 4260, 6340, 4292, 4325, 4292, 4292, 6405, 12710, 12743, 10662, 8517, 8517, 8517, 16902, 10662, 8453, 6372, 8485, 8517, 10597, 8485, 10596, 6339, 6339, 2114, 10598, 10597, 10532, 8516, 4291, 8516, 14759, 14789, 8484, 12709, 14756, 4226, 4258, 8452, 12709, 12710, 12646, 12646, 8485, 12678, 8517, 10598, 8485, 8420, 4292, 8452, 4291, 10533, 6340, 8453, 6340, 18952, 16872, 8485, 4260, 8485, 12647, 6373, 8485, 6405, 6405, 6373, 10566, 12614, 8486, 2212, 4260, 4292, 2244, 4292, 4325, 6406, 8518, 8552, 6405, 6470, 6438, 6471, 6504, 6406, 2310, 2278, 4391, 6471, 4391, 2245, 2310, 198};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	3b10      	subs	r3, #16
 800071a:	4a2d      	ldr	r2, [pc, #180]	; (80007d0 <_Z13Send_test_imgv+0xf4>)
 800071c:	4618      	mov	r0, r3
 800071e:	4611      	mov	r1, r2
 8000720:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000724:	461a      	mov	r2, r3
 8000726:	f005 feeb 	bl	8006500 <memcpy>



	for(int i=0;i<columnSize;i++)
 800072a:	2300      	movs	r3, #0
 800072c:	f507 4216 	add.w	r2, r7, #38400	; 0x9600
 8000730:	f102 020c 	add.w	r2, r2, #12
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	f507 4316 	add.w	r3, r7, #38400	; 0x9600
 800073a:	f103 0306 	add.w	r3, r3, #6
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	f507 4216 	add.w	r2, r7, #38400	; 0x9600
 8000744:	f102 020c 	add.w	r2, r2, #12
 8000748:	6812      	ldr	r2, [r2, #0]
 800074a:	429a      	cmp	r2, r3
 800074c:	da37      	bge.n	80007be <_Z13Send_test_imgv+0xe2>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)header,strlen(header), HAL_MAX_DELAY);
 800074e:	f507 4316 	add.w	r3, r7, #38400	; 0x9600
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fd56 	bl	8000204 <strlen>
 8000758:	4603      	mov	r3, r0
 800075a:	b29a      	uxth	r2, r3
 800075c:	f507 4116 	add.w	r1, r7, #38400	; 0x9600
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	481b      	ldr	r0, [pc, #108]	; (80007d4 <_Z13Send_test_imgv+0xf8>)
 8000766:	f005 fbde 	bl	8005f26 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)&testImg[i*rowSize], rowSizeBytes, HAL_MAX_DELAY);
 800076a:	f507 4316 	add.w	r3, r7, #38400	; 0x9600
 800076e:	f103 030a 	add.w	r3, r3, #10
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	f507 4216 	add.w	r2, r7, #38400	; 0x9600
 8000778:	f102 020c 	add.w	r2, r2, #12
 800077c:	6812      	ldr	r2, [r2, #0]
 800077e:	fb02 f203 	mul.w	r2, r2, r3
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	3b10      	subs	r3, #16
 8000788:	0052      	lsls	r2, r2, #1
 800078a:	1899      	adds	r1, r3, r2
 800078c:	f507 4316 	add.w	r3, r7, #38400	; 0x9600
 8000790:	f103 0308 	add.w	r3, r3, #8
 8000794:	881a      	ldrh	r2, [r3, #0]
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	480e      	ldr	r0, [pc, #56]	; (80007d4 <_Z13Send_test_imgv+0xf8>)
 800079c:	f005 fbc3 	bl	8005f26 <HAL_UART_Transmit>
		HAL_Delay(2);
 80007a0:	2002      	movs	r0, #2
 80007a2:	f001 fab9 	bl	8001d18 <HAL_Delay>
	for(int i=0;i<columnSize;i++)
 80007a6:	f507 4316 	add.w	r3, r7, #38400	; 0x9600
 80007aa:	f103 030c 	add.w	r3, r3, #12
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	f507 4216 	add.w	r2, r7, #38400	; 0x9600
 80007b6:	f102 020c 	add.w	r2, r2, #12
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	e7bb      	b.n	8000736 <_Z13Send_test_imgv+0x5a>
	}
}
 80007be:	bf00      	nop
 80007c0:	f507 4716 	add.w	r7, r7, #38400	; 0x9600
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	004d4143 	.word	0x004d4143
 80007d0:	08006578 	.word	0x08006578
 80007d4:	20009770 	.word	0x20009770

080007d8 <Camera_init>:
//initialize the camera module
void Camera_init()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

	Send_test_img();
 80007de:	f7ff ff7d 	bl	80006dc <_Z13Send_test_imgv>
	OV5640_RegisterBusIO(&cameraObj, &cameraIO);
 80007e2:	4915      	ldr	r1, [pc, #84]	; (8000838 <Camera_init+0x60>)
 80007e4:	4815      	ldr	r0, [pc, #84]	; (800083c <Camera_init+0x64>)
 80007e6:	f000 fa93 	bl	8000d10 <OV5640_RegisterBusIO>
	uint32_t Id =0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
	OV5640_ReadID(&cameraObj, &Id);
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4812      	ldr	r0, [pc, #72]	; (800083c <Camera_init+0x64>)
 80007f4:	f000 fe44 	bl	8001480 <OV5640_ReadID>
	OV5640_Init(&cameraObj, OV5640_R160x120, OV5640_RGB565);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	480f      	ldr	r0, [pc, #60]	; (800083c <Camera_init+0x64>)
 80007fe:	f000 fac9 	bl	8000d94 <OV5640_Init>

	std::fill(img, &img[imgSize-1], 0);
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	461a      	mov	r2, r3
 800080a:	490d      	ldr	r1, [pc, #52]	; (8000840 <Camera_init+0x68>)
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <Camera_init+0x6c>)
 800080e:	f000 f877 	bl	8000900 <_ZSt4fillIPmiEvT_S1_RKT0_>
	__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <Camera_init+0x70>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68da      	ldr	r2, [r3, #12]
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <Camera_init+0x70>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f042 0201 	orr.w	r2, r2, #1
 8000820:	60da      	str	r2, [r3, #12]
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT,  (uint32_t)img, imgSize);
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <Camera_init+0x6c>)
 8000824:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000828:	2102      	movs	r1, #2
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <Camera_init+0x70>)
 800082c:	f001 fbf2 	bl	8002014 <HAL_DCMI_Start_DMA>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000000 	.word	0x20000000
 800083c:	20009640 	.word	0x20009640
 8000840:	2000963c 	.word	0x2000963c
 8000844:	20000040 	.word	0x20000040
 8000848:	20009720 	.word	0x20009720

0800084c <HAL_DCMI_FrameEventCallback>:

//when the entire frame is captured send it
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

	uint16_t rowSize = 160; //in pixels
 8000854:	23a0      	movs	r3, #160	; 0xa0
 8000856:	827b      	strh	r3, [r7, #18]
	uint16_t columnSize = 120; //in pixels
 8000858:	2378      	movs	r3, #120	; 0x78
 800085a:	823b      	strh	r3, [r7, #16]
	uint16_t rowSizeBytes = 160*2; //one pixel 16 bit (2 bytes)
 800085c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000860:	81fb      	strh	r3, [r7, #14]

	char header[] = "CAM";
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <HAL_DCMI_FrameEventCallback+0x78>)
 8000864:	60bb      	str	r3, [r7, #8]

	//send one row of picture at a time with a header
	for(int i=0;i<columnSize;i++)
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	8a3b      	ldrh	r3, [r7, #16]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	429a      	cmp	r2, r3
 8000870:	da24      	bge.n	80008bc <HAL_DCMI_FrameEventCallback+0x70>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)header,strlen(header), HAL_MAX_DELAY);
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fcc4 	bl	8000204 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	f107 0108 	add.w	r1, r7, #8
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	480f      	ldr	r0, [pc, #60]	; (80008c8 <HAL_DCMI_FrameEventCallback+0x7c>)
 800088a:	f005 fb4c 	bl	8005f26 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)&img[i*rowSize/2], rowSizeBytes, HAL_MAX_DELAY);
 800088e:	8a7b      	ldrh	r3, [r7, #18]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	fb02 f303 	mul.w	r3, r2, r3
 8000896:	0fda      	lsrs	r2, r3, #31
 8000898:	4413      	add	r3, r2
 800089a:	105b      	asrs	r3, r3, #1
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <HAL_DCMI_FrameEventCallback+0x80>)
 80008a0:	1899      	adds	r1, r3, r2
 80008a2:	89fa      	ldrh	r2, [r7, #14]
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	4807      	ldr	r0, [pc, #28]	; (80008c8 <HAL_DCMI_FrameEventCallback+0x7c>)
 80008aa:	f005 fb3c 	bl	8005f26 <HAL_UART_Transmit>
		HAL_Delay(2);
 80008ae:	2002      	movs	r0, #2
 80008b0:	f001 fa32 	bl	8001d18 <HAL_Delay>
	for(int i=0;i<columnSize;i++)
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	3301      	adds	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	e7d6      	b.n	800086a <HAL_DCMI_FrameEventCallback+0x1e>
	}


}
 80008bc:	bf00      	nop
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	004d4143 	.word	0x004d4143
 80008c8:	20009770 	.word	0x20009770
 80008cc:	20000040 	.word	0x20000040

080008d0 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f000 f826 	bl	800092e <_ZSt12__miter_baseIPhET_S1_>
 80008e2:	4604      	mov	r4, r0
 80008e4:	68b8      	ldr	r0, [r7, #8]
 80008e6:	f000 f822 	bl	800092e <_ZSt12__miter_baseIPhET_S1_>
 80008ea:	4603      	mov	r3, r0
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	4619      	mov	r1, r3
 80008f0:	4620      	mov	r0, r4
 80008f2:	f000 f827 	bl	8000944 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 80008f6:	4603      	mov	r3, r0
    }
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd90      	pop	{r4, r7, pc}

08000900 <_ZSt4fillIPmiEvT_S1_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f000 f83c 	bl	800098a <_ZSt12__niter_baseIPmET_S1_>
 8000912:	4604      	mov	r4, r0
 8000914:	68b8      	ldr	r0, [r7, #8]
 8000916:	f000 f838 	bl	800098a <_ZSt12__niter_baseIPmET_S1_>
 800091a:	4603      	mov	r3, r0
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	4619      	mov	r1, r3
 8000920:	4620      	mov	r0, r4
 8000922:	f000 f83d 	bl	80009a0 <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
		    __value);
    }
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	bd90      	pop	{r4, r7, pc}

0800092e <_ZSt12__miter_baseIPhET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000944:	b5b0      	push	{r4, r5, r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f000 f83f 	bl	80009d4 <_ZSt12__niter_baseIPhET_S1_>
 8000956:	4604      	mov	r4, r0
 8000958:	68b8      	ldr	r0, [r7, #8]
 800095a:	f000 f83b 	bl	80009d4 <_ZSt12__niter_baseIPhET_S1_>
 800095e:	4605      	mov	r5, r0
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f836 	bl	80009d4 <_ZSt12__niter_baseIPhET_S1_>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4629      	mov	r1, r5
 800096e:	4620      	mov	r0, r4
 8000970:	f000 f83b 	bl	80009ea <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8000974:	4602      	mov	r2, r0
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f847 	bl	8000a0e <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8000980:	4603      	mov	r3, r0
    }
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bdb0      	pop	{r4, r5, r7, pc}

0800098a <_ZSt12__niter_baseIPmET_S1_>:
    __niter_base(_Iterator __it)
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 80009a0:	b480      	push	{r7}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d006      	beq.n	80009c8 <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3304      	adds	r3, #4
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e7f4      	b.n	80009b2 <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 80009c8:	bf00      	nop
 80009ca:	371c      	adds	r7, #28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    { return __it; }
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80009f6:	2301      	movs	r3, #1
 80009f8:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f811 	bl	8000a26 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8000a04:	4603      	mov	r3, r0
    }
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
    { return __res; }
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d005      	beq.n	8000a4c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	461a      	mov	r2, r3
 8000a44:	68f9      	ldr	r1, [r7, #12]
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f005 fd68 	bl	800651c <memmove>
	  return __result + _Num;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	4413      	add	r3, r2
	}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5e:	f001 f8e9 	bl	8001c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a62:	f000 f80d 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a66:	f000 f917 	bl	8000c98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a6a:	f000 f8f5 	bl	8000c58 <MX_DMA_Init>
  MX_DCMI_Init();
 8000a6e:	f000 f867 	bl	8000b40 <MX_DCMI_Init>
  MX_USART2_UART_Init();
 8000a72:	f000 f8c7 	bl	8000c04 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000a76:	f000 f897 	bl	8000ba8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  Camera_init();
 8000a7a:	f7ff fead 	bl	80007d8 <Camera_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <main+0x24>

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	2234      	movs	r2, #52	; 0x34
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f005 fd5e 	bl	8006550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <SystemClock_Config+0xb8>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a22      	ldr	r2, [pc, #136]	; (8000b38 <SystemClock_Config+0xb8>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <SystemClock_Config+0xb8>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <SystemClock_Config+0xbc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <SystemClock_Config+0xbc>)
 8000ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <SystemClock_Config+0xbc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4618      	mov	r0, r3
 8000af6:	f004 ff2b 	bl	8005950 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b00:	f000 f900 	bl	8000d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 fca0 	bl	8005464 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b2a:	f000 f8eb 	bl	8000d04 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3750      	adds	r7, #80	; 0x50
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40007000 	.word	0x40007000

08000b40 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <MX_DCMI_Init+0x64>)
 8000b48:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b52:	2220      	movs	r2, #32
 8000b54:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_DCMI_Init+0x60>)
 8000b8e:	f001 fc29 	bl	80023e4 <HAL_DCMI_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000b98:	f000 f8b4 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20009720 	.word	0x20009720
 8000ba4:	50050000 	.word	0x50050000

08000ba8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_I2C3_Init+0x50>)
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <MX_I2C3_Init+0x54>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_I2C3_Init+0x50>)
 8000bb4:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_I2C3_Init+0x58>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_I2C3_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_I2C3_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_I2C3_Init+0x50>)
 8000bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_I2C3_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_I2C3_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_I2C3_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_I2C3_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_I2C3_Init+0x50>)
 8000be6:	f003 fc77 	bl	80044d8 <HAL_I2C_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000bf0:	f000 f888 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000966c 	.word	0x2000966c
 8000bfc:	40005c00 	.word	0x40005c00
 8000c00:	000186a0 	.word	0x000186a0

08000c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <MX_USART2_UART_Init+0x50>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f005 f926 	bl	8005e8c <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c46:	f000 f85d 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20009770 	.word	0x20009770
 8000c54:	40004400 	.word	0x40004400

08000c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2039      	movs	r0, #57	; 0x39
 8000c80:	f001 f96d 	bl	8001f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c84:	2039      	movs	r0, #57	; 0x39
 8000c86:	f001 f986 	bl	8001f96 <HAL_NVIC_EnableIRQ>

}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_GPIO_Init+0x68>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <MX_GPIO_Init+0x68>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_GPIO_Init+0x68>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_GPIO_Init+0x68>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <MX_GPIO_Init+0x68>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MX_GPIO_Init+0x68>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_GPIO_Init+0x68>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <MX_GPIO_Init+0x68>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_GPIO_Init+0x68>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d103      	bne.n	8000d28 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e02c      	b.n	8000d82 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	891a      	ldrh	r2, [r3, #8]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	695a      	ldr	r2, [r3, #20]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <OV5640_RegisterBusIO+0x7c>)
 8000d5c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <OV5640_RegisterBusIO+0x80>)
 8000d62:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d004      	beq.n	8000d7c <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4798      	blx	r3
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	e002      	b.n	8000d82 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8000d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d80:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	08001691 	.word	0x08001691
 8000d90:	080016c3 	.word	0x080016c3

08000d94 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 8091 	bne.w	8000ed2 <OV5640_Init+0x13e>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d80e      	bhi.n	8000dd4 <OV5640_Init+0x40>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00f      	beq.n	8000ddc <OV5640_Init+0x48>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d00c      	beq.n	8000ddc <OV5640_Init+0x48>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d009      	beq.n	8000ddc <OV5640_Init+0x48>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d006      	beq.n	8000ddc <OV5640_Init+0x48>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d003      	beq.n	8000ddc <OV5640_Init+0x48>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	e07a      	b.n	8000ed2 <OV5640_Init+0x13e>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	e01f      	b.n	8000e22 <OV5640_Init+0x8e>
      {
        if (ret != OV5640_ERROR)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d018      	beq.n	8000e1c <OV5640_Init+0x88>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8000dea:	4a3c      	ldr	r2, [pc, #240]	; (8000edc <OV5640_Init+0x148>)
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	885b      	ldrh	r3, [r3, #2]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f103 0018 	add.w	r0, r3, #24
 8000dfe:	4a37      	ldr	r2, [pc, #220]	; (8000edc <OV5640_Init+0x148>)
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000e06:	f107 0217 	add.w	r2, r7, #23
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f000 fc89 	bl	8001722 <ov5640_write_reg>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <OV5640_Init+0x88>
          {
            ret = OV5640_ERROR;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	2bf5      	cmp	r3, #245	; 0xf5
 8000e26:	d9dc      	bls.n	8000de2 <OV5640_Init+0x4e>
          }
        }
      }

      if(ret == OV5640_OK)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d127      	bne.n	8000e7e <OV5640_Init+0xea>
      {
        /* Set configuration for Serial Interface */
        if(pObj->Mode == SERIAL_MODE)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d116      	bne.n	8000e66 <OV5640_Init+0xd2>
        {
          if(OV5640_EnableMIPIMode(pObj) != OV5640_OK)
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f000 fba5 	bl	8001588 <OV5640_EnableMIPIMode>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <OV5640_Init+0xb8>
          {
            ret = OV5640_ERROR;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	e018      	b.n	8000e7e <OV5640_Init+0xea>
          }
          else if(OV5640_SetMIPIVirtualChannel(pObj, pObj->VirtualChannelID) != OV5640_OK)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e50:	4619      	mov	r1, r3
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f000 fbc8 	bl	80015e8 <OV5640_SetMIPIVirtualChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00f      	beq.n	8000e7e <OV5640_Init+0xea>
          {
            ret = OV5640_ERROR;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	e00b      	b.n	8000e7e <OV5640_Init+0xea>
          }
        }
        else
        {
          /* Set configuration for parallel Interface */
          if(OV5640_EnableDVPMode(pObj) != OV5640_OK)
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f000 fb5e 	bl	8001528 <OV5640_EnableDVPMode>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <OV5640_Init+0xe6>
          {
            ret = OV5640_ERROR;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	e001      	b.n	8000e7e <OV5640_Init+0xea>
          }
          else
          {
            ret = OV5640_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
          }
        }
      }


      if (ret == OV5640_OK)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d126      	bne.n	8000ed2 <OV5640_Init+0x13e>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f000 f9be 	bl	8001208 <OV5640_SetResolution>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <OV5640_Init+0x106>
        {
          ret = OV5640_ERROR;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	e01b      	b.n	8000ed2 <OV5640_Init+0x13e>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	f000 f81f 	bl	8000ee0 <OV5640_SetPixelFormat>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <OV5640_Init+0x11c>
        {
          ret = OV5640_ERROR;
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	e010      	b.n	8000ed2 <OV5640_Init+0x13e>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 fa9c 	bl	80013f4 <OV5640_SetPolarities>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <OV5640_Init+0x136>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	61bb      	str	r3, [r7, #24]
 8000ec8:	e003      	b.n	8000ed2 <OV5640_Init+0x13e>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8000ed2:	69bb      	ldr	r3, [r7, #24]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	0800fb78 	.word	0x0800fb78

08000ee0 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00f      	beq.n	8000f14 <OV5640_SetPixelFormat+0x34>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d00c      	beq.n	8000f14 <OV5640_SetPixelFormat+0x34>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d009      	beq.n	8000f14 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b07      	cmp	r3, #7
 8000f04:	d006      	beq.n	8000f14 <OV5640_SetPixelFormat+0x34>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d003      	beq.n	8000f14 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e16a      	b.n	80011ea <OV5640_SetPixelFormat+0x30a>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	2b07      	cmp	r3, #7
 8000f1a:	f200 80c3 	bhi.w	80010a4 <OV5640_SetPixelFormat+0x1c4>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <OV5640_SetPixelFormat+0x44>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08000f9d 	.word	0x08000f9d
 8000f28:	08000f45 	.word	0x08000f45
 8000f2c:	080010a5 	.word	0x080010a5
 8000f30:	080010a5 	.word	0x080010a5
 8000f34:	080010a5 	.word	0x080010a5
 8000f38:	080010a5 	.word	0x080010a5
 8000f3c:	08000ff5 	.word	0x08000ff5
 8000f40:	0800104d 	.word	0x0800104d
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	e024      	b.n	8000f94 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d01d      	beq.n	8000f8e <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8000f52:	4aa8      	ldr	r2, [pc, #672]	; (80011f4 <OV5640_SetPixelFormat+0x314>)
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	885b      	ldrh	r3, [r3, #2]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f103 0018 	add.w	r0, r3, #24
 8000f66:	4aa3      	ldr	r2, [pc, #652]	; (80011f4 <OV5640_SetPixelFormat+0x314>)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000f6e:	f107 020f 	add.w	r2, r7, #15
 8000f72:	2301      	movs	r3, #1
 8000f74:	f000 fbd5 	bl	8001722 <ov5640_write_reg>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e003      	b.n	8000f8e <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8000f86:	2101      	movs	r1, #1
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 fb67 	bl	800165c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	3301      	adds	r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d9d7      	bls.n	8000f4a <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8000f9a:	e0af      	b.n	80010fc <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	e024      	b.n	8000fec <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d01d      	beq.n	8000fe6 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8000faa:	4a93      	ldr	r2, [pc, #588]	; (80011f8 <OV5640_SetPixelFormat+0x318>)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	885b      	ldrh	r3, [r3, #2]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f103 0018 	add.w	r0, r3, #24
 8000fbe:	4a8e      	ldr	r2, [pc, #568]	; (80011f8 <OV5640_SetPixelFormat+0x318>)
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000fc6:	f107 020f 	add.w	r2, r7, #15
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f000 fba9 	bl	8001722 <ov5640_write_reg>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e003      	b.n	8000fe6 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8000fde:	2101      	movs	r1, #1
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 fb3b 	bl	800165c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d9d7      	bls.n	8000fa2 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8000ff2:	e083      	b.n	80010fc <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	e024      	b.n	8001044 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d01d      	beq.n	800103e <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8001002:	4a7e      	ldr	r2, [pc, #504]	; (80011fc <OV5640_SetPixelFormat+0x31c>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	885b      	ldrh	r3, [r3, #2]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f103 0018 	add.w	r0, r3, #24
 8001016:	4a79      	ldr	r2, [pc, #484]	; (80011fc <OV5640_SetPixelFormat+0x31c>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800101e:	f107 020f 	add.w	r2, r7, #15
 8001022:	2301      	movs	r3, #1
 8001024:	f000 fb7d 	bl	8001722 <ov5640_write_reg>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	e003      	b.n	800103e <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001036:	2101      	movs	r1, #1
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 fb0f 	bl	800165c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	3301      	adds	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d9d7      	bls.n	8000ffa <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 800104a:	e057      	b.n	80010fc <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	e024      	b.n	800109c <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d01d      	beq.n	8001096 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800105a:	4a69      	ldr	r2, [pc, #420]	; (8001200 <OV5640_SetPixelFormat+0x320>)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	885b      	ldrh	r3, [r3, #2]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f103 0018 	add.w	r0, r3, #24
 800106e:	4a64      	ldr	r2, [pc, #400]	; (8001200 <OV5640_SetPixelFormat+0x320>)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001076:	f107 020f 	add.w	r2, r7, #15
 800107a:	2301      	movs	r3, #1
 800107c:	f000 fb51 	bl	8001722 <ov5640_write_reg>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e003      	b.n	8001096 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800108e:	2101      	movs	r1, #1
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 fae3 	bl	800165c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	3301      	adds	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d9d7      	bls.n	8001052 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 80010a2:	e02b      	b.n	80010fc <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	e024      	b.n	80010f4 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d01d      	beq.n	80010ee <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80010b2:	4a54      	ldr	r2, [pc, #336]	; (8001204 <OV5640_SetPixelFormat+0x324>)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	885b      	ldrh	r3, [r3, #2]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f103 0018 	add.w	r0, r3, #24
 80010c6:	4a4f      	ldr	r2, [pc, #316]	; (8001204 <OV5640_SetPixelFormat+0x324>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80010ce:	f107 020f 	add.w	r2, r7, #15
 80010d2:	2301      	movs	r3, #1
 80010d4:	f000 fb25 	bl	8001722 <ov5640_write_reg>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	e003      	b.n	80010ee <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80010e6:	2101      	movs	r1, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 fab7 	bl	800165c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	3301      	adds	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d9d7      	bls.n	80010aa <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 80010fa:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d173      	bne.n	80011ea <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f103 0018 	add.w	r0, r3, #24
 8001108:	f107 020f 	add.w	r2, r7, #15
 800110c:	2301      	movs	r3, #1
 800110e:	f643 0121 	movw	r1, #14369	; 0x3821
 8001112:	f000 faef 	bl	80016f4 <ov5640_read_reg>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	e062      	b.n	80011ea <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	b2db      	uxtb	r3, r3
 800112c:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f103 0018 	add.w	r0, r3, #24
 8001134:	f107 020f 	add.w	r2, r7, #15
 8001138:	2301      	movs	r3, #1
 800113a:	f643 0121 	movw	r1, #14369	; 0x3821
 800113e:	f000 faf0 	bl	8001722 <ov5640_write_reg>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e04c      	b.n	80011ea <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f103 0018 	add.w	r0, r3, #24
 8001156:	f107 020f 	add.w	r2, r7, #15
 800115a:	2301      	movs	r3, #1
 800115c:	f243 0102 	movw	r1, #12290	; 0x3002
 8001160:	f000 fac8 	bl	80016f4 <ov5640_read_reg>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e03b      	b.n	80011ea <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	f023 031c 	bic.w	r3, r3, #28
 8001178:	b2db      	uxtb	r3, r3
 800117a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f103 0018 	add.w	r0, r3, #24
 8001182:	f107 020f 	add.w	r2, r7, #15
 8001186:	2301      	movs	r3, #1
 8001188:	f243 0102 	movw	r1, #12290	; 0x3002
 800118c:	f000 fac9 	bl	8001722 <ov5640_write_reg>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e025      	b.n	80011ea <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f103 0018 	add.w	r0, r3, #24
 80011a4:	f107 020f 	add.w	r2, r7, #15
 80011a8:	2301      	movs	r3, #1
 80011aa:	f243 0106 	movw	r1, #12294	; 0x3006
 80011ae:	f000 faa1 	bl	80016f4 <ov5640_read_reg>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e014      	b.n	80011ea <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f103 0018 	add.w	r0, r3, #24
 80011d0:	f107 020f 	add.w	r2, r7, #15
 80011d4:	2301      	movs	r3, #1
 80011d6:	f243 0106 	movw	r1, #12294	; 0x3006
 80011da:	f000 faa2 	bl	8001722 <ov5640_write_reg>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 80011ea:	697b      	ldr	r3, [r7, #20]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0800ff50 	.word	0x0800ff50
 80011f8:	0800ff58 	.word	0x0800ff58
 80011fc:	0800ff60 	.word	0x0800ff60
 8001200:	0800ff68 	.word	0x0800ff68
 8001204:	0800ff70 	.word	0x0800ff70

08001208 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2b04      	cmp	r3, #4
 800121a:	d903      	bls.n	8001224 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e0d8      	b.n	80013d6 <OV5640_SetResolution+0x1ce>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b04      	cmp	r3, #4
 8001228:	f200 80d1 	bhi.w	80013ce <OV5640_SetResolution+0x1c6>
 800122c:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <OV5640_SetResolution+0x2c>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	08001249 	.word	0x08001249
 8001238:	08001297 	.word	0x08001297
 800123c:	080012e5 	.word	0x080012e5
 8001240:	08001333 	.word	0x08001333
 8001244:	08001381 	.word	0x08001381
  {
    /* Initialize OV5640 */
    switch (Resolution)
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	e01f      	b.n	800128e <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d018      	beq.n	8001288 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001256:	4a62      	ldr	r2, [pc, #392]	; (80013e0 <OV5640_SetResolution+0x1d8>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	885b      	ldrh	r3, [r3, #2]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f103 0018 	add.w	r0, r3, #24
 800126a:	4a5d      	ldr	r2, [pc, #372]	; (80013e0 <OV5640_SetResolution+0x1d8>)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001272:	f107 020f 	add.w	r2, r7, #15
 8001276:	2301      	movs	r3, #1
 8001278:	f000 fa53 	bl	8001722 <ov5640_write_reg>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	3301      	adds	r3, #1
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d9dc      	bls.n	800124e <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001294:	e09f      	b.n	80013d6 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	e01f      	b.n	80012dc <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a2:	d018      	beq.n	80012d6 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 80012a4:	4a4f      	ldr	r2, [pc, #316]	; (80013e4 <OV5640_SetResolution+0x1dc>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	885b      	ldrh	r3, [r3, #2]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f103 0018 	add.w	r0, r3, #24
 80012b8:	4a4a      	ldr	r2, [pc, #296]	; (80013e4 <OV5640_SetResolution+0x1dc>)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80012c0:	f107 020f 	add.w	r2, r7, #15
 80012c4:	2301      	movs	r3, #1
 80012c6:	f000 fa2c 	bl	8001722 <ov5640_write_reg>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	3301      	adds	r3, #1
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d9dc      	bls.n	800129c <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 80012e2:	e078      	b.n	80013d6 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	e01f      	b.n	800132a <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d018      	beq.n	8001324 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 80012f2:	4a3d      	ldr	r2, [pc, #244]	; (80013e8 <OV5640_SetResolution+0x1e0>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	885b      	ldrh	r3, [r3, #2]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f103 0018 	add.w	r0, r3, #24
 8001306:	4a38      	ldr	r2, [pc, #224]	; (80013e8 <OV5640_SetResolution+0x1e0>)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800130e:	f107 020f 	add.w	r2, r7, #15
 8001312:	2301      	movs	r3, #1
 8001314:	f000 fa05 	bl	8001722 <ov5640_write_reg>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	3301      	adds	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2b03      	cmp	r3, #3
 800132e:	d9dc      	bls.n	80012ea <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001330:	e051      	b.n	80013d6 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	e01f      	b.n	8001378 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133e:	d018      	beq.n	8001372 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001340:	4a2a      	ldr	r2, [pc, #168]	; (80013ec <OV5640_SetResolution+0x1e4>)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	885b      	ldrh	r3, [r3, #2]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f103 0018 	add.w	r0, r3, #24
 8001354:	4a25      	ldr	r2, [pc, #148]	; (80013ec <OV5640_SetResolution+0x1e4>)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800135c:	f107 020f 	add.w	r2, r7, #15
 8001360:	2301      	movs	r3, #1
 8001362:	f000 f9de 	bl	8001722 <ov5640_write_reg>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	3301      	adds	r3, #1
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d9dc      	bls.n	8001338 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 800137e:	e02a      	b.n	80013d6 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	e01f      	b.n	80013c6 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d018      	beq.n	80013c0 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <OV5640_SetResolution+0x1e8>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	885b      	ldrh	r3, [r3, #2]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f103 0018 	add.w	r0, r3, #24
 80013a2:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <OV5640_SetResolution+0x1e8>)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80013aa:	f107 020f 	add.w	r2, r7, #15
 80013ae:	2301      	movs	r3, #1
 80013b0:	f000 f9b7 	bl	8001722 <ov5640_write_reg>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	3301      	adds	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d9dc      	bls.n	8001386 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 80013cc:	e003      	b.n	80013d6 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	617b      	str	r3, [r7, #20]
        break;
 80013d4:	bf00      	nop
    }
  }

  return ret;
 80013d6:	697b      	ldr	r3, [r7, #20]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	0800ff78 	.word	0x0800ff78
 80013e4:	0800ff88 	.word	0x0800ff88
 80013e8:	0800ff98 	.word	0x0800ff98
 80013ec:	0800ffa8 	.word	0x0800ffa8
 80013f0:	0800ffb8 	.word	0x0800ffb8

080013f4 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d011      	beq.n	8001430 <OV5640_SetPolarities+0x3c>
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <OV5640_SetPolarities+0x24>
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d10b      	bne.n	8001430 <OV5640_SetPolarities+0x3c>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <OV5640_SetPolarities+0x3c>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d006      	beq.n	8001438 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e01e      	b.n	8001476 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	015b      	lsls	r3, r3, #5
 800143e:	b2da      	uxtb	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b2da      	uxtb	r2, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f103 0018 	add.w	r0, r3, #24
 800145c:	f107 0213 	add.w	r2, r7, #19
 8001460:	2301      	movs	r3, #1
 8001462:	f244 7140 	movw	r1, #18240	; 0x4740
 8001466:	f000 f95c 	bl	8001722 <ov5640_write_reg>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001476:	697b      	ldr	r3, [r7, #20]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f103 0018 	add.w	r0, r3, #24
 800149a:	f107 020b 	add.w	r2, r7, #11
 800149e:	2301      	movs	r3, #1
 80014a0:	f243 0108 	movw	r1, #12296	; 0x3008
 80014a4:	f000 f93d 	bl	8001722 <ov5640_write_reg>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e032      	b.n	800151c <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 80014b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f8ce 	bl	800165c <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f103 0018 	add.w	r0, r3, #24
 80014c6:	f107 020b 	add.w	r2, r7, #11
 80014ca:	2301      	movs	r3, #1
 80014cc:	f243 010a 	movw	r1, #12298	; 0x300a
 80014d0:	f000 f910 	bl	80016f4 <ov5640_read_reg>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e01c      	b.n	800151c <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80014e2:	7afb      	ldrb	r3, [r7, #11]
 80014e4:	021a      	lsls	r2, r3, #8
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f103 0018 	add.w	r0, r3, #24
 80014f0:	f107 020b 	add.w	r2, r7, #11
 80014f4:	2301      	movs	r3, #1
 80014f6:	f243 010b 	movw	r1, #12299	; 0x300b
 80014fa:	f000 f8fb 	bl	80016f4 <ov5640_read_reg>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e007      	b.n	800151c <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	7afa      	ldrb	r2, [r7, #11]
 8001512:	431a      	orrs	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <OV5640_EnableDVPMode>:
  * @brief  Enable DVP(Digital Video Port) Mode: Parallel Data Output
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int OV5640_EnableDVPMode(OV5640_Object_t *pObj)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
    {OV5640_SC_PLL_CONTRL2, 0x60},
    {OV5640_SC_PLL_CONTRL3, 0x13},
    {OV5640_SYSTEM_ROOT_DIVIDER, 0x01},
  };

  for(index=0; index < sizeof(regs) / 4U ; index++)
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e01c      	b.n	8001574 <OV5640_EnableDVPMode+0x4c>
  {
    tmp = (uint8_t)regs[index][1];
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <OV5640_EnableDVPMode+0x5c>)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	885b      	ldrh	r3, [r3, #2]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	73fb      	strb	r3, [r7, #15]
    if(ov5640_write_reg(&pObj->Ctx, regs[index][0], &tmp, 1) != OV5640_OK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f103 0018 	add.w	r0, r3, #24
 800154e:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <OV5640_EnableDVPMode+0x5c>)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001556:	f107 020f 	add.w	r2, r7, #15
 800155a:	2301      	movs	r3, #1
 800155c:	f000 f8e1 	bl	8001722 <ov5640_write_reg>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <OV5640_EnableDVPMode+0x46>
    {
      ret = OV5640_ERROR;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	613b      	str	r3, [r7, #16]
      break;
 800156c:	e005      	b.n	800157a <OV5640_EnableDVPMode+0x52>
  for(index=0; index < sizeof(regs) / 4U ; index++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b09      	cmp	r3, #9
 8001578:	d9df      	bls.n	800153a <OV5640_EnableDVPMode+0x12>
    }
  }

  return ret;
 800157a:	693b      	ldr	r3, [r7, #16]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	0800ffc8 	.word	0x0800ffc8

08001588 <OV5640_EnableMIPIMode>:
  * @brief  Enable MIPI (Mobile Industry Processor Interface) Mode: Serial port
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_EnableMIPIMode(OV5640_Object_t *pObj)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  int32_t ret = OV5640_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
    {OV5640_PAD_OUTPUT_VALUE00, 0x70},
    {OV5640_MIPI_CONTROL00, 0x45},
    {OV5640_FRAME_CTRL02, 0x00},
  };

  for(index=0; index < sizeof(regs) / 4U ; index++)
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	e01c      	b.n	80015d4 <OV5640_EnableMIPIMode+0x4c>
  {
    tmp = (uint8_t)regs[index][1];
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <OV5640_EnableMIPIMode+0x5c>)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	885b      	ldrh	r3, [r3, #2]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	73fb      	strb	r3, [r7, #15]
    if(ov5640_write_reg(&pObj->Ctx, regs[index][0], &tmp, 1) != OV5640_OK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f103 0018 	add.w	r0, r3, #24
 80015ae:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <OV5640_EnableMIPIMode+0x5c>)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80015b6:	f107 020f 	add.w	r2, r7, #15
 80015ba:	2301      	movs	r3, #1
 80015bc:	f000 f8b1 	bl	8001722 <ov5640_write_reg>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <OV5640_EnableMIPIMode+0x46>
    {
      ret = OV5640_ERROR;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	617b      	str	r3, [r7, #20]
      break;
 80015cc:	e005      	b.n	80015da <OV5640_EnableMIPIMode+0x52>
  for(index=0; index < sizeof(regs) / 4U ; index++)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	3301      	adds	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	2b0d      	cmp	r3, #13
 80015d8:	d9df      	bls.n	800159a <OV5640_EnableMIPIMode+0x12>
    }
  }

  return ret;
 80015da:	697b      	ldr	r3, [r7, #20]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	0800fff0 	.word	0x0800fff0

080015e8 <OV5640_SetMIPIVirtualChannel>:
  * @param  pObj  pointer to component object
  * @param  vchannel virtual channel for Mipi Mode
  * @retval Component status
  */
int32_t OV5640_SetMIPIVirtualChannel(OV5640_Object_t *pObj, uint32_t vchannel)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, 0x4814, &tmp, 1) != OV5640_OK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f103 0018 	add.w	r0, r3, #24
 80015fc:	f107 020b 	add.w	r2, r7, #11
 8001600:	2301      	movs	r3, #1
 8001602:	f644 0114 	movw	r1, #18452	; 0x4814
 8001606:	f000 f875 	bl	80016f4 <ov5640_read_reg>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <OV5640_SetMIPIVirtualChannel+0x30>
  {
    ret = OV5640_ERROR;
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e01c      	b.n	8001652 <OV5640_SetMIPIVirtualChannel+0x6a>
  }
  else
  {
    tmp &= ~(3 << 6);
 8001618:	7afb      	ldrb	r3, [r7, #11]
 800161a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800161e:	b2db      	uxtb	r3, r3
 8001620:	72fb      	strb	r3, [r7, #11]
    tmp |= (vchannel << 6);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	019b      	lsls	r3, r3, #6
 8001628:	b2da      	uxtb	r2, r3
 800162a:	7afb      	ldrb	r3, [r7, #11]
 800162c:	4313      	orrs	r3, r2
 800162e:	b2db      	uxtb	r3, r3
 8001630:	72fb      	strb	r3, [r7, #11]
    if (ov5640_write_reg(&pObj->Ctx, 0x4814, &tmp, 1) != OV5640_OK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f103 0018 	add.w	r0, r3, #24
 8001638:	f107 020b 	add.w	r2, r7, #11
 800163c:	2301      	movs	r3, #1
 800163e:	f644 0114 	movw	r1, #18452	; 0x4814
 8001642:	f000 f86e 	bl	8001722 <ov5640_write_reg>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <OV5640_SetMIPIVirtualChannel+0x6a>
    {
      ret = OV5640_ERROR;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4798      	blx	r3
 800166c:	4603      	mov	r3, r0
 800166e:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8001670:	bf00      	nop
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	4798      	blx	r3
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d8f5      	bhi.n	8001672 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	461a      	mov	r2, r3
 800169c:	460b      	mov	r3, r1
 800169e:	817b      	strh	r3, [r7, #10]
 80016a0:	4613      	mov	r3, r2
 80016a2:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	691c      	ldr	r4, [r3, #16]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	8918      	ldrh	r0, [r3, #8]
 80016b0:	893b      	ldrh	r3, [r7, #8]
 80016b2:	8979      	ldrh	r1, [r7, #10]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	47a0      	blx	r4
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}

080016c2 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80016c2:	b590      	push	{r4, r7, lr}
 80016c4:	b087      	sub	sp, #28
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	461a      	mov	r2, r3
 80016ce:	460b      	mov	r3, r1
 80016d0:	817b      	strh	r3, [r7, #10]
 80016d2:	4613      	mov	r3, r2
 80016d4:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	68dc      	ldr	r4, [r3, #12]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	8918      	ldrh	r0, [r3, #8]
 80016e2:	893b      	ldrh	r3, [r7, #8]
 80016e4:	8979      	ldrh	r1, [r7, #10]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	47a0      	blx	r4
 80016ea:	4603      	mov	r3, r0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}

080016f4 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	461a      	mov	r2, r3
 8001700:	460b      	mov	r3, r1
 8001702:	817b      	strh	r3, [r7, #10]
 8001704:	4613      	mov	r3, r2
 8001706:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685c      	ldr	r4, [r3, #4]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6898      	ldr	r0, [r3, #8]
 8001710:	893b      	ldrh	r3, [r7, #8]
 8001712:	8979      	ldrh	r1, [r7, #10]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	47a0      	blx	r4
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}

08001722 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8001722:	b590      	push	{r4, r7, lr}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	461a      	mov	r2, r3
 800172e:	460b      	mov	r3, r1
 8001730:	817b      	strh	r3, [r7, #10]
 8001732:	4613      	mov	r3, r2
 8001734:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681c      	ldr	r4, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6898      	ldr	r0, [r3, #8]
 800173e:	893b      	ldrh	r3, [r7, #8]
 8001740:	8979      	ldrh	r1, [r7, #10]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	47a0      	blx	r4
 8001746:	4603      	mov	r3, r0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bd90      	pop	{r4, r7, pc}

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_MspInit+0x4c>)
 8001760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_MspInit+0x4c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_MspInit+0x4c>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_MspInit+0x4c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800

080017a0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a55      	ldr	r2, [pc, #340]	; (8001914 <HAL_DCMI_MspInit+0x174>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	f040 80a4 	bne.w	800190c <HAL_DCMI_MspInit+0x16c>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 80017ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017cc:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6353      	str	r3, [r2, #52]	; 0x34
 80017d4:	4b50      	ldr	r3, [pc, #320]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	4a4b      	ldr	r2, [pc, #300]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6313      	str	r3, [r2, #48]	; 0x30
 80017f0:	4b49      	ldr	r3, [pc, #292]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	4b45      	ldr	r3, [pc, #276]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	4a44      	ldr	r2, [pc, #272]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6313      	str	r3, [r2, #48]	; 0x30
 800180c:	4b42      	ldr	r3, [pc, #264]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	4a3d      	ldr	r2, [pc, #244]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	6313      	str	r3, [r2, #48]	; 0x30
 8001828:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_DCMI_MspInit+0x178>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001834:	2350      	movs	r3, #80	; 0x50
 8001836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001844:	230d      	movs	r3, #13
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	4833      	ldr	r0, [pc, #204]	; (800191c <HAL_DCMI_MspInit+0x17c>)
 8001850:	f002 fbba 	bl	8003fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001854:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8001858:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001866:	230d      	movs	r3, #13
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	482b      	ldr	r0, [pc, #172]	; (8001920 <HAL_DCMI_MspInit+0x180>)
 8001872:	f002 fba9 	bl	8003fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001876:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001888:	230d      	movs	r3, #13
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	4824      	ldr	r0, [pc, #144]	; (8001924 <HAL_DCMI_MspInit+0x184>)
 8001894:	f002 fb98 	bl	8003fc8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001898:	4b23      	ldr	r3, [pc, #140]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 800189a:	4a24      	ldr	r2, [pc, #144]	; (800192c <HAL_DCMI_MspInit+0x18c>)
 800189c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018c0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d0:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018d8:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80018e0:	4811      	ldr	r0, [pc, #68]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018e2:	f000 fdf9 	bl	80024d8 <HAL_DMA_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_DCMI_MspInit+0x150>
    {
      Error_Handler();
 80018ec:	f7ff fa0a 	bl	8000d04 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018f4:	649a      	str	r2, [r3, #72]	; 0x48
 80018f6:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <HAL_DCMI_MspInit+0x188>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	204e      	movs	r0, #78	; 0x4e
 8001902:	f000 fb2c 	bl	8001f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001906:	204e      	movs	r0, #78	; 0x4e
 8001908:	f000 fb45 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800190c:	bf00      	nop
 800190e:	3730      	adds	r7, #48	; 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	50050000 	.word	0x50050000
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020800 	.word	0x40020800
 8001924:	40020400 	.word	0x40020400
 8001928:	200096c0 	.word	0x200096c0
 800192c:	40026428 	.word	0x40026428

08001930 <HAL_DCMI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspDeInit(DCMI_HandleTypeDef* hdcmi)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if(hdcmi->Instance==DCMI)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_DCMI_MspDeInit+0x54>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d11b      	bne.n	800197a <HAL_DCMI_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN DCMI_MspDeInit 0 */

  /* USER CODE END DCMI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DCMI_CLK_DISABLE();
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_DCMI_MspDeInit+0x58>)
 8001944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <HAL_DCMI_MspDeInit+0x58>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6353      	str	r3, [r2, #52]	; 0x34
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_6);
 800194e:	2150      	movs	r1, #80	; 0x50
 8001950:	480e      	ldr	r0, [pc, #56]	; (800198c <HAL_DCMI_MspDeInit+0x5c>)
 8001952:	f002 fccd 	bl	80042f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001956:	f44f 613c 	mov.w	r1, #3008	; 0xbc0
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <HAL_DCMI_MspDeInit+0x60>)
 800195c:	f002 fcc8 	bl	80042f0 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001960:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001964:	480b      	ldr	r0, [pc, #44]	; (8001994 <HAL_DCMI_MspDeInit+0x64>)
 8001966:	f002 fcc3 	bl	80042f0 <HAL_GPIO_DeInit>

    /* DCMI DMA DeInit */
    HAL_DMA_DeInit(hdcmi->DMA_Handle);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196e:	4618      	mov	r0, r3
 8001970:	f000 fe60 	bl	8002634 <HAL_DMA_DeInit>

    /* DCMI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DCMI_IRQn);
 8001974:	204e      	movs	r0, #78	; 0x4e
 8001976:	f000 fb1c 	bl	8001fb2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DCMI_MspDeInit 1 */

  /* USER CODE END DCMI_MspDeInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	50050000 	.word	0x50050000
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020800 	.word	0x40020800
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a28      	ldr	r2, [pc, #160]	; (8001a58 <HAL_I2C_MspInit+0xc0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d14a      	bne.n	8001a50 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_I2C_MspInit+0xc4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_I2C_MspInit+0xc4>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_I2C_MspInit+0xc4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_I2C_MspInit+0xc4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <HAL_I2C_MspInit+0xc4>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_I2C_MspInit+0xc4>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f8:	2312      	movs	r3, #18
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a04:	2304      	movs	r3, #4
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4814      	ldr	r0, [pc, #80]	; (8001a60 <HAL_I2C_MspInit+0xc8>)
 8001a10:	f002 fada 	bl	8003fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a14:	2310      	movs	r3, #16
 8001a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a18:	2312      	movs	r3, #18
 8001a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a24:	2304      	movs	r3, #4
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480d      	ldr	r0, [pc, #52]	; (8001a64 <HAL_I2C_MspInit+0xcc>)
 8001a30:	f002 faca 	bl	8003fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_I2C_MspInit+0xc4>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_I2C_MspInit+0xc4>)
 8001a3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a42:	6413      	str	r3, [r2, #64]	; 0x40
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_I2C_MspInit+0xc4>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40005c00 	.word	0x40005c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020400 	.word	0x40020400

08001a68 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_I2C_MspDeInit+0x38>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10e      	bne.n	8001a98 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_I2C_MspDeInit+0x3c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <HAL_I2C_MspDeInit+0x3c>)
 8001a80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8001a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a8a:	4807      	ldr	r0, [pc, #28]	; (8001aa8 <HAL_I2C_MspDeInit+0x40>)
 8001a8c:	f002 fc30 	bl	80042f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8001a90:	2110      	movs	r1, #16
 8001a92:	4806      	ldr	r0, [pc, #24]	; (8001aac <HAL_I2C_MspDeInit+0x44>)
 8001a94:	f002 fc2c 	bl	80042f0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40005c00 	.word	0x40005c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020400 	.word	0x40020400

08001ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <HAL_UART_MspInit+0x84>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d12b      	bne.n	8001b2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_UART_MspInit+0x88>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_UART_MspInit+0x88>)
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_UART_MspInit+0x88>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_UART_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_UART_MspInit+0x88>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_UART_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b0a:	230c      	movs	r3, #12
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <HAL_UART_MspInit+0x8c>)
 8001b26:	f002 fa4f 	bl	8003fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	; 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40004400 	.word	0x40004400
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <NMI_Handler+0x4>

08001b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <HardFault_Handler+0x4>

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <MemManage_Handler+0x4>

08001b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8c:	f000 f8a4 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <DMA2_Stream1_IRQHandler+0x10>)
 8001b9a:	f000 fe23 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200096c0 	.word	0x200096c0

08001ba8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <DCMI_IRQHandler+0x10>)
 8001bae:	f000 fad1 	bl	8002154 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20009720 	.word	0x20009720

08001bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <SystemInit+0x20>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <SystemInit+0x20>)
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001be6:	490e      	ldr	r1, [pc, #56]	; (8001c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bfc:	4c0b      	ldr	r4, [pc, #44]	; (8001c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c0a:	f7ff ffd7 	bl	8001bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f004 fc53 	bl	80064b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7fe ff22 	bl	8000a5a <main>
  bx  lr    
 8001c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c20:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001c24:	08010058 	.word	0x08010058
  ldr r2, =_sbss
 8001c28:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001c2c:	200097b8 	.word	0x200097b8

08001c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC_IRQHandler>
	...

08001c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_Init+0x40>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_Init+0x40>)
 8001c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_Init+0x40>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 f973 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 f808 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c68:	f7ff fd72 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f999 	bl	8001fce <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 f953 	bl	8001f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000018 	.word	0x20000018
 8001cd0:	20000020 	.word	0x20000020
 8001cd4:	2000001c 	.word	0x2000001c

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000020 	.word	0x20000020
 8001cfc:	200097b4 	.word	0x200097b4

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200097b4 	.word	0x200097b4

08001d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff ffee 	bl	8001d00 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d005      	beq.n	8001d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_Delay+0x44>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d3e:	bf00      	nop
 8001d40:	f7ff ffde 	bl	8001d00 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d8f7      	bhi.n	8001d40 <HAL_Delay+0x28>
  {
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000020 	.word	0x20000020

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db0b      	blt.n	8001dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4907      	ldr	r1, [pc, #28]	; (8001dfc <__NVIC_EnableIRQ+0x38>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db12      	blt.n	8001e38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	490a      	ldr	r1, [pc, #40]	; (8001e44 <__NVIC_DisableIRQ+0x44>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	3320      	adds	r3, #32
 8001e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e2c:	f3bf 8f4f 	dsb	sy
}
 8001e30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e32:	f3bf 8f6f 	isb	sy
}
 8001e36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	; (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	; (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f7ff ff8e 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff05 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff1a 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff8e 	bl	8001e9c <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5d 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff0d 	bl	8001dc4 <__NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff1d 	bl	8001e00 <__NVIC_DisableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ff94 	bl	8001f04 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_DCMI_DeInit>:
  *                the configuration information for DCMI.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DCMI_DeInit(DCMI_HandleTypeDef *hdcmi)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  }
  /* De-Initialize the low level hardware (MSP) */
  hdcmi->MspDeInitCallback(hdcmi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_DCMI_MspDeInit(hdcmi);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fc9e 	bl	8001930 <HAL_DCMI_MspDeInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_RESET;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_DCMI_Start_DMA+0x20>
 8002030:	2302      	movs	r3, #2
 8002032:	e086      	b.n	8002142 <HAL_DCMI_Start_DMA+0x12e>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002052:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0202 	bic.w	r2, r2, #2
 8002062:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6819      	ldr	r1, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	4a34      	ldr	r2, [pc, #208]	; (800214c <HAL_DCMI_Start_DMA+0x138>)
 800207a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002080:	4a33      	ldr	r2, [pc, #204]	; (8002150 <HAL_DCMI_Start_DMA+0x13c>)
 8002082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002088:	2200      	movs	r2, #0
 800208a:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40

  if(Length <= 0xFFFFU)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209e:	d20a      	bcs.n	80020b6 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3328      	adds	r3, #40	; 0x28
 80020aa:	4619      	mov	r1, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	f000 fb1e 	bl	80026f0 <HAL_DMA_Start_IT>
 80020b4:	e038      	b.n	8002128 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ba:	4a24      	ldr	r2, [pc, #144]	; (800214c <HAL_DCMI_Start_DMA+0x138>)
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 80020d0:	e009      	b.n	80020e6 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	085a      	lsrs	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e0:	005a      	lsls	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ee:	d2f0      	bcs.n	80020d2 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	1e9a      	subs	r2, r3, #2
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3328      	adds	r3, #40	; 0x28
 8002118:	4619      	mov	r1, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	f000 fdc8 	bl	8002cb8 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	0800228d 	.word	0x0800228d
 8002150:	080023b7 	.word	0x080023b7

08002154 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d016      	beq.n	800219c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2204      	movs	r2, #4
 8002174:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f043 0202 	orr.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2204      	movs	r2, #4
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218e:	4a2f      	ldr	r2, [pc, #188]	; (800224c <HAL_DCMI_IRQHandler+0xf8>)
 8002190:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fb02 	bl	80027a0 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d016      	beq.n	80021d4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2202      	movs	r2, #2
 80021ac:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2204      	movs	r2, #4
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c6:	4a21      	ldr	r2, [pc, #132]	; (800224c <HAL_DCMI_IRQHandler+0xf8>)
 80021c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fae6 	bl	80027a0 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2210      	movs	r2, #16
 80021e4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f83c 	bl	8002264 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2208      	movs	r2, #8
 80021fc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f83a 	bl	8002278 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d019      	beq.n	8002242 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b02      	cmp	r3, #2
 800221a:	d107      	bne.n	800222c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 021e 	bic.w	r2, r2, #30
 800222a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7fe fb05 	bl	800084c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	080023b7 	.word	0x080023b7

08002250 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d043      	beq.n	800232e <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b2:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d118      	bne.n	80022f2 <DCMI_DMAXferCplt+0x66>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d015      	beq.n	80022f2 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	00da      	lsls	r2, r3, #3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4413      	add	r3, r2
 80022de:	2200      	movs	r2, #0
 80022e0:	4619      	mov	r1, r3
 80022e2:	f001 fe31 	bl	8003f48 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
 80022f0:	e044      	b.n	800237c <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d13c      	bne.n	800237c <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	00da      	lsls	r2, r3, #3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4413      	add	r3, r2
 800231a:	2201      	movs	r2, #1
 800231c:	4619      	mov	r1, r3
 800231e:	f001 fe13 	bl	8003f48 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	1e5a      	subs	r2, r3, #1
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	639a      	str	r2, [r3, #56]	; 0x38
 800232c:	e026      	b.n	800237c <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	e017      	b.n	800237c <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10f      	bne.n	800237c <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002366:	0099      	lsls	r1, r3, #2
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	440a      	add	r2, r1
 8002372:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	429a      	cmp	r2, r3
 8002386:	d112      	bne.n	80023ae <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d103      	bne.n	80023ae <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d003      	beq.n	80023d6 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff ff3a 	bl	8002250 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e069      	b.n	80024ca <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff f9c8 	bl	80017a0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff f9c5 	bl	80017a0 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2202      	movs	r2, #2
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_DCMI_Init+0xf0>)
 800242a:	400b      	ands	r3, r1
 800242c:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002442:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800244e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800245a:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 8002466:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002472:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b10      	cmp	r3, #16
 8002482:	d112      	bne.n	80024aa <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7f1b      	ldrb	r3, [r3, #28]
 8002488:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7f5b      	ldrb	r3, [r3, #29]
 800248e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002490:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7f9b      	ldrb	r3, [r3, #30]
 8002496:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002498:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7fdb      	ldrb	r3, [r3, #31]
 80024a0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80024a6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80024a8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 021e 	orr.w	r2, r2, #30
 80024b8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	ffe0f007 	.word	0xffe0f007

080024d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff fc0c 	bl	8001d00 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e099      	b.n	8002628 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002514:	e00f      	b.n	8002536 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002516:	f7ff fbf3 	bl	8001d00 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b05      	cmp	r3, #5
 8002522:	d908      	bls.n	8002536 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2203      	movs	r2, #3
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e078      	b.n	8002628 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e8      	bne.n	8002516 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <HAL_DMA_Init+0x158>)
 8002550:	4013      	ands	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002562:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	2b04      	cmp	r3, #4
 800258e:	d107      	bne.n	80025a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	4313      	orrs	r3, r2
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0307 	bic.w	r3, r3, #7
 80025b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d117      	bne.n	80025fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00e      	beq.n	80025fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 faef 	bl	8002bc0 <DMA_CheckFifoParam>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2240      	movs	r2, #64	; 0x40
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025f6:	2301      	movs	r3, #1
 80025f8:	e016      	b.n	8002628 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 faa6 	bl	8002b54 <DMA_CalcBaseAndBitshift>
 8002608:	4603      	mov	r3, r0
 800260a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002610:	223f      	movs	r2, #63	; 0x3f
 8002612:	409a      	lsls	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	f010803f 	.word	0xf010803f

08002634 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e050      	b.n	80026e8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d101      	bne.n	8002656 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002652:	2302      	movs	r3, #2
 8002654:	e048      	b.n	80026e8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2221      	movs	r2, #33	; 0x21
 8002694:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa5c 	bl	8002b54 <DMA_CalcBaseAndBitshift>
 800269c:	4603      	mov	r3, r0
 800269e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c8:	223f      	movs	r2, #63	; 0x3f
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_DMA_Start_IT+0x26>
 8002712:	2302      	movs	r3, #2
 8002714:	e040      	b.n	8002798 <HAL_DMA_Start_IT+0xa8>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d12f      	bne.n	800278a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2202      	movs	r2, #2
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f9da 	bl	8002af8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	223f      	movs	r2, #63	; 0x3f
 800274a:	409a      	lsls	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0216 	orr.w	r2, r2, #22
 800275e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d007      	beq.n	8002778 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0208 	orr.w	r2, r2, #8
 8002776:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e005      	b.n	8002796 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002792:	2302      	movs	r3, #2
 8002794:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002796:	7dfb      	ldrb	r3, [r7, #23]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d004      	beq.n	80027be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00c      	b.n	80027d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2205      	movs	r2, #5
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027f0:	4b92      	ldr	r3, [pc, #584]	; (8002a3c <HAL_DMA_IRQHandler+0x258>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a92      	ldr	r2, [pc, #584]	; (8002a40 <HAL_DMA_IRQHandler+0x25c>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0a9b      	lsrs	r3, r3, #10
 80027fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	2208      	movs	r2, #8
 8002810:	409a      	lsls	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01a      	beq.n	8002850 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0204 	bic.w	r2, r2, #4
 8002836:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	2208      	movs	r2, #8
 800283e:	409a      	lsls	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	f043 0201 	orr.w	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	2201      	movs	r2, #1
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	2201      	movs	r2, #1
 8002874:	409a      	lsls	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287e:	f043 0202 	orr.w	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	2204      	movs	r2, #4
 800288c:	409a      	lsls	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00b      	beq.n	80028bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	2204      	movs	r2, #4
 80028aa:	409a      	lsls	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	f043 0204 	orr.w	r2, r3, #4
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	2210      	movs	r2, #16
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d043      	beq.n	8002954 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d03c      	beq.n	8002954 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	2210      	movs	r2, #16
 80028e0:	409a      	lsls	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d018      	beq.n	8002926 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d024      	beq.n	8002954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4798      	blx	r3
 8002912:	e01f      	b.n	8002954 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01b      	beq.n	8002954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
 8002924:	e016      	b.n	8002954 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0208 	bic.w	r2, r2, #8
 8002942:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	2220      	movs	r2, #32
 800295a:	409a      	lsls	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 808e 	beq.w	8002a82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8086 	beq.w	8002a82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2220      	movs	r2, #32
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b05      	cmp	r3, #5
 800298c:	d136      	bne.n	80029fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0216 	bic.w	r2, r2, #22
 800299c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d103      	bne.n	80029be <HAL_DMA_IRQHandler+0x1da>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0208 	bic.w	r2, r2, #8
 80029cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	223f      	movs	r2, #63	; 0x3f
 80029d4:	409a      	lsls	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d07d      	beq.n	8002aee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
        }
        return;
 80029fa:	e078      	b.n	8002aee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01c      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d108      	bne.n	8002a2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d030      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
 8002a28:	e02b      	b.n	8002a82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d027      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
 8002a3a:	e022      	b.n	8002a82 <HAL_DMA_IRQHandler+0x29e>
 8002a3c:	20000018 	.word	0x20000018
 8002a40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0210 	bic.w	r2, r2, #16
 8002a60:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d032      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d022      	beq.n	8002adc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2205      	movs	r2, #5
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d307      	bcc.n	8002aca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f2      	bne.n	8002aae <HAL_DMA_IRQHandler+0x2ca>
 8002ac8:	e000      	b.n	8002acc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002aca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
 8002aec:	e000      	b.n	8002af0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002aee:	bf00      	nop
    }
  }
}
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop

08002af8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d108      	bne.n	8002b38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b36:	e007      	b.n	8002b48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3b10      	subs	r3, #16
 8002b64:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b6e:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <DMA_CalcBaseAndBitshift+0x68>)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d909      	bls.n	8002b96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b8a:	f023 0303 	bic.w	r3, r3, #3
 8002b8e:	1d1a      	adds	r2, r3, #4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	659a      	str	r2, [r3, #88]	; 0x58
 8002b94:	e007      	b.n	8002ba6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	aaaaaaab 	.word	0xaaaaaaab
 8002bbc:	08010040 	.word	0x08010040

08002bc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11f      	bne.n	8002c1a <DMA_CheckFifoParam+0x5a>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d856      	bhi.n	8002c8e <DMA_CheckFifoParam+0xce>
 8002be0:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <DMA_CheckFifoParam+0x28>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002bf9 	.word	0x08002bf9
 8002bec:	08002c0b 	.word	0x08002c0b
 8002bf0:	08002bf9 	.word	0x08002bf9
 8002bf4:	08002c8f 	.word	0x08002c8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d046      	beq.n	8002c92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c08:	e043      	b.n	8002c92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c12:	d140      	bne.n	8002c96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c18:	e03d      	b.n	8002c96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c22:	d121      	bne.n	8002c68 <DMA_CheckFifoParam+0xa8>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d837      	bhi.n	8002c9a <DMA_CheckFifoParam+0xda>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <DMA_CheckFifoParam+0x70>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c41 	.word	0x08002c41
 8002c34:	08002c47 	.word	0x08002c47
 8002c38:	08002c41 	.word	0x08002c41
 8002c3c:	08002c59 	.word	0x08002c59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      break;
 8002c44:	e030      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d025      	beq.n	8002c9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c56:	e022      	b.n	8002c9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c60:	d11f      	bne.n	8002ca2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c66:	e01c      	b.n	8002ca2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d903      	bls.n	8002c76 <DMA_CheckFifoParam+0xb6>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d003      	beq.n	8002c7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c74:	e018      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7a:	e015      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00e      	beq.n	8002ca6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8c:	e00b      	b.n	8002ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e00a      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c92:	bf00      	nop
 8002c94:	e008      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c96:	bf00      	nop
 8002c98:	e006      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e004      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e002      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ca2:	bf00      	nop
 8002ca4:	e000      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop

08002cb8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b80      	cmp	r3, #128	; 0x80
 8002cd0:	d106      	bne.n	8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f001 b913 	b.w	8003f06 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d105      	bne.n	8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2240      	movs	r2, #64	; 0x40
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f001 b901 	b.w	8003f06 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d102      	bne.n	8002d14 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	f001 b8f9 	b.w	8003f06 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	f041 80e7 	bne.w	8003ef8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d46:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f001 f910 	bl	8003f7c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b99      	ldr	r3, [pc, #612]	; (8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d960      	bls.n	8002e2a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a97      	ldr	r2, [pc, #604]	; (8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d057      	beq.n	8002e22 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a96      	ldr	r2, [pc, #600]	; (8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d050      	beq.n	8002e1e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a94      	ldr	r2, [pc, #592]	; (8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d049      	beq.n	8002e1a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a93      	ldr	r2, [pc, #588]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d042      	beq.n	8002e16 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a91      	ldr	r2, [pc, #580]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d03a      	beq.n	8002e10 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a90      	ldr	r2, [pc, #576]	; (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d032      	beq.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a8e      	ldr	r2, [pc, #568]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02a      	beq.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a8d      	ldr	r2, [pc, #564]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d022      	beq.n	8002dfe <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a8b      	ldr	r2, [pc, #556]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01a      	beq.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a8a      	ldr	r2, [pc, #552]	; (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d012      	beq.n	8002df2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a88      	ldr	r2, [pc, #544]	; (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00a      	beq.n	8002dec <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a87      	ldr	r2, [pc, #540]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d102      	bne.n	8002de6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002de0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002de4:	e01e      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002de6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dea:	e01b      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002df0:	e018      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002df2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002df6:	e015      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002df8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dfc:	e012      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e02:	e00f      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e08:	e00c      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e0e:	e009      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e14:	e006      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e16:	2320      	movs	r3, #32
 8002e18:	e004      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e002      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e1e:	2320      	movs	r3, #32
 8002e20:	e000      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e22:	2320      	movs	r3, #32
 8002e24:	4a75      	ldr	r2, [pc, #468]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002e26:	60d3      	str	r3, [r2, #12]
 8002e28:	e150      	b.n	80030cc <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b73      	ldr	r3, [pc, #460]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d960      	bls.n	8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a64      	ldr	r2, [pc, #400]	; (8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d057      	beq.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a62      	ldr	r2, [pc, #392]	; (8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d050      	beq.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a61      	ldr	r2, [pc, #388]	; (8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d049      	beq.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5f      	ldr	r2, [pc, #380]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d042      	beq.n	8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a5e      	ldr	r2, [pc, #376]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d03a      	beq.n	8002ede <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5c      	ldr	r2, [pc, #368]	; (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d032      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a5b      	ldr	r2, [pc, #364]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d02a      	beq.n	8002ed2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a59      	ldr	r2, [pc, #356]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d022      	beq.n	8002ecc <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a58      	ldr	r2, [pc, #352]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d01a      	beq.n	8002ec6 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a56      	ldr	r2, [pc, #344]	; (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d012      	beq.n	8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a55      	ldr	r2, [pc, #340]	; (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00a      	beq.n	8002eba <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a53      	ldr	r2, [pc, #332]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d102      	bne.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002eae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eb2:	e01e      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002eb8:	e01b      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002eba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ebe:	e018      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ec4:	e015      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ec6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eca:	e012      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ecc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ed0:	e00f      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ed2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ed6:	e00c      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ed8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002edc:	e009      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ee2:	e006      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	e004      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e002      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002eec:	2320      	movs	r3, #32
 8002eee:	e000      	b.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	4a42      	ldr	r2, [pc, #264]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002ef4:	6093      	str	r3, [r2, #8]
 8002ef6:	e0e9      	b.n	80030cc <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b41      	ldr	r3, [pc, #260]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002f00:	429a      	cmp	r2, r3
 8002f02:	f240 8083 	bls.w	800300c <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a30      	ldr	r2, [pc, #192]	; (8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d057      	beq.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2e      	ldr	r2, [pc, #184]	; (8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d050      	beq.n	8002fbc <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	; (8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d049      	beq.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d042      	beq.n	8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d03a      	beq.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a28      	ldr	r2, [pc, #160]	; (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d032      	beq.n	8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d02a      	beq.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d022      	beq.n	8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a24      	ldr	r2, [pc, #144]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d01a      	beq.n	8002f96 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a22      	ldr	r2, [pc, #136]	; (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d012      	beq.n	8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00a      	beq.n	8002f8a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1f      	ldr	r2, [pc, #124]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d102      	bne.n	8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002f7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f82:	e01e      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002f84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f88:	e01b      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002f8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f8e:	e018      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002f90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f94:	e015      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002f96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f9a:	e012      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002f9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fa0:	e00f      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fa6:	e00c      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fac:	e009      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002fae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fb2:	e006      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	e004      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e002      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	e000      	b.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	4a11      	ldr	r2, [pc, #68]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8002fc4:	60d3      	str	r3, [r2, #12]
 8002fc6:	e081      	b.n	80030cc <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002fc8:	40026458 	.word	0x40026458
 8002fcc:	40026010 	.word	0x40026010
 8002fd0:	40026410 	.word	0x40026410
 8002fd4:	40026070 	.word	0x40026070
 8002fd8:	40026470 	.word	0x40026470
 8002fdc:	40026028 	.word	0x40026028
 8002fe0:	40026428 	.word	0x40026428
 8002fe4:	40026088 	.word	0x40026088
 8002fe8:	40026488 	.word	0x40026488
 8002fec:	40026040 	.word	0x40026040
 8002ff0:	40026440 	.word	0x40026440
 8002ff4:	400260a0 	.word	0x400260a0
 8002ff8:	400264a0 	.word	0x400264a0
 8002ffc:	40026400 	.word	0x40026400
 8003000:	400260b8 	.word	0x400260b8
 8003004:	40026058 	.word	0x40026058
 8003008:	40026000 	.word	0x40026000
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a96      	ldr	r2, [pc, #600]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d057      	beq.n	80030c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a95      	ldr	r2, [pc, #596]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d050      	beq.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a93      	ldr	r2, [pc, #588]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d049      	beq.n	80030be <HAL_DMAEx_MultiBufferStart_IT+0x406>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a92      	ldr	r2, [pc, #584]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d042      	beq.n	80030ba <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a90      	ldr	r2, [pc, #576]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d03a      	beq.n	80030b4 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a8f      	ldr	r2, [pc, #572]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d032      	beq.n	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a8d      	ldr	r2, [pc, #564]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d02a      	beq.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a8c      	ldr	r2, [pc, #560]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d022      	beq.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a8a      	ldr	r2, [pc, #552]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01a      	beq.n	800309c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a89      	ldr	r2, [pc, #548]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d012      	beq.n	8003096 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a87      	ldr	r2, [pc, #540]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00a      	beq.n	8003090 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a86      	ldr	r2, [pc, #536]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d102      	bne.n	800308a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8003084:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003088:	e01e      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800308a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800308e:	e01b      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003090:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003094:	e018      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003096:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800309a:	e015      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800309c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030a0:	e012      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80030a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030a6:	e00f      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80030a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030ac:	e00c      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80030ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030b2:	e009      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80030b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030b8:	e006      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80030ba:	2320      	movs	r3, #32
 80030bc:	e004      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80030be:	2320      	movs	r3, #32
 80030c0:	e002      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80030c2:	2320      	movs	r3, #32
 80030c4:	e000      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80030c6:	2320      	movs	r3, #32
 80030c8:	4a74      	ldr	r2, [pc, #464]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 80030ca:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b73      	ldr	r3, [pc, #460]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d960      	bls.n	800319a <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a63      	ldr	r2, [pc, #396]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d057      	beq.n	8003192 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a62      	ldr	r2, [pc, #392]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d050      	beq.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a60      	ldr	r2, [pc, #384]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d049      	beq.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5f      	ldr	r2, [pc, #380]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d042      	beq.n	8003186 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a5d      	ldr	r2, [pc, #372]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d03a      	beq.n	8003180 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5c      	ldr	r2, [pc, #368]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d032      	beq.n	800317a <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a5a      	ldr	r2, [pc, #360]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d02a      	beq.n	8003174 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a59      	ldr	r2, [pc, #356]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d022      	beq.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a57      	ldr	r2, [pc, #348]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01a      	beq.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a56      	ldr	r2, [pc, #344]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d012      	beq.n	8003162 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a54      	ldr	r2, [pc, #336]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00a      	beq.n	800315c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a53      	ldr	r2, [pc, #332]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d102      	bne.n	8003156 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8003150:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003154:	e01e      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003156:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800315a:	e01b      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800315c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003160:	e018      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003162:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003166:	e015      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003168:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800316c:	e012      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800316e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003172:	e00f      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003178:	e00c      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800317a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800317e:	e009      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003184:	e006      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003186:	2310      	movs	r3, #16
 8003188:	e004      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800318a:	2310      	movs	r3, #16
 800318c:	e002      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800318e:	2310      	movs	r3, #16
 8003190:	e000      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003192:	2310      	movs	r3, #16
 8003194:	4a43      	ldr	r2, [pc, #268]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003196:	60d3      	str	r3, [r2, #12]
 8003198:	e14f      	b.n	800343a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 80031a2:	429a      	cmp	r2, r3
 80031a4:	f240 8082 	bls.w	80032ac <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2f      	ldr	r2, [pc, #188]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d057      	beq.n	8003262 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2e      	ldr	r2, [pc, #184]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d050      	beq.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2c      	ldr	r2, [pc, #176]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d049      	beq.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2b      	ldr	r2, [pc, #172]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d042      	beq.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d03a      	beq.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a28      	ldr	r2, [pc, #160]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d032      	beq.n	800324a <HAL_DMAEx_MultiBufferStart_IT+0x592>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a26      	ldr	r2, [pc, #152]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02a      	beq.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a25      	ldr	r2, [pc, #148]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_DMAEx_MultiBufferStart_IT+0x586>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a23      	ldr	r2, [pc, #140]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01a      	beq.n	8003238 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a22      	ldr	r2, [pc, #136]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d012      	beq.n	8003232 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a20      	ldr	r2, [pc, #128]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00a      	beq.n	800322c <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d102      	bne.n	8003226 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8003220:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003224:	e01e      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003226:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800322a:	e01b      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800322c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003230:	e018      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003232:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003236:	e015      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003238:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800323c:	e012      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800323e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003242:	e00f      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003248:	e00c      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800324a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800324e:	e009      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003254:	e006      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003256:	2310      	movs	r3, #16
 8003258:	e004      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800325a:	2310      	movs	r3, #16
 800325c:	e002      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800325e:	2310      	movs	r3, #16
 8003260:	e000      	b.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003262:	2310      	movs	r3, #16
 8003264:	4a0f      	ldr	r2, [pc, #60]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003266:	6093      	str	r3, [r2, #8]
 8003268:	e0e7      	b.n	800343a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800326a:	bf00      	nop
 800326c:	40026010 	.word	0x40026010
 8003270:	40026410 	.word	0x40026410
 8003274:	40026070 	.word	0x40026070
 8003278:	40026470 	.word	0x40026470
 800327c:	40026028 	.word	0x40026028
 8003280:	40026428 	.word	0x40026428
 8003284:	40026088 	.word	0x40026088
 8003288:	40026488 	.word	0x40026488
 800328c:	40026040 	.word	0x40026040
 8003290:	40026440 	.word	0x40026440
 8003294:	400260a0 	.word	0x400260a0
 8003298:	400264a0 	.word	0x400264a0
 800329c:	40026000 	.word	0x40026000
 80032a0:	40026458 	.word	0x40026458
 80032a4:	40026400 	.word	0x40026400
 80032a8:	400260b8 	.word	0x400260b8
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	4b96      	ldr	r3, [pc, #600]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d960      	bls.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a94      	ldr	r2, [pc, #592]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d057      	beq.n	8003372 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a93      	ldr	r2, [pc, #588]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d050      	beq.n	800336e <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a91      	ldr	r2, [pc, #580]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d049      	beq.n	800336a <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a90      	ldr	r2, [pc, #576]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d042      	beq.n	8003366 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a8e      	ldr	r2, [pc, #568]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d03a      	beq.n	8003360 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a8d      	ldr	r2, [pc, #564]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d032      	beq.n	800335a <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a8b      	ldr	r2, [pc, #556]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d02a      	beq.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a8a      	ldr	r2, [pc, #552]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d022      	beq.n	800334e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a88      	ldr	r2, [pc, #544]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01a      	beq.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a87      	ldr	r2, [pc, #540]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d012      	beq.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a85      	ldr	r2, [pc, #532]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00a      	beq.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a84      	ldr	r2, [pc, #528]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d102      	bne.n	8003336 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8003330:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003334:	e01e      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003336:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800333a:	e01b      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800333c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003340:	e018      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003342:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003346:	e015      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003348:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800334c:	e012      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800334e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003352:	e00f      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003358:	e00c      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800335a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800335e:	e009      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003364:	e006      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003366:	2310      	movs	r3, #16
 8003368:	e004      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800336a:	2310      	movs	r3, #16
 800336c:	e002      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800336e:	2310      	movs	r3, #16
 8003370:	e000      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003372:	2310      	movs	r3, #16
 8003374:	4a72      	ldr	r2, [pc, #456]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003376:	60d3      	str	r3, [r2, #12]
 8003378:	e05f      	b.n	800343a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a64      	ldr	r2, [pc, #400]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d057      	beq.n	8003434 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a62      	ldr	r2, [pc, #392]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d050      	beq.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a61      	ldr	r2, [pc, #388]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d049      	beq.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a5f      	ldr	r2, [pc, #380]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d042      	beq.n	8003428 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a5e      	ldr	r2, [pc, #376]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d03a      	beq.n	8003422 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5c      	ldr	r2, [pc, #368]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d032      	beq.n	800341c <HAL_DMAEx_MultiBufferStart_IT+0x764>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a5b      	ldr	r2, [pc, #364]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d02a      	beq.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a59      	ldr	r2, [pc, #356]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d022      	beq.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a58      	ldr	r2, [pc, #352]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d01a      	beq.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x752>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a56      	ldr	r2, [pc, #344]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d012      	beq.n	8003404 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a55      	ldr	r2, [pc, #340]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00a      	beq.n	80033fe <HAL_DMAEx_MultiBufferStart_IT+0x746>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a53      	ldr	r2, [pc, #332]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d102      	bne.n	80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 80033f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033f6:	e01e      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80033f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033fc:	e01b      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80033fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003402:	e018      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003404:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003408:	e015      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800340a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800340e:	e012      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003414:	e00f      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800341a:	e00c      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800341c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003420:	e009      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003426:	e006      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003428:	2310      	movs	r3, #16
 800342a:	e004      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800342c:	2310      	movs	r3, #16
 800342e:	e002      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003430:	2310      	movs	r3, #16
 8003432:	e000      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003434:	2310      	movs	r3, #16
 8003436:	4a42      	ldr	r2, [pc, #264]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003438:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	4b40      	ldr	r3, [pc, #256]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8003442:	429a      	cmp	r2, r3
 8003444:	f240 8082 	bls.w	800354c <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a30      	ldr	r2, [pc, #192]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d057      	beq.n	8003502 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2f      	ldr	r2, [pc, #188]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d050      	beq.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0x846>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a2d      	ldr	r2, [pc, #180]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d049      	beq.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2c      	ldr	r2, [pc, #176]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d042      	beq.n	80034f6 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d03a      	beq.n	80034f0 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a29      	ldr	r2, [pc, #164]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d032      	beq.n	80034ea <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d02a      	beq.n	80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a26      	ldr	r2, [pc, #152]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a24      	ldr	r2, [pc, #144]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01a      	beq.n	80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a23      	ldr	r2, [pc, #140]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d012      	beq.n	80034d2 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a21      	ldr	r2, [pc, #132]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00a      	beq.n	80034cc <HAL_DMAEx_MultiBufferStart_IT+0x814>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a20      	ldr	r2, [pc, #128]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d102      	bne.n	80034c6 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 80034c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034c4:	e01e      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80034c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ca:	e01b      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80034cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034d0:	e018      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80034d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034d6:	e015      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80034d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034dc:	e012      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80034de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e2:	e00f      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80034e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e8:	e00c      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80034ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ee:	e009      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80034f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034f4:	e006      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80034f6:	2308      	movs	r3, #8
 80034f8:	e004      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80034fa:	2308      	movs	r3, #8
 80034fc:	e002      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80034fe:	2308      	movs	r3, #8
 8003500:	e000      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003502:	2308      	movs	r3, #8
 8003504:	4a10      	ldr	r2, [pc, #64]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8003506:	60d3      	str	r3, [r2, #12]
 8003508:	e16f      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800350a:	bf00      	nop
 800350c:	40026058 	.word	0x40026058
 8003510:	40026010 	.word	0x40026010
 8003514:	40026410 	.word	0x40026410
 8003518:	40026070 	.word	0x40026070
 800351c:	40026470 	.word	0x40026470
 8003520:	40026028 	.word	0x40026028
 8003524:	40026428 	.word	0x40026428
 8003528:	40026088 	.word	0x40026088
 800352c:	40026488 	.word	0x40026488
 8003530:	40026040 	.word	0x40026040
 8003534:	40026440 	.word	0x40026440
 8003538:	400260a0 	.word	0x400260a0
 800353c:	400264a0 	.word	0x400264a0
 8003540:	40026000 	.word	0x40026000
 8003544:	40026458 	.word	0x40026458
 8003548:	40026400 	.word	0x40026400
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	4b94      	ldr	r3, [pc, #592]	; (80037a4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003554:	429a      	cmp	r2, r3
 8003556:	d960      	bls.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a92      	ldr	r2, [pc, #584]	; (80037a8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d057      	beq.n	8003612 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a91      	ldr	r2, [pc, #580]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d050      	beq.n	800360e <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a8f      	ldr	r2, [pc, #572]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d049      	beq.n	800360a <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a8e      	ldr	r2, [pc, #568]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d042      	beq.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a8c      	ldr	r2, [pc, #560]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d03a      	beq.n	8003600 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a8b      	ldr	r2, [pc, #556]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d032      	beq.n	80035fa <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a89      	ldr	r2, [pc, #548]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d02a      	beq.n	80035f4 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a88      	ldr	r2, [pc, #544]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a86      	ldr	r2, [pc, #536]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01a      	beq.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a85      	ldr	r2, [pc, #532]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d012      	beq.n	80035e2 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a83      	ldr	r2, [pc, #524]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00a      	beq.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0x924>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a82      	ldr	r2, [pc, #520]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d102      	bne.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 80035d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035d4:	e01e      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80035d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035da:	e01b      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80035dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035e0:	e018      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80035e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035e6:	e015      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80035e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035ec:	e012      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80035ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035f2:	e00f      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80035f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035f8:	e00c      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80035fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035fe:	e009      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003604:	e006      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003606:	2308      	movs	r3, #8
 8003608:	e004      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800360a:	2308      	movs	r3, #8
 800360c:	e002      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800360e:	2308      	movs	r3, #8
 8003610:	e000      	b.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003612:	2308      	movs	r3, #8
 8003614:	4a70      	ldr	r2, [pc, #448]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 8003616:	6093      	str	r3, [r2, #8]
 8003618:	e0e7      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	4b6e      	ldr	r3, [pc, #440]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 8003622:	429a      	cmp	r2, r3
 8003624:	d960      	bls.n	80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a5f      	ldr	r2, [pc, #380]	; (80037a8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d057      	beq.n	80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a5d      	ldr	r2, [pc, #372]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d050      	beq.n	80036dc <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a5c      	ldr	r2, [pc, #368]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d049      	beq.n	80036d8 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a5a      	ldr	r2, [pc, #360]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d042      	beq.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a59      	ldr	r2, [pc, #356]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d03a      	beq.n	80036ce <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a57      	ldr	r2, [pc, #348]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d032      	beq.n	80036c8 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a56      	ldr	r2, [pc, #344]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d02a      	beq.n	80036c2 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a54      	ldr	r2, [pc, #336]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d022      	beq.n	80036bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a53      	ldr	r2, [pc, #332]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d01a      	beq.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a51      	ldr	r2, [pc, #324]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d012      	beq.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a50      	ldr	r2, [pc, #320]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00a      	beq.n	80036aa <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a4e      	ldr	r2, [pc, #312]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d102      	bne.n	80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800369e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036a2:	e01e      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a8:	e01b      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036ae:	e018      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036b4:	e015      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036ba:	e012      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036c0:	e00f      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036c6:	e00c      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036cc:	e009      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036d2:	e006      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036d4:	2308      	movs	r3, #8
 80036d6:	e004      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036d8:	2308      	movs	r3, #8
 80036da:	e002      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036dc:	2308      	movs	r3, #8
 80036de:	e000      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80036e0:	2308      	movs	r3, #8
 80036e2:	4a3f      	ldr	r2, [pc, #252]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 80036e4:	60d3      	str	r3, [r2, #12]
 80036e6:	e080      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2e      	ldr	r2, [pc, #184]	; (80037a8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d078      	beq.n	80037e4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a2d      	ldr	r2, [pc, #180]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d050      	beq.n	800379e <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d049      	beq.n	800379a <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2a      	ldr	r2, [pc, #168]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d042      	beq.n	8003796 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a28      	ldr	r2, [pc, #160]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d03a      	beq.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a27      	ldr	r2, [pc, #156]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d032      	beq.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a25      	ldr	r2, [pc, #148]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02a      	beq.n	8003784 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a24      	ldr	r2, [pc, #144]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a22      	ldr	r2, [pc, #136]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01a      	beq.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a21      	ldr	r2, [pc, #132]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d012      	beq.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1f      	ldr	r2, [pc, #124]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00a      	beq.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d102      	bne.n	8003766 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8003760:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003764:	e03f      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376a:	e03c      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800376c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003770:	e039      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003772:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003776:	e036      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003778:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800377c:	e033      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800377e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003782:	e030      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003788:	e02d      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800378a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800378e:	e02a      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003794:	e027      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003796:	2308      	movs	r3, #8
 8003798:	e025      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800379a:	2308      	movs	r3, #8
 800379c:	e023      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800379e:	2308      	movs	r3, #8
 80037a0:	e021      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80037a2:	bf00      	nop
 80037a4:	400260b8 	.word	0x400260b8
 80037a8:	40026010 	.word	0x40026010
 80037ac:	40026410 	.word	0x40026410
 80037b0:	40026070 	.word	0x40026070
 80037b4:	40026470 	.word	0x40026470
 80037b8:	40026028 	.word	0x40026028
 80037bc:	40026428 	.word	0x40026428
 80037c0:	40026088 	.word	0x40026088
 80037c4:	40026488 	.word	0x40026488
 80037c8:	40026040 	.word	0x40026040
 80037cc:	40026440 	.word	0x40026440
 80037d0:	400260a0 	.word	0x400260a0
 80037d4:	400264a0 	.word	0x400264a0
 80037d8:	40026400 	.word	0x40026400
 80037dc:	40026058 	.word	0x40026058
 80037e0:	40026000 	.word	0x40026000
 80037e4:	2308      	movs	r3, #8
 80037e6:	4a9a      	ldr	r2, [pc, #616]	; (8003a50 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80037e8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	4b98      	ldr	r3, [pc, #608]	; (8003a54 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d960      	bls.n	80038b8 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a97      	ldr	r2, [pc, #604]	; (8003a58 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d057      	beq.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a95      	ldr	r2, [pc, #596]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d050      	beq.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a94      	ldr	r2, [pc, #592]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d049      	beq.n	80038a8 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a92      	ldr	r2, [pc, #584]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d042      	beq.n	80038a4 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a91      	ldr	r2, [pc, #580]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d03a      	beq.n	800389e <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a8f      	ldr	r2, [pc, #572]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d032      	beq.n	8003898 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a8e      	ldr	r2, [pc, #568]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d02a      	beq.n	8003892 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a8c      	ldr	r2, [pc, #560]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d022      	beq.n	800388c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a8b      	ldr	r2, [pc, #556]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d01a      	beq.n	8003886 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a89      	ldr	r2, [pc, #548]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d012      	beq.n	8003880 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a88      	ldr	r2, [pc, #544]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00a      	beq.n	800387a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a86      	ldr	r2, [pc, #536]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d102      	bne.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 800386e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003872:	e01e      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003878:	e01b      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800387a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800387e:	e018      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003884:	e015      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003886:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800388a:	e012      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800388c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003890:	e00f      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003896:	e00c      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800389c:	e009      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800389e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a2:	e006      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80038a4:	2304      	movs	r3, #4
 80038a6:	e004      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80038a8:	2304      	movs	r3, #4
 80038aa:	e002      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80038ac:	2304      	movs	r3, #4
 80038ae:	e000      	b.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80038b0:	2304      	movs	r3, #4
 80038b2:	4a75      	ldr	r2, [pc, #468]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 80038b4:	60d3      	str	r3, [r2, #12]
 80038b6:	e151      	b.n	8003b5c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	4b73      	ldr	r3, [pc, #460]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d960      	bls.n	8003986 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a63      	ldr	r2, [pc, #396]	; (8003a58 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d057      	beq.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a62      	ldr	r2, [pc, #392]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d050      	beq.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a60      	ldr	r2, [pc, #384]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d049      	beq.n	8003976 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a5f      	ldr	r2, [pc, #380]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d042      	beq.n	8003972 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a5d      	ldr	r2, [pc, #372]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d03a      	beq.n	800396c <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a5c      	ldr	r2, [pc, #368]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d032      	beq.n	8003966 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a5a      	ldr	r2, [pc, #360]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d02a      	beq.n	8003960 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a59      	ldr	r2, [pc, #356]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d022      	beq.n	800395a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a57      	ldr	r2, [pc, #348]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01a      	beq.n	8003954 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a56      	ldr	r2, [pc, #344]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d012      	beq.n	800394e <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a54      	ldr	r2, [pc, #336]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00a      	beq.n	8003948 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a53      	ldr	r2, [pc, #332]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d102      	bne.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 800393c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003940:	e01e      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003942:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003946:	e01b      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003948:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800394c:	e018      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800394e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003952:	e015      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003954:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003958:	e012      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800395a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800395e:	e00f      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003964:	e00c      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800396a:	e009      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800396c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003970:	e006      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003972:	2304      	movs	r3, #4
 8003974:	e004      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003976:	2304      	movs	r3, #4
 8003978:	e002      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800397a:	2304      	movs	r3, #4
 800397c:	e000      	b.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800397e:	2304      	movs	r3, #4
 8003980:	4a41      	ldr	r2, [pc, #260]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003982:	6093      	str	r3, [r2, #8]
 8003984:	e0ea      	b.n	8003b5c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	4b40      	ldr	r3, [pc, #256]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 800398e:	429a      	cmp	r2, r3
 8003990:	f240 8084 	bls.w	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d07a      	beq.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2e      	ldr	r2, [pc, #184]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d050      	beq.n	8003a4a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2c      	ldr	r2, [pc, #176]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d049      	beq.n	8003a46 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2b      	ldr	r2, [pc, #172]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d042      	beq.n	8003a42 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a29      	ldr	r2, [pc, #164]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d03a      	beq.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a28      	ldr	r2, [pc, #160]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d032      	beq.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a26      	ldr	r2, [pc, #152]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d02a      	beq.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d022      	beq.n	8003a2a <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a23      	ldr	r2, [pc, #140]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01a      	beq.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d012      	beq.n	8003a1e <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00a      	beq.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d102      	bne.n	8003a12 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8003a0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a10:	e041      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a16:	e03e      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a1c:	e03b      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a1e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a22:	e038      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a28:	e035      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a2e:	e032      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a34:	e02f      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a3a:	e02c      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a40:	e029      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a42:	2304      	movs	r3, #4
 8003a44:	e027      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a46:	2304      	movs	r3, #4
 8003a48:	e025      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	e023      	b.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003a4e:	bf00      	nop
 8003a50:	40026000 	.word	0x40026000
 8003a54:	40026458 	.word	0x40026458
 8003a58:	40026010 	.word	0x40026010
 8003a5c:	40026410 	.word	0x40026410
 8003a60:	40026070 	.word	0x40026070
 8003a64:	40026470 	.word	0x40026470
 8003a68:	40026028 	.word	0x40026028
 8003a6c:	40026428 	.word	0x40026428
 8003a70:	40026088 	.word	0x40026088
 8003a74:	40026488 	.word	0x40026488
 8003a78:	40026040 	.word	0x40026040
 8003a7c:	40026440 	.word	0x40026440
 8003a80:	400260a0 	.word	0x400260a0
 8003a84:	400264a0 	.word	0x400264a0
 8003a88:	40026400 	.word	0x40026400
 8003a8c:	400260b8 	.word	0x400260b8
 8003a90:	40026058 	.word	0x40026058
 8003a94:	2304      	movs	r3, #4
 8003a96:	4a94      	ldr	r2, [pc, #592]	; (8003ce8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003a98:	60d3      	str	r3, [r2, #12]
 8003a9a:	e05f      	b.n	8003b5c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a92      	ldr	r2, [pc, #584]	; (8003cec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d057      	beq.n	8003b56 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a91      	ldr	r2, [pc, #580]	; (8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d050      	beq.n	8003b52 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a8f      	ldr	r2, [pc, #572]	; (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d049      	beq.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a8e      	ldr	r2, [pc, #568]	; (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d042      	beq.n	8003b4a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a8c      	ldr	r2, [pc, #560]	; (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d03a      	beq.n	8003b44 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a8b      	ldr	r2, [pc, #556]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d032      	beq.n	8003b3e <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a89      	ldr	r2, [pc, #548]	; (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d02a      	beq.n	8003b38 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a88      	ldr	r2, [pc, #544]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d022      	beq.n	8003b32 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a86      	ldr	r2, [pc, #536]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01a      	beq.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a85      	ldr	r2, [pc, #532]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d012      	beq.n	8003b26 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a83      	ldr	r2, [pc, #524]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00a      	beq.n	8003b20 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a82      	ldr	r2, [pc, #520]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d102      	bne.n	8003b1a <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8003b14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b18:	e01e      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b1e:	e01b      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b24:	e018      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b2a:	e015      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b30:	e012      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b36:	e00f      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b3c:	e00c      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b42:	e009      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b48:	e006      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	e004      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b4e:	2304      	movs	r3, #4
 8003b50:	e002      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b52:	2304      	movs	r3, #4
 8003b54:	e000      	b.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b56:	2304      	movs	r3, #4
 8003b58:	4a63      	ldr	r2, [pc, #396]	; (8003ce8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003b5a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	4b6e      	ldr	r3, [pc, #440]	; (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d95c      	bls.n	8003c22 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5f      	ldr	r2, [pc, #380]	; (8003cec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d053      	beq.n	8003c1a <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a5e      	ldr	r2, [pc, #376]	; (8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d04c      	beq.n	8003c16 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a5c      	ldr	r2, [pc, #368]	; (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d045      	beq.n	8003c12 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a5b      	ldr	r2, [pc, #364]	; (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d03e      	beq.n	8003c0e <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a59      	ldr	r2, [pc, #356]	; (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d037      	beq.n	8003c0a <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a58      	ldr	r2, [pc, #352]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d030      	beq.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a56      	ldr	r2, [pc, #344]	; (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d029      	beq.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a55      	ldr	r2, [pc, #340]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d022      	beq.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a53      	ldr	r2, [pc, #332]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01a      	beq.n	8003bf8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a52      	ldr	r2, [pc, #328]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d012      	beq.n	8003bf2 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a50      	ldr	r2, [pc, #320]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00a      	beq.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a4f      	ldr	r2, [pc, #316]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d102      	bne.n	8003be6 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8003be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003be4:	e01a      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003be6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bea:	e017      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bf0:	e014      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bf6:	e011      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bfc:	e00e      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003bfe:	2340      	movs	r3, #64	; 0x40
 8003c00:	e00c      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003c02:	2340      	movs	r3, #64	; 0x40
 8003c04:	e00a      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003c06:	2340      	movs	r3, #64	; 0x40
 8003c08:	e008      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003c0a:	2340      	movs	r3, #64	; 0x40
 8003c0c:	e006      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e004      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e002      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4a40      	ldr	r2, [pc, #256]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003c1e:	60d3      	str	r3, [r2, #12]
 8003c20:	e141      	b.n	8003ea6 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d97c      	bls.n	8003d28 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2e      	ldr	r2, [pc, #184]	; (8003cec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d053      	beq.n	8003ce0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2c      	ldr	r2, [pc, #176]	; (8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d04c      	beq.n	8003cdc <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2b      	ldr	r2, [pc, #172]	; (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d045      	beq.n	8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d03e      	beq.n	8003cd4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a28      	ldr	r2, [pc, #160]	; (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d037      	beq.n	8003cd0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d030      	beq.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a25      	ldr	r2, [pc, #148]	; (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d029      	beq.n	8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d022      	beq.n	8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d01a      	beq.n	8003cbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a20      	ldr	r2, [pc, #128]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d012      	beq.n	8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d102      	bne.n	8003cac <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003caa:	e01a      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003cac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cb0:	e017      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb6:	e014      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cbc:	e011      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cc2:	e00e      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003cc4:	2340      	movs	r3, #64	; 0x40
 8003cc6:	e00c      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003cc8:	2340      	movs	r3, #64	; 0x40
 8003cca:	e00a      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003ccc:	2340      	movs	r3, #64	; 0x40
 8003cce:	e008      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	e006      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e004      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e002      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	4a0f      	ldr	r2, [pc, #60]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003ce4:	6093      	str	r3, [r2, #8]
 8003ce6:	e0de      	b.n	8003ea6 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003ce8:	40026000 	.word	0x40026000
 8003cec:	40026010 	.word	0x40026010
 8003cf0:	40026410 	.word	0x40026410
 8003cf4:	40026070 	.word	0x40026070
 8003cf8:	40026470 	.word	0x40026470
 8003cfc:	40026028 	.word	0x40026028
 8003d00:	40026428 	.word	0x40026428
 8003d04:	40026088 	.word	0x40026088
 8003d08:	40026488 	.word	0x40026488
 8003d0c:	40026040 	.word	0x40026040
 8003d10:	40026440 	.word	0x40026440
 8003d14:	400260a0 	.word	0x400260a0
 8003d18:	400264a0 	.word	0x400264a0
 8003d1c:	40026458 	.word	0x40026458
 8003d20:	40026400 	.word	0x40026400
 8003d24:	400260b8 	.word	0x400260b8
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4b78      	ldr	r3, [pc, #480]	; (8003f10 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d95c      	bls.n	8003dee <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a76      	ldr	r2, [pc, #472]	; (8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d053      	beq.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a75      	ldr	r2, [pc, #468]	; (8003f18 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d04c      	beq.n	8003de2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a73      	ldr	r2, [pc, #460]	; (8003f1c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d045      	beq.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a72      	ldr	r2, [pc, #456]	; (8003f20 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d03e      	beq.n	8003dda <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a70      	ldr	r2, [pc, #448]	; (8003f24 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d037      	beq.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6f      	ldr	r2, [pc, #444]	; (8003f28 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d030      	beq.n	8003dd2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a6d      	ldr	r2, [pc, #436]	; (8003f2c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d029      	beq.n	8003dce <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6c      	ldr	r2, [pc, #432]	; (8003f30 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d022      	beq.n	8003dca <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6a      	ldr	r2, [pc, #424]	; (8003f34 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01a      	beq.n	8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a69      	ldr	r2, [pc, #420]	; (8003f38 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d012      	beq.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a67      	ldr	r2, [pc, #412]	; (8003f3c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00a      	beq.n	8003db8 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a66      	ldr	r2, [pc, #408]	; (8003f40 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d102      	bne.n	8003db2 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003db0:	e01a      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003db6:	e017      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dbc:	e014      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003dbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dc2:	e011      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dc8:	e00e      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003dca:	2340      	movs	r3, #64	; 0x40
 8003dcc:	e00c      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003dce:	2340      	movs	r3, #64	; 0x40
 8003dd0:	e00a      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003dd2:	2340      	movs	r3, #64	; 0x40
 8003dd4:	e008      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	e006      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e004      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e002      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003de6:	2301      	movs	r3, #1
 8003de8:	4a56      	ldr	r2, [pc, #344]	; (8003f44 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003dea:	60d3      	str	r3, [r2, #12]
 8003dec:	e05b      	b.n	8003ea6 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a48      	ldr	r2, [pc, #288]	; (8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d053      	beq.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a46      	ldr	r2, [pc, #280]	; (8003f18 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d04c      	beq.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a45      	ldr	r2, [pc, #276]	; (8003f1c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d045      	beq.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a43      	ldr	r2, [pc, #268]	; (8003f20 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d03e      	beq.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a42      	ldr	r2, [pc, #264]	; (8003f24 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d037      	beq.n	8003e90 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a40      	ldr	r2, [pc, #256]	; (8003f28 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d030      	beq.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a3f      	ldr	r2, [pc, #252]	; (8003f2c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d029      	beq.n	8003e88 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a3d      	ldr	r2, [pc, #244]	; (8003f30 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d022      	beq.n	8003e84 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d01a      	beq.n	8003e7e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a3a      	ldr	r2, [pc, #232]	; (8003f38 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d012      	beq.n	8003e78 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a39      	ldr	r2, [pc, #228]	; (8003f3c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00a      	beq.n	8003e72 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a37      	ldr	r2, [pc, #220]	; (8003f40 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d102      	bne.n	8003e6c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e6a:	e01a      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e70:	e017      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e76:	e014      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e7c:	e011      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e82:	e00e      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e84:	2340      	movs	r3, #64	; 0x40
 8003e86:	e00c      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e88:	2340      	movs	r3, #64	; 0x40
 8003e8a:	e00a      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e8c:	2340      	movs	r3, #64	; 0x40
 8003e8e:	e008      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e90:	2340      	movs	r3, #64	; 0x40
 8003e92:	e006      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e94:	2301      	movs	r3, #1
 8003e96:	e004      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e002      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	4a28      	ldr	r2, [pc, #160]	; (8003f44 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003ea4:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0216 	orr.w	r2, r2, #22
 8003eb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ec4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0208 	orr.w	r2, r2, #8
 8003ee4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e005      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
 8003f02:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40026058 	.word	0x40026058
 8003f14:	40026010 	.word	0x40026010
 8003f18:	40026410 	.word	0x40026410
 8003f1c:	40026070 	.word	0x40026070
 8003f20:	40026470 	.word	0x40026470
 8003f24:	40026028 	.word	0x40026028
 8003f28:	40026428 	.word	0x40026428
 8003f2c:	40026088 	.word	0x40026088
 8003f30:	40026488 	.word	0x40026488
 8003f34:	40026040 	.word	0x40026040
 8003f38:	40026440 	.word	0x40026440
 8003f3c:	400260a0 	.word	0x400260a0
 8003f40:	400264a0 	.word	0x400264a0
 8003f44:	40026000 	.word	0x40026000

08003f48 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	4613      	mov	r3, r2
 8003f54:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d104      	bne.n	8003f66 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	60da      	str	r2, [r3, #12]
 8003f64:	e003      	b.n	8003f6e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d108      	bne.n	8003fac <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003faa:	e007      	b.n	8003fbc <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	60da      	str	r2, [r3, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b089      	sub	sp, #36	; 0x24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e165      	b.n	80042b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	f040 8154 	bne.w	80042aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d005      	beq.n	800401a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004016:	2b02      	cmp	r3, #2
 8004018:	d130      	bne.n	800407c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	2203      	movs	r2, #3
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004050:	2201      	movs	r2, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 0201 	and.w	r2, r3, #1
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b03      	cmp	r3, #3
 8004086:	d017      	beq.n	80040b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	2203      	movs	r2, #3
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d123      	bne.n	800410c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	08da      	lsrs	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3208      	adds	r2, #8
 80040cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	220f      	movs	r2, #15
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	08da      	lsrs	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3208      	adds	r2, #8
 8004106:	69b9      	ldr	r1, [r7, #24]
 8004108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	2203      	movs	r2, #3
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0203 	and.w	r2, r3, #3
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80ae 	beq.w	80042aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	4b5d      	ldr	r3, [pc, #372]	; (80042c8 <HAL_GPIO_Init+0x300>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	4a5c      	ldr	r2, [pc, #368]	; (80042c8 <HAL_GPIO_Init+0x300>)
 8004158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800415c:	6453      	str	r3, [r2, #68]	; 0x44
 800415e:	4b5a      	ldr	r3, [pc, #360]	; (80042c8 <HAL_GPIO_Init+0x300>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800416a:	4a58      	ldr	r2, [pc, #352]	; (80042cc <HAL_GPIO_Init+0x304>)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	089b      	lsrs	r3, r3, #2
 8004170:	3302      	adds	r3, #2
 8004172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	220f      	movs	r2, #15
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43db      	mvns	r3, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4013      	ands	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a4f      	ldr	r2, [pc, #316]	; (80042d0 <HAL_GPIO_Init+0x308>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d025      	beq.n	80041e2 <HAL_GPIO_Init+0x21a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a4e      	ldr	r2, [pc, #312]	; (80042d4 <HAL_GPIO_Init+0x30c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01f      	beq.n	80041de <HAL_GPIO_Init+0x216>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4d      	ldr	r2, [pc, #308]	; (80042d8 <HAL_GPIO_Init+0x310>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d019      	beq.n	80041da <HAL_GPIO_Init+0x212>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4c      	ldr	r2, [pc, #304]	; (80042dc <HAL_GPIO_Init+0x314>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <HAL_GPIO_Init+0x20e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4b      	ldr	r2, [pc, #300]	; (80042e0 <HAL_GPIO_Init+0x318>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00d      	beq.n	80041d2 <HAL_GPIO_Init+0x20a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4a      	ldr	r2, [pc, #296]	; (80042e4 <HAL_GPIO_Init+0x31c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d007      	beq.n	80041ce <HAL_GPIO_Init+0x206>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a49      	ldr	r2, [pc, #292]	; (80042e8 <HAL_GPIO_Init+0x320>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d101      	bne.n	80041ca <HAL_GPIO_Init+0x202>
 80041c6:	2306      	movs	r3, #6
 80041c8:	e00c      	b.n	80041e4 <HAL_GPIO_Init+0x21c>
 80041ca:	2307      	movs	r3, #7
 80041cc:	e00a      	b.n	80041e4 <HAL_GPIO_Init+0x21c>
 80041ce:	2305      	movs	r3, #5
 80041d0:	e008      	b.n	80041e4 <HAL_GPIO_Init+0x21c>
 80041d2:	2304      	movs	r3, #4
 80041d4:	e006      	b.n	80041e4 <HAL_GPIO_Init+0x21c>
 80041d6:	2303      	movs	r3, #3
 80041d8:	e004      	b.n	80041e4 <HAL_GPIO_Init+0x21c>
 80041da:	2302      	movs	r3, #2
 80041dc:	e002      	b.n	80041e4 <HAL_GPIO_Init+0x21c>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_GPIO_Init+0x21c>
 80041e2:	2300      	movs	r3, #0
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	f002 0203 	and.w	r2, r2, #3
 80041ea:	0092      	lsls	r2, r2, #2
 80041ec:	4093      	lsls	r3, r2
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041f4:	4935      	ldr	r1, [pc, #212]	; (80042cc <HAL_GPIO_Init+0x304>)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	3302      	adds	r3, #2
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004202:	4b3a      	ldr	r3, [pc, #232]	; (80042ec <HAL_GPIO_Init+0x324>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004226:	4a31      	ldr	r2, [pc, #196]	; (80042ec <HAL_GPIO_Init+0x324>)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800422c:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <HAL_GPIO_Init+0x324>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004250:	4a26      	ldr	r2, [pc, #152]	; (80042ec <HAL_GPIO_Init+0x324>)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004256:	4b25      	ldr	r3, [pc, #148]	; (80042ec <HAL_GPIO_Init+0x324>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800427a:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <HAL_GPIO_Init+0x324>)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004280:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_GPIO_Init+0x324>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042a4:	4a11      	ldr	r2, [pc, #68]	; (80042ec <HAL_GPIO_Init+0x324>)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3301      	adds	r3, #1
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b0f      	cmp	r3, #15
 80042b4:	f67f ae96 	bls.w	8003fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40013800 	.word	0x40013800
 80042d0:	40020000 	.word	0x40020000
 80042d4:	40020400 	.word	0x40020400
 80042d8:	40020800 	.word	0x40020800
 80042dc:	40020c00 	.word	0x40020c00
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40021400 	.word	0x40021400
 80042e8:	40021800 	.word	0x40021800
 80042ec:	40013c00 	.word	0x40013c00

080042f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	e0c7      	b.n	800449c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800430c:	2201      	movs	r2, #1
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4013      	ands	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	429a      	cmp	r2, r3
 8004324:	f040 80b7 	bne.w	8004496 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004328:	4a62      	ldr	r2, [pc, #392]	; (80044b4 <HAL_GPIO_DeInit+0x1c4>)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	089b      	lsrs	r3, r3, #2
 800432e:	3302      	adds	r3, #2
 8004330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004334:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	220f      	movs	r2, #15
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	4013      	ands	r3, r2
 8004348:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a5a      	ldr	r2, [pc, #360]	; (80044b8 <HAL_GPIO_DeInit+0x1c8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d025      	beq.n	800439e <HAL_GPIO_DeInit+0xae>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a59      	ldr	r2, [pc, #356]	; (80044bc <HAL_GPIO_DeInit+0x1cc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01f      	beq.n	800439a <HAL_GPIO_DeInit+0xaa>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a58      	ldr	r2, [pc, #352]	; (80044c0 <HAL_GPIO_DeInit+0x1d0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d019      	beq.n	8004396 <HAL_GPIO_DeInit+0xa6>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a57      	ldr	r2, [pc, #348]	; (80044c4 <HAL_GPIO_DeInit+0x1d4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <HAL_GPIO_DeInit+0xa2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a56      	ldr	r2, [pc, #344]	; (80044c8 <HAL_GPIO_DeInit+0x1d8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00d      	beq.n	800438e <HAL_GPIO_DeInit+0x9e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a55      	ldr	r2, [pc, #340]	; (80044cc <HAL_GPIO_DeInit+0x1dc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d007      	beq.n	800438a <HAL_GPIO_DeInit+0x9a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a54      	ldr	r2, [pc, #336]	; (80044d0 <HAL_GPIO_DeInit+0x1e0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d101      	bne.n	8004386 <HAL_GPIO_DeInit+0x96>
 8004382:	2306      	movs	r3, #6
 8004384:	e00c      	b.n	80043a0 <HAL_GPIO_DeInit+0xb0>
 8004386:	2307      	movs	r3, #7
 8004388:	e00a      	b.n	80043a0 <HAL_GPIO_DeInit+0xb0>
 800438a:	2305      	movs	r3, #5
 800438c:	e008      	b.n	80043a0 <HAL_GPIO_DeInit+0xb0>
 800438e:	2304      	movs	r3, #4
 8004390:	e006      	b.n	80043a0 <HAL_GPIO_DeInit+0xb0>
 8004392:	2303      	movs	r3, #3
 8004394:	e004      	b.n	80043a0 <HAL_GPIO_DeInit+0xb0>
 8004396:	2302      	movs	r3, #2
 8004398:	e002      	b.n	80043a0 <HAL_GPIO_DeInit+0xb0>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_GPIO_DeInit+0xb0>
 800439e:	2300      	movs	r3, #0
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	f002 0203 	and.w	r2, r2, #3
 80043a6:	0092      	lsls	r2, r2, #2
 80043a8:	4093      	lsls	r3, r2
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d132      	bne.n	8004416 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80043b0:	4b48      	ldr	r3, [pc, #288]	; (80044d4 <HAL_GPIO_DeInit+0x1e4>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	43db      	mvns	r3, r3
 80043b8:	4946      	ldr	r1, [pc, #280]	; (80044d4 <HAL_GPIO_DeInit+0x1e4>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80043be:	4b45      	ldr	r3, [pc, #276]	; (80044d4 <HAL_GPIO_DeInit+0x1e4>)
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	4943      	ldr	r1, [pc, #268]	; (80044d4 <HAL_GPIO_DeInit+0x1e4>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80043cc:	4b41      	ldr	r3, [pc, #260]	; (80044d4 <HAL_GPIO_DeInit+0x1e4>)
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	493f      	ldr	r1, [pc, #252]	; (80044d4 <HAL_GPIO_DeInit+0x1e4>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80043da:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <HAL_GPIO_DeInit+0x1e4>)
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	493c      	ldr	r1, [pc, #240]	; (80044d4 <HAL_GPIO_DeInit+0x1e4>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	220f      	movs	r2, #15
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80043f8:	4a2e      	ldr	r2, [pc, #184]	; (80044b4 <HAL_GPIO_DeInit+0x1c4>)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	3302      	adds	r3, #2
 8004400:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	43da      	mvns	r2, r3
 8004408:	482a      	ldr	r0, [pc, #168]	; (80044b4 <HAL_GPIO_DeInit+0x1c4>)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	400a      	ands	r2, r1
 8004410:	3302      	adds	r3, #2
 8004412:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	2103      	movs	r1, #3
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	401a      	ands	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	08da      	lsrs	r2, r3, #3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3208      	adds	r2, #8
 8004434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	220f      	movs	r2, #15
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	08d2      	lsrs	r2, r2, #3
 800444c:	4019      	ands	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3208      	adds	r2, #8
 8004452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	2103      	movs	r1, #3
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	401a      	ands	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	2101      	movs	r1, #1
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	401a      	ands	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	2103      	movs	r1, #3
 800448a:	fa01 f303 	lsl.w	r3, r1, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	401a      	ands	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	3301      	adds	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b0f      	cmp	r3, #15
 80044a0:	f67f af34 	bls.w	800430c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40013800 	.word	0x40013800
 80044b8:	40020000 	.word	0x40020000
 80044bc:	40020400 	.word	0x40020400
 80044c0:	40020800 	.word	0x40020800
 80044c4:	40020c00 	.word	0x40020c00
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40021400 	.word	0x40021400
 80044d0:	40021800 	.word	0x40021800
 80044d4:	40013c00 	.word	0x40013c00

080044d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e12b      	b.n	8004742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fd fa4a 	bl	8001998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	; 0x24
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800452a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800453a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800453c:	f001 f884 	bl	8005648 <HAL_RCC_GetPCLK1Freq>
 8004540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4a81      	ldr	r2, [pc, #516]	; (800474c <HAL_I2C_Init+0x274>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d807      	bhi.n	800455c <HAL_I2C_Init+0x84>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a80      	ldr	r2, [pc, #512]	; (8004750 <HAL_I2C_Init+0x278>)
 8004550:	4293      	cmp	r3, r2
 8004552:	bf94      	ite	ls
 8004554:	2301      	movls	r3, #1
 8004556:	2300      	movhi	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	e006      	b.n	800456a <HAL_I2C_Init+0x92>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a7d      	ldr	r2, [pc, #500]	; (8004754 <HAL_I2C_Init+0x27c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	bf94      	ite	ls
 8004564:	2301      	movls	r3, #1
 8004566:	2300      	movhi	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0e7      	b.n	8004742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a78      	ldr	r2, [pc, #480]	; (8004758 <HAL_I2C_Init+0x280>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	0c9b      	lsrs	r3, r3, #18
 800457c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4a6a      	ldr	r2, [pc, #424]	; (800474c <HAL_I2C_Init+0x274>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d802      	bhi.n	80045ac <HAL_I2C_Init+0xd4>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3301      	adds	r3, #1
 80045aa:	e009      	b.n	80045c0 <HAL_I2C_Init+0xe8>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	4a69      	ldr	r2, [pc, #420]	; (800475c <HAL_I2C_Init+0x284>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	3301      	adds	r3, #1
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	495c      	ldr	r1, [pc, #368]	; (800474c <HAL_I2C_Init+0x274>)
 80045dc:	428b      	cmp	r3, r1
 80045de:	d819      	bhi.n	8004614 <HAL_I2C_Init+0x13c>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1e59      	subs	r1, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ee:	1c59      	adds	r1, r3, #1
 80045f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045f4:	400b      	ands	r3, r1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_I2C_Init+0x138>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1e59      	subs	r1, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	fbb1 f3f3 	udiv	r3, r1, r3
 8004608:	3301      	adds	r3, #1
 800460a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460e:	e051      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 8004610:	2304      	movs	r3, #4
 8004612:	e04f      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d111      	bne.n	8004640 <HAL_I2C_Init+0x168>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1e58      	subs	r0, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	440b      	add	r3, r1
 800462a:	fbb0 f3f3 	udiv	r3, r0, r3
 800462e:	3301      	adds	r3, #1
 8004630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf0c      	ite	eq
 8004638:	2301      	moveq	r3, #1
 800463a:	2300      	movne	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e012      	b.n	8004666 <HAL_I2C_Init+0x18e>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1e58      	subs	r0, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	0099      	lsls	r1, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	fbb0 f3f3 	udiv	r3, r0, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_I2C_Init+0x196>
 800466a:	2301      	movs	r3, #1
 800466c:	e022      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10e      	bne.n	8004694 <HAL_I2C_Init+0x1bc>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1e58      	subs	r0, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	440b      	add	r3, r1
 8004684:	fbb0 f3f3 	udiv	r3, r0, r3
 8004688:	3301      	adds	r3, #1
 800468a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004692:	e00f      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1e58      	subs	r0, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6859      	ldr	r1, [r3, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	0099      	lsls	r1, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	6809      	ldr	r1, [r1, #0]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6911      	ldr	r1, [r2, #16]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68d2      	ldr	r2, [r2, #12]
 80046ee:	4311      	orrs	r1, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	000186a0 	.word	0x000186a0
 8004750:	001e847f 	.word	0x001e847f
 8004754:	003d08ff 	.word	0x003d08ff
 8004758:	431bde83 	.word	0x431bde83
 800475c:	10624dd3 	.word	0x10624dd3

08004760 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e021      	b.n	80047b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2224      	movs	r2, #36	; 0x24
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd f96c 	bl	8001a68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	461a      	mov	r2, r3
 80047cc:	460b      	mov	r3, r1
 80047ce:	817b      	strh	r3, [r7, #10]
 80047d0:	4613      	mov	r3, r2
 80047d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047d4:	f7fd fa94 	bl	8001d00 <HAL_GetTick>
 80047d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	f040 80e0 	bne.w	80049a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2319      	movs	r3, #25
 80047ee:	2201      	movs	r2, #1
 80047f0:	4970      	ldr	r1, [pc, #448]	; (80049b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fc58 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047fe:	2302      	movs	r3, #2
 8004800:	e0d3      	b.n	80049aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_I2C_Master_Transmit+0x50>
 800480c:	2302      	movs	r3, #2
 800480e:	e0cc      	b.n	80049aa <HAL_I2C_Master_Transmit+0x1ea>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b01      	cmp	r3, #1
 8004824:	d007      	beq.n	8004836 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0201 	orr.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004844:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2221      	movs	r2, #33	; 0x21
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2210      	movs	r2, #16
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	893a      	ldrh	r2, [r7, #8]
 8004866:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a50      	ldr	r2, [pc, #320]	; (80049b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004876:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004878:	8979      	ldrh	r1, [r7, #10]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fac2 	bl	8004e08 <I2C_MasterRequestWrite>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e08d      	b.n	80049aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80048a4:	e066      	b.n	8004974 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	6a39      	ldr	r1, [r7, #32]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fcd2 	bl	8005254 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d107      	bne.n	80048ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e06b      	b.n	80049aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b04      	cmp	r3, #4
 800490e:	d11b      	bne.n	8004948 <HAL_I2C_Master_Transmit+0x188>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	2b00      	cmp	r3, #0
 8004916:	d017      	beq.n	8004948 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	6a39      	ldr	r1, [r7, #32]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fcc2 	bl	80052d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	2b04      	cmp	r3, #4
 800495e:	d107      	bne.n	8004970 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e01a      	b.n	80049aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004978:	2b00      	cmp	r3, #0
 800497a:	d194      	bne.n	80048a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e000      	b.n	80049aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80049a8:	2302      	movs	r3, #2
  }
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	00100002 	.word	0x00100002
 80049b8:	ffff0000 	.word	0xffff0000

080049bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08c      	sub	sp, #48	; 0x30
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	461a      	mov	r2, r3
 80049c8:	460b      	mov	r3, r1
 80049ca:	817b      	strh	r3, [r7, #10]
 80049cc:	4613      	mov	r3, r2
 80049ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049d0:	f7fd f996 	bl	8001d00 <HAL_GetTick>
 80049d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b20      	cmp	r3, #32
 80049e0:	f040 820b 	bne.w	8004dfa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2319      	movs	r3, #25
 80049ea:	2201      	movs	r2, #1
 80049ec:	497c      	ldr	r1, [pc, #496]	; (8004be0 <HAL_I2C_Master_Receive+0x224>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fb5a 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80049fa:	2302      	movs	r3, #2
 80049fc:	e1fe      	b.n	8004dfc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_I2C_Master_Receive+0x50>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e1f7      	b.n	8004dfc <HAL_I2C_Master_Receive+0x440>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d007      	beq.n	8004a32 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2222      	movs	r2, #34	; 0x22
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	893a      	ldrh	r2, [r7, #8]
 8004a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a5c      	ldr	r2, [pc, #368]	; (8004be4 <HAL_I2C_Master_Receive+0x228>)
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a74:	8979      	ldrh	r1, [r7, #10]
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fa46 	bl	8004f0c <I2C_MasterRequestRead>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e1b8      	b.n	8004dfc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d113      	bne.n	8004aba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a92:	2300      	movs	r3, #0
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	623b      	str	r3, [r7, #32]
 8004aa6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e18c      	b.n	8004dd4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d11b      	bne.n	8004afa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e16c      	b.n	8004dd4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d11b      	bne.n	8004b3a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b22:	2300      	movs	r3, #0
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	e14c      	b.n	8004dd4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b60:	e138      	b.n	8004dd4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	f200 80f1 	bhi.w	8004d4e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d123      	bne.n	8004bbc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 fbed 	bl	8005358 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e139      	b.n	8004dfc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bba:	e10b      	b.n	8004dd4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d14e      	bne.n	8004c62 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4906      	ldr	r1, [pc, #24]	; (8004be8 <HAL_I2C_Master_Receive+0x22c>)
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 fa6a 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e10e      	b.n	8004dfc <HAL_I2C_Master_Receive+0x440>
 8004bde:	bf00      	nop
 8004be0:	00100002 	.word	0x00100002
 8004be4:	ffff0000 	.word	0xffff0000
 8004be8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c60:	e0b8      	b.n	8004dd4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4966      	ldr	r1, [pc, #408]	; (8004e04 <HAL_I2C_Master_Receive+0x448>)
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fa1b 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0bf      	b.n	8004dfc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	494f      	ldr	r1, [pc, #316]	; (8004e04 <HAL_I2C_Master_Receive+0x448>)
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f9ed 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e091      	b.n	8004dfc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d4c:	e042      	b.n	8004dd4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fb00 	bl	8005358 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e04c      	b.n	8004dfc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d118      	bne.n	8004dd4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f47f aec2 	bne.w	8004b62 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e000      	b.n	8004dfc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3728      	adds	r7, #40	; 0x28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	00010004 	.word	0x00010004

08004e08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	607a      	str	r2, [r7, #4]
 8004e12:	603b      	str	r3, [r7, #0]
 8004e14:	460b      	mov	r3, r1
 8004e16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d006      	beq.n	8004e32 <I2C_MasterRequestWrite+0x2a>
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d003      	beq.n	8004e32 <I2C_MasterRequestWrite+0x2a>
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e30:	d108      	bne.n	8004e44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e00b      	b.n	8004e5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	2b12      	cmp	r3, #18
 8004e4a:	d107      	bne.n	8004e5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f91d 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00d      	beq.n	8004e90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e82:	d103      	bne.n	8004e8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e035      	b.n	8004efc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e98:	d108      	bne.n	8004eac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e9a:	897b      	ldrh	r3, [r7, #10]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ea8:	611a      	str	r2, [r3, #16]
 8004eaa:	e01b      	b.n	8004ee4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004eac:	897b      	ldrh	r3, [r7, #10]
 8004eae:	11db      	asrs	r3, r3, #7
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	f003 0306 	and.w	r3, r3, #6
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f063 030f 	orn	r3, r3, #15
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	490e      	ldr	r1, [pc, #56]	; (8004f04 <I2C_MasterRequestWrite+0xfc>)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f943 	bl	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e010      	b.n	8004efc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004eda:	897b      	ldrh	r3, [r7, #10]
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	4907      	ldr	r1, [pc, #28]	; (8004f08 <I2C_MasterRequestWrite+0x100>)
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f933 	bl	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	00010008 	.word	0x00010008
 8004f08:	00010002 	.word	0x00010002

08004f0c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f30:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d006      	beq.n	8004f46 <I2C_MasterRequestRead+0x3a>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d003      	beq.n	8004f46 <I2C_MasterRequestRead+0x3a>
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f44:	d108      	bne.n	8004f58 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e00b      	b.n	8004f70 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	2b11      	cmp	r3, #17
 8004f5e:	d107      	bne.n	8004f70 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f893 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00d      	beq.n	8004fa4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f96:	d103      	bne.n	8004fa0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e079      	b.n	8005098 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fac:	d108      	bne.n	8004fc0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fae:	897b      	ldrh	r3, [r7, #10]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	611a      	str	r2, [r3, #16]
 8004fbe:	e05f      	b.n	8005080 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fc0:	897b      	ldrh	r3, [r7, #10]
 8004fc2:	11db      	asrs	r3, r3, #7
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 0306 	and.w	r3, r3, #6
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f063 030f 	orn	r3, r3, #15
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4930      	ldr	r1, [pc, #192]	; (80050a0 <I2C_MasterRequestRead+0x194>)
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f8b9 	bl	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e054      	b.n	8005098 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fee:	897b      	ldrh	r3, [r7, #10]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	4929      	ldr	r1, [pc, #164]	; (80050a4 <I2C_MasterRequestRead+0x198>)
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f8a9 	bl	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e044      	b.n	8005098 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005032:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f831 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00d      	beq.n	8005068 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505a:	d103      	bne.n	8005064 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005062:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e017      	b.n	8005098 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005068:	897b      	ldrh	r3, [r7, #10]
 800506a:	11db      	asrs	r3, r3, #7
 800506c:	b2db      	uxtb	r3, r3
 800506e:	f003 0306 	and.w	r3, r3, #6
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f063 030e 	orn	r3, r3, #14
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4907      	ldr	r1, [pc, #28]	; (80050a4 <I2C_MasterRequestRead+0x198>)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f865 	bl	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	00010008 	.word	0x00010008
 80050a4:	00010002 	.word	0x00010002

080050a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	4613      	mov	r3, r2
 80050b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b8:	e025      	b.n	8005106 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d021      	beq.n	8005106 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fc fe1d 	bl	8001d00 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d116      	bne.n	8005106 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e023      	b.n	800514e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	0c1b      	lsrs	r3, r3, #16
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d10d      	bne.n	800512c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	43da      	mvns	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4013      	ands	r3, r2
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	bf0c      	ite	eq
 8005122:	2301      	moveq	r3, #1
 8005124:	2300      	movne	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	e00c      	b.n	8005146 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	43da      	mvns	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	429a      	cmp	r2, r3
 800514a:	d0b6      	beq.n	80050ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005164:	e051      	b.n	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005174:	d123      	bne.n	80051be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005184:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800518e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f043 0204 	orr.w	r2, r3, #4
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e046      	b.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d021      	beq.n	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c6:	f7fc fd9b 	bl	8001d00 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d302      	bcc.n	80051dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d116      	bne.n	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f043 0220 	orr.w	r2, r3, #32
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e020      	b.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d10c      	bne.n	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	43da      	mvns	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4013      	ands	r3, r2
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	bf14      	ite	ne
 8005226:	2301      	movne	r3, #1
 8005228:	2300      	moveq	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	e00b      	b.n	8005246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	43da      	mvns	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4013      	ands	r3, r2
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	bf14      	ite	ne
 8005240:	2301      	movne	r3, #1
 8005242:	2300      	moveq	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d18d      	bne.n	8005166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005260:	e02d      	b.n	80052be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f8ce 	bl	8005404 <I2C_IsAcknowledgeFailed>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e02d      	b.n	80052ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d021      	beq.n	80052be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527a:	f7fc fd41 	bl	8001d00 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	d302      	bcc.n	8005290 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d116      	bne.n	80052be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e007      	b.n	80052ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c8:	2b80      	cmp	r3, #128	; 0x80
 80052ca:	d1ca      	bne.n	8005262 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052e2:	e02d      	b.n	8005340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f88d 	bl	8005404 <I2C_IsAcknowledgeFailed>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e02d      	b.n	8005350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d021      	beq.n	8005340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fc:	f7fc fd00 	bl	8001d00 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	d302      	bcc.n	8005312 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d116      	bne.n	8005340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e007      	b.n	8005350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b04      	cmp	r3, #4
 800534c:	d1ca      	bne.n	80052e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005364:	e042      	b.n	80053ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b10      	cmp	r3, #16
 8005372:	d119      	bne.n	80053a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0210 	mvn.w	r2, #16
 800537c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e029      	b.n	80053fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a8:	f7fc fcaa 	bl	8001d00 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d302      	bcc.n	80053be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d116      	bne.n	80053ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e007      	b.n	80053fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d1b5      	bne.n	8005366 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541a:	d11b      	bne.n	8005454 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005424:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	f043 0204 	orr.w	r2, r3, #4
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0cc      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005478:	4b68      	ldr	r3, [pc, #416]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d90c      	bls.n	80054a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b65      	ldr	r3, [pc, #404]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548e:	4b63      	ldr	r3, [pc, #396]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0b8      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d020      	beq.n	80054ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054b8:	4b59      	ldr	r3, [pc, #356]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4a58      	ldr	r2, [pc, #352]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d0:	4b53      	ldr	r3, [pc, #332]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4a52      	ldr	r2, [pc, #328]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054dc:	4b50      	ldr	r3, [pc, #320]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	494d      	ldr	r1, [pc, #308]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d044      	beq.n	8005584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d107      	bne.n	8005512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005502:	4b47      	ldr	r3, [pc, #284]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d119      	bne.n	8005542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e07f      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d003      	beq.n	8005522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800551e:	2b03      	cmp	r3, #3
 8005520:	d107      	bne.n	8005532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005522:	4b3f      	ldr	r3, [pc, #252]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e06f      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005532:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e067      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005542:	4b37      	ldr	r3, [pc, #220]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f023 0203 	bic.w	r2, r3, #3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4934      	ldr	r1, [pc, #208]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005550:	4313      	orrs	r3, r2
 8005552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005554:	f7fc fbd4 	bl	8001d00 <HAL_GetTick>
 8005558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555a:	e00a      	b.n	8005572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800555c:	f7fc fbd0 	bl	8001d00 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f241 3288 	movw	r2, #5000	; 0x1388
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e04f      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005572:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 020c 	and.w	r2, r3, #12
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	429a      	cmp	r2, r3
 8005582:	d1eb      	bne.n	800555c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005584:	4b25      	ldr	r3, [pc, #148]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d20c      	bcs.n	80055ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005592:	4b22      	ldr	r3, [pc, #136]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559a:	4b20      	ldr	r3, [pc, #128]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d001      	beq.n	80055ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e032      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055b8:	4b19      	ldr	r3, [pc, #100]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4916      	ldr	r1, [pc, #88]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d009      	beq.n	80055ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	490e      	ldr	r1, [pc, #56]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055ea:	f000 f855 	bl	8005698 <HAL_RCC_GetSysClockFreq>
 80055ee:	4602      	mov	r2, r0
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	490a      	ldr	r1, [pc, #40]	; (8005624 <HAL_RCC_ClockConfig+0x1c0>)
 80055fc:	5ccb      	ldrb	r3, [r1, r3]
 80055fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 8005604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <HAL_RCC_ClockConfig+0x1c8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7fc fb34 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40023c00 	.word	0x40023c00
 8005620:	40023800 	.word	0x40023800
 8005624:	08010028 	.word	0x08010028
 8005628:	20000018 	.word	0x20000018
 800562c:	2000001c 	.word	0x2000001c

08005630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005634:	4b03      	ldr	r3, [pc, #12]	; (8005644 <HAL_RCC_GetHCLKFreq+0x14>)
 8005636:	681b      	ldr	r3, [r3, #0]
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000018 	.word	0x20000018

08005648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800564c:	f7ff fff0 	bl	8005630 <HAL_RCC_GetHCLKFreq>
 8005650:	4602      	mov	r2, r0
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	0a9b      	lsrs	r3, r3, #10
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	4903      	ldr	r1, [pc, #12]	; (800566c <HAL_RCC_GetPCLK1Freq+0x24>)
 800565e:	5ccb      	ldrb	r3, [r1, r3]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40023800 	.word	0x40023800
 800566c:	08010038 	.word	0x08010038

08005670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005674:	f7ff ffdc 	bl	8005630 <HAL_RCC_GetHCLKFreq>
 8005678:	4602      	mov	r2, r0
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	0b5b      	lsrs	r3, r3, #13
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	4903      	ldr	r1, [pc, #12]	; (8005694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005686:	5ccb      	ldrb	r3, [r1, r3]
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40023800 	.word	0x40023800
 8005694:	08010038 	.word	0x08010038

08005698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800569c:	b087      	sub	sp, #28
 800569e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056a0:	2600      	movs	r6, #0
 80056a2:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80056a4:	2600      	movs	r6, #0
 80056a6:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80056a8:	2600      	movs	r6, #0
 80056aa:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80056ac:	2600      	movs	r6, #0
 80056ae:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80056b0:	2600      	movs	r6, #0
 80056b2:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056b4:	4ea3      	ldr	r6, [pc, #652]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80056b6:	68b6      	ldr	r6, [r6, #8]
 80056b8:	f006 060c 	and.w	r6, r6, #12
 80056bc:	2e0c      	cmp	r6, #12
 80056be:	f200 8137 	bhi.w	8005930 <HAL_RCC_GetSysClockFreq+0x298>
 80056c2:	f20f 0c08 	addw	ip, pc, #8
 80056c6:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	08005701 	.word	0x08005701
 80056d0:	08005931 	.word	0x08005931
 80056d4:	08005931 	.word	0x08005931
 80056d8:	08005931 	.word	0x08005931
 80056dc:	08005707 	.word	0x08005707
 80056e0:	08005931 	.word	0x08005931
 80056e4:	08005931 	.word	0x08005931
 80056e8:	08005931 	.word	0x08005931
 80056ec:	0800570d 	.word	0x0800570d
 80056f0:	08005931 	.word	0x08005931
 80056f4:	08005931 	.word	0x08005931
 80056f8:	08005931 	.word	0x08005931
 80056fc:	08005823 	.word	0x08005823
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005700:	4b91      	ldr	r3, [pc, #580]	; (8005948 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005702:	613b      	str	r3, [r7, #16]
       break;
 8005704:	e117      	b.n	8005936 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005706:	4b91      	ldr	r3, [pc, #580]	; (800594c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005708:	613b      	str	r3, [r7, #16]
      break;
 800570a:	e114      	b.n	8005936 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800570c:	4b8d      	ldr	r3, [pc, #564]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005714:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005716:	4b8b      	ldr	r3, [pc, #556]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d024      	beq.n	800576c <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005722:	4b88      	ldr	r3, [pc, #544]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	099b      	lsrs	r3, r3, #6
 8005728:	461a      	mov	r2, r3
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005732:	f04f 0500 	mov.w	r5, #0
 8005736:	ea02 0004 	and.w	r0, r2, r4
 800573a:	ea03 0105 	and.w	r1, r3, r5
 800573e:	4b83      	ldr	r3, [pc, #524]	; (800594c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005740:	fb03 f201 	mul.w	r2, r3, r1
 8005744:	2300      	movs	r3, #0
 8005746:	fb03 f300 	mul.w	r3, r3, r0
 800574a:	4413      	add	r3, r2
 800574c:	4a7f      	ldr	r2, [pc, #508]	; (800594c <HAL_RCC_GetSysClockFreq+0x2b4>)
 800574e:	fba0 0102 	umull	r0, r1, r0, r2
 8005752:	440b      	add	r3, r1
 8005754:	4619      	mov	r1, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	461a      	mov	r2, r3
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	f7fa fd59 	bl	8000214 <__aeabi_uldivmod>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4613      	mov	r3, r2
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e04c      	b.n	8005806 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800576c:	4b75      	ldr	r3, [pc, #468]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	099b      	lsrs	r3, r3, #6
 8005772:	461a      	mov	r2, r3
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	f240 10ff 	movw	r0, #511	; 0x1ff
 800577c:	f04f 0100 	mov.w	r1, #0
 8005780:	ea02 0800 	and.w	r8, r2, r0
 8005784:	ea03 0901 	and.w	r9, r3, r1
 8005788:	4640      	mov	r0, r8
 800578a:	4649      	mov	r1, r9
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	014b      	lsls	r3, r1, #5
 8005796:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800579a:	0142      	lsls	r2, r0, #5
 800579c:	4610      	mov	r0, r2
 800579e:	4619      	mov	r1, r3
 80057a0:	ebb0 0008 	subs.w	r0, r0, r8
 80057a4:	eb61 0109 	sbc.w	r1, r1, r9
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	018b      	lsls	r3, r1, #6
 80057b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057b6:	0182      	lsls	r2, r0, #6
 80057b8:	1a12      	subs	r2, r2, r0
 80057ba:	eb63 0301 	sbc.w	r3, r3, r1
 80057be:	f04f 0000 	mov.w	r0, #0
 80057c2:	f04f 0100 	mov.w	r1, #0
 80057c6:	00d9      	lsls	r1, r3, #3
 80057c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057cc:	00d0      	lsls	r0, r2, #3
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	eb12 0208 	adds.w	r2, r2, r8
 80057d6:	eb43 0309 	adc.w	r3, r3, r9
 80057da:	f04f 0000 	mov.w	r0, #0
 80057de:	f04f 0100 	mov.w	r1, #0
 80057e2:	0299      	lsls	r1, r3, #10
 80057e4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80057e8:	0290      	lsls	r0, r2, #10
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4610      	mov	r0, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	461a      	mov	r2, r3
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	f7fa fd0b 	bl	8000214 <__aeabi_uldivmod>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4613      	mov	r3, r2
 8005804:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005806:	4b4f      	ldr	r3, [pc, #316]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	0c1b      	lsrs	r3, r3, #16
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	3301      	adds	r3, #1
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	fbb2 f3f3 	udiv	r3, r2, r3
 800581e:	613b      	str	r3, [r7, #16]
      break;
 8005820:	e089      	b.n	8005936 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005822:	4948      	ldr	r1, [pc, #288]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005824:	6849      	ldr	r1, [r1, #4]
 8005826:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800582a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800582c:	4945      	ldr	r1, [pc, #276]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800582e:	6849      	ldr	r1, [r1, #4]
 8005830:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005834:	2900      	cmp	r1, #0
 8005836:	d024      	beq.n	8005882 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005838:	4942      	ldr	r1, [pc, #264]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800583a:	6849      	ldr	r1, [r1, #4]
 800583c:	0989      	lsrs	r1, r1, #6
 800583e:	4608      	mov	r0, r1
 8005840:	f04f 0100 	mov.w	r1, #0
 8005844:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005848:	f04f 0500 	mov.w	r5, #0
 800584c:	ea00 0204 	and.w	r2, r0, r4
 8005850:	ea01 0305 	and.w	r3, r1, r5
 8005854:	493d      	ldr	r1, [pc, #244]	; (800594c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005856:	fb01 f003 	mul.w	r0, r1, r3
 800585a:	2100      	movs	r1, #0
 800585c:	fb01 f102 	mul.w	r1, r1, r2
 8005860:	1844      	adds	r4, r0, r1
 8005862:	493a      	ldr	r1, [pc, #232]	; (800594c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005864:	fba2 0101 	umull	r0, r1, r2, r1
 8005868:	1863      	adds	r3, r4, r1
 800586a:	4619      	mov	r1, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	461a      	mov	r2, r3
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	f7fa fcce 	bl	8000214 <__aeabi_uldivmod>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4613      	mov	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e04a      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005882:	4b30      	ldr	r3, [pc, #192]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	099b      	lsrs	r3, r3, #6
 8005888:	461a      	mov	r2, r3
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005892:	f04f 0100 	mov.w	r1, #0
 8005896:	ea02 0400 	and.w	r4, r2, r0
 800589a:	ea03 0501 	and.w	r5, r3, r1
 800589e:	4620      	mov	r0, r4
 80058a0:	4629      	mov	r1, r5
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	014b      	lsls	r3, r1, #5
 80058ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058b0:	0142      	lsls	r2, r0, #5
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	1b00      	subs	r0, r0, r4
 80058b8:	eb61 0105 	sbc.w	r1, r1, r5
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	018b      	lsls	r3, r1, #6
 80058c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058ca:	0182      	lsls	r2, r0, #6
 80058cc:	1a12      	subs	r2, r2, r0
 80058ce:	eb63 0301 	sbc.w	r3, r3, r1
 80058d2:	f04f 0000 	mov.w	r0, #0
 80058d6:	f04f 0100 	mov.w	r1, #0
 80058da:	00d9      	lsls	r1, r3, #3
 80058dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058e0:	00d0      	lsls	r0, r2, #3
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	1912      	adds	r2, r2, r4
 80058e8:	eb45 0303 	adc.w	r3, r5, r3
 80058ec:	f04f 0000 	mov.w	r0, #0
 80058f0:	f04f 0100 	mov.w	r1, #0
 80058f4:	0299      	lsls	r1, r3, #10
 80058f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80058fa:	0290      	lsls	r0, r2, #10
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4610      	mov	r0, r2
 8005902:	4619      	mov	r1, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	461a      	mov	r2, r3
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	f7fa fc82 	bl	8000214 <__aeabi_uldivmod>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4613      	mov	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005918:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	0f1b      	lsrs	r3, r3, #28
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	fbb2 f3f3 	udiv	r3, r2, r3
 800592c:	613b      	str	r3, [r7, #16]
      break;
 800592e:	e002      	b.n	8005936 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005932:	613b      	str	r3, [r7, #16]
      break;
 8005934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005936:	693b      	ldr	r3, [r7, #16]
}
 8005938:	4618      	mov	r0, r3
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005942:	bf00      	nop
 8005944:	40023800 	.word	0x40023800
 8005948:	00f42400 	.word	0x00f42400
 800594c:	017d7840 	.word	0x017d7840

08005950 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e28d      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8083 	beq.w	8005a76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005970:	4b94      	ldr	r3, [pc, #592]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 030c 	and.w	r3, r3, #12
 8005978:	2b04      	cmp	r3, #4
 800597a:	d019      	beq.n	80059b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800597c:	4b91      	ldr	r3, [pc, #580]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005984:	2b08      	cmp	r3, #8
 8005986:	d106      	bne.n	8005996 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005988:	4b8e      	ldr	r3, [pc, #568]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005994:	d00c      	beq.n	80059b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005996:	4b8b      	ldr	r3, [pc, #556]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800599e:	2b0c      	cmp	r3, #12
 80059a0:	d112      	bne.n	80059c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059a2:	4b88      	ldr	r3, [pc, #544]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ae:	d10b      	bne.n	80059c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b0:	4b84      	ldr	r3, [pc, #528]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d05b      	beq.n	8005a74 <HAL_RCC_OscConfig+0x124>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d157      	bne.n	8005a74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e25a      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d0:	d106      	bne.n	80059e0 <HAL_RCC_OscConfig+0x90>
 80059d2:	4b7c      	ldr	r3, [pc, #496]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a7b      	ldr	r2, [pc, #492]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 80059d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	e01d      	b.n	8005a1c <HAL_RCC_OscConfig+0xcc>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e8:	d10c      	bne.n	8005a04 <HAL_RCC_OscConfig+0xb4>
 80059ea:	4b76      	ldr	r3, [pc, #472]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a75      	ldr	r2, [pc, #468]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 80059f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	4b73      	ldr	r3, [pc, #460]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a72      	ldr	r2, [pc, #456]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 80059fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	e00b      	b.n	8005a1c <HAL_RCC_OscConfig+0xcc>
 8005a04:	4b6f      	ldr	r3, [pc, #444]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a6e      	ldr	r2, [pc, #440]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	4b6c      	ldr	r3, [pc, #432]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a6b      	ldr	r2, [pc, #428]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d013      	beq.n	8005a4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7fc f96c 	bl	8001d00 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a2c:	f7fc f968 	bl	8001d00 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b64      	cmp	r3, #100	; 0x64
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e21f      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3e:	4b61      	ldr	r3, [pc, #388]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0xdc>
 8005a4a:	e014      	b.n	8005a76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4c:	f7fc f958 	bl	8001d00 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a54:	f7fc f954 	bl	8001d00 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b64      	cmp	r3, #100	; 0x64
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e20b      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a66:	4b57      	ldr	r3, [pc, #348]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f0      	bne.n	8005a54 <HAL_RCC_OscConfig+0x104>
 8005a72:	e000      	b.n	8005a76 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d06f      	beq.n	8005b62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a82:	4b50      	ldr	r3, [pc, #320]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 030c 	and.w	r3, r3, #12
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d017      	beq.n	8005abe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a8e:	4b4d      	ldr	r3, [pc, #308]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d105      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a9a:	4b4a      	ldr	r3, [pc, #296]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00b      	beq.n	8005abe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa6:	4b47      	ldr	r3, [pc, #284]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005aae:	2b0c      	cmp	r3, #12
 8005ab0:	d11c      	bne.n	8005aec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ab2:	4b44      	ldr	r3, [pc, #272]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d116      	bne.n	8005aec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005abe:	4b41      	ldr	r3, [pc, #260]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x186>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d001      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e1d3      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad6:	4b3b      	ldr	r3, [pc, #236]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4937      	ldr	r1, [pc, #220]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aea:	e03a      	b.n	8005b62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d020      	beq.n	8005b36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af4:	4b34      	ldr	r3, [pc, #208]	; (8005bc8 <HAL_RCC_OscConfig+0x278>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afa:	f7fc f901 	bl	8001d00 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b02:	f7fc f8fd 	bl	8001d00 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e1b4      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b14:	4b2b      	ldr	r3, [pc, #172]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b20:	4b28      	ldr	r3, [pc, #160]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4925      	ldr	r1, [pc, #148]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]
 8005b34:	e015      	b.n	8005b62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b36:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <HAL_RCC_OscConfig+0x278>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fc f8e0 	bl	8001d00 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b44:	f7fc f8dc 	bl	8001d00 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e193      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b56:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d036      	beq.n	8005bdc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b76:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <HAL_RCC_OscConfig+0x27c>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fc f8c0 	bl	8001d00 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b84:	f7fc f8bc 	bl	8001d00 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e173      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0f0      	beq.n	8005b84 <HAL_RCC_OscConfig+0x234>
 8005ba2:	e01b      	b.n	8005bdc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_RCC_OscConfig+0x27c>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005baa:	f7fc f8a9 	bl	8001d00 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb0:	e00e      	b.n	8005bd0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bb2:	f7fc f8a5 	bl	8001d00 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d907      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e15c      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	42470000 	.word	0x42470000
 8005bcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd0:	4b8a      	ldr	r3, [pc, #552]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1ea      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8097 	beq.w	8005d18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bea:	2300      	movs	r3, #0
 8005bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bee:	4b83      	ldr	r3, [pc, #524]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10f      	bne.n	8005c1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	4b7f      	ldr	r3, [pc, #508]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	4a7e      	ldr	r2, [pc, #504]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c08:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0a:	4b7c      	ldr	r3, [pc, #496]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c12:	60bb      	str	r3, [r7, #8]
 8005c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c16:	2301      	movs	r3, #1
 8005c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1a:	4b79      	ldr	r3, [pc, #484]	; (8005e00 <HAL_RCC_OscConfig+0x4b0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d118      	bne.n	8005c58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c26:	4b76      	ldr	r3, [pc, #472]	; (8005e00 <HAL_RCC_OscConfig+0x4b0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a75      	ldr	r2, [pc, #468]	; (8005e00 <HAL_RCC_OscConfig+0x4b0>)
 8005c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c32:	f7fc f865 	bl	8001d00 <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c3a:	f7fc f861 	bl	8001d00 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e118      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c4c:	4b6c      	ldr	r3, [pc, #432]	; (8005e00 <HAL_RCC_OscConfig+0x4b0>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d106      	bne.n	8005c6e <HAL_RCC_OscConfig+0x31e>
 8005c60:	4b66      	ldr	r3, [pc, #408]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	4a65      	ldr	r2, [pc, #404]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6c:	e01c      	b.n	8005ca8 <HAL_RCC_OscConfig+0x358>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b05      	cmp	r3, #5
 8005c74:	d10c      	bne.n	8005c90 <HAL_RCC_OscConfig+0x340>
 8005c76:	4b61      	ldr	r3, [pc, #388]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	4a60      	ldr	r2, [pc, #384]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c7c:	f043 0304 	orr.w	r3, r3, #4
 8005c80:	6713      	str	r3, [r2, #112]	; 0x70
 8005c82:	4b5e      	ldr	r3, [pc, #376]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	4a5d      	ldr	r2, [pc, #372]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c88:	f043 0301 	orr.w	r3, r3, #1
 8005c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8e:	e00b      	b.n	8005ca8 <HAL_RCC_OscConfig+0x358>
 8005c90:	4b5a      	ldr	r3, [pc, #360]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	4a59      	ldr	r2, [pc, #356]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9c:	4b57      	ldr	r3, [pc, #348]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	4a56      	ldr	r2, [pc, #344]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005ca2:	f023 0304 	bic.w	r3, r3, #4
 8005ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d015      	beq.n	8005cdc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb0:	f7fc f826 	bl	8001d00 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb8:	f7fc f822 	bl	8001d00 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e0d7      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cce:	4b4b      	ldr	r3, [pc, #300]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0ee      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x368>
 8005cda:	e014      	b.n	8005d06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cdc:	f7fc f810 	bl	8001d00 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce2:	e00a      	b.n	8005cfa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ce4:	f7fc f80c 	bl	8001d00 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e0c1      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cfa:	4b40      	ldr	r3, [pc, #256]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1ee      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d0c:	4b3b      	ldr	r3, [pc, #236]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	4a3a      	ldr	r2, [pc, #232]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 80ad 	beq.w	8005e7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d22:	4b36      	ldr	r3, [pc, #216]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d060      	beq.n	8005df0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d145      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d36:	4b33      	ldr	r3, [pc, #204]	; (8005e04 <HAL_RCC_OscConfig+0x4b4>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fb ffe0 	bl	8001d00 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d44:	f7fb ffdc 	bl	8001d00 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e093      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d56:	4b29      	ldr	r3, [pc, #164]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69da      	ldr	r2, [r3, #28]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	019b      	lsls	r3, r3, #6
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	085b      	lsrs	r3, r3, #1
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	041b      	lsls	r3, r3, #16
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	061b      	lsls	r3, r3, #24
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	071b      	lsls	r3, r3, #28
 8005d8e:	491b      	ldr	r1, [pc, #108]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d94:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <HAL_RCC_OscConfig+0x4b4>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9a:	f7fb ffb1 	bl	8001d00 <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da2:	f7fb ffad 	bl	8001d00 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e064      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db4:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCC_OscConfig+0x452>
 8005dc0:	e05c      	b.n	8005e7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc2:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <HAL_RCC_OscConfig+0x4b4>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fb ff9a 	bl	8001d00 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd0:	f7fb ff96 	bl	8001d00 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e04d      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <HAL_RCC_OscConfig+0x4ac>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x480>
 8005dee:	e045      	b.n	8005e7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d107      	bne.n	8005e08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e040      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	40007000 	.word	0x40007000
 8005e04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e08:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <HAL_RCC_OscConfig+0x538>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d030      	beq.n	8005e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d129      	bne.n	8005e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d122      	bne.n	8005e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e38:	4013      	ands	r3, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d119      	bne.n	8005e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	3b01      	subs	r3, #1
 8005e52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d10f      	bne.n	8005e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d107      	bne.n	8005e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d001      	beq.n	8005e7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e000      	b.n	8005e7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40023800 	.word	0x40023800

08005e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e03f      	b.n	8005f1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d106      	bne.n	8005eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fb fdfc 	bl	8001ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2224      	movs	r2, #36	; 0x24
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f929 	bl	8006128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b08a      	sub	sp, #40	; 0x28
 8005f2a:	af02      	add	r7, sp, #8
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	4613      	mov	r3, r2
 8005f34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d17c      	bne.n	8006040 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_UART_Transmit+0x2c>
 8005f4c:	88fb      	ldrh	r3, [r7, #6]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e075      	b.n	8006042 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_UART_Transmit+0x3e>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e06e      	b.n	8006042 <HAL_UART_Transmit+0x11c>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2221      	movs	r2, #33	; 0x21
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f7a:	f7fb fec1 	bl	8001d00 <HAL_GetTick>
 8005f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	88fa      	ldrh	r2, [r7, #6]
 8005f84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f94:	d108      	bne.n	8005fa8 <HAL_UART_Transmit+0x82>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	e003      	b.n	8005fb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fb8:	e02a      	b.n	8006010 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2180      	movs	r1, #128	; 0x80
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f840 	bl	800604a <UART_WaitOnFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e036      	b.n	8006042 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fe8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	3302      	adds	r3, #2
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	e007      	b.n	8006002 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	3301      	adds	r3, #1
 8006000:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1cf      	bne.n	8005fba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2200      	movs	r2, #0
 8006022:	2140      	movs	r1, #64	; 0x40
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f810 	bl	800604a <UART_WaitOnFlagUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e006      	b.n	8006042 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	e000      	b.n	8006042 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006040:	2302      	movs	r3, #2
  }
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b090      	sub	sp, #64	; 0x40
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	603b      	str	r3, [r7, #0]
 8006056:	4613      	mov	r3, r2
 8006058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605a:	e050      	b.n	80060fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d04c      	beq.n	80060fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006066:	2b00      	cmp	r3, #0
 8006068:	d007      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0x30>
 800606a:	f7fb fe49 	bl	8001d00 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006076:	429a      	cmp	r2, r3
 8006078:	d241      	bcs.n	80060fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	330c      	adds	r3, #12
 8006080:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800609a:	637a      	str	r2, [r7, #52]	; 0x34
 800609c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e5      	bne.n	800607a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3314      	adds	r3, #20
 80060b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	613b      	str	r3, [r7, #16]
   return(result);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3314      	adds	r3, #20
 80060cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ce:	623a      	str	r2, [r7, #32]
 80060d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	69f9      	ldr	r1, [r7, #28]
 80060d4:	6a3a      	ldr	r2, [r7, #32]
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	61bb      	str	r3, [r7, #24]
   return(result);
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e5      	bne.n	80060ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e00f      	b.n	800611e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4013      	ands	r3, r2
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	429a      	cmp	r2, r3
 800610c:	bf0c      	ite	eq
 800610e:	2301      	moveq	r3, #1
 8006110:	2300      	movne	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	461a      	mov	r2, r3
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	429a      	cmp	r2, r3
 800611a:	d09f      	beq.n	800605c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3740      	adds	r7, #64	; 0x40
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	b09f      	sub	sp, #124	; 0x7c
 800612e:	af00      	add	r7, sp, #0
 8006130:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800613c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613e:	68d9      	ldr	r1, [r3, #12]
 8006140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	ea40 0301 	orr.w	r3, r0, r1
 8006148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800614a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	431a      	orrs	r2, r3
 8006154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	431a      	orrs	r2, r3
 800615a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	4313      	orrs	r3, r2
 8006160:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800616c:	f021 010c 	bic.w	r1, r1, #12
 8006170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006176:	430b      	orrs	r3, r1
 8006178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800617a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006186:	6999      	ldr	r1, [r3, #24]
 8006188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	ea40 0301 	orr.w	r3, r0, r1
 8006190:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4bc5      	ldr	r3, [pc, #788]	; (80064ac <UART_SetConfig+0x384>)
 8006198:	429a      	cmp	r2, r3
 800619a:	d004      	beq.n	80061a6 <UART_SetConfig+0x7e>
 800619c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4bc3      	ldr	r3, [pc, #780]	; (80064b0 <UART_SetConfig+0x388>)
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d103      	bne.n	80061ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061a6:	f7ff fa63 	bl	8005670 <HAL_RCC_GetPCLK2Freq>
 80061aa:	6778      	str	r0, [r7, #116]	; 0x74
 80061ac:	e002      	b.n	80061b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061ae:	f7ff fa4b 	bl	8005648 <HAL_RCC_GetPCLK1Freq>
 80061b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061bc:	f040 80b6 	bne.w	800632c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c2:	461c      	mov	r4, r3
 80061c4:	f04f 0500 	mov.w	r5, #0
 80061c8:	4622      	mov	r2, r4
 80061ca:	462b      	mov	r3, r5
 80061cc:	1891      	adds	r1, r2, r2
 80061ce:	6439      	str	r1, [r7, #64]	; 0x40
 80061d0:	415b      	adcs	r3, r3
 80061d2:	647b      	str	r3, [r7, #68]	; 0x44
 80061d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061d8:	1912      	adds	r2, r2, r4
 80061da:	eb45 0303 	adc.w	r3, r5, r3
 80061de:	f04f 0000 	mov.w	r0, #0
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	00d9      	lsls	r1, r3, #3
 80061e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061ec:	00d0      	lsls	r0, r2, #3
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	1911      	adds	r1, r2, r4
 80061f4:	6639      	str	r1, [r7, #96]	; 0x60
 80061f6:	416b      	adcs	r3, r5
 80061f8:	667b      	str	r3, [r7, #100]	; 0x64
 80061fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	461a      	mov	r2, r3
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	1891      	adds	r1, r2, r2
 8006206:	63b9      	str	r1, [r7, #56]	; 0x38
 8006208:	415b      	adcs	r3, r3
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800620c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006210:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006214:	f7f9 fffe 	bl	8000214 <__aeabi_uldivmod>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4ba5      	ldr	r3, [pc, #660]	; (80064b4 <UART_SetConfig+0x38c>)
 800621e:	fba3 2302 	umull	r2, r3, r3, r2
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	011e      	lsls	r6, r3, #4
 8006226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006228:	461c      	mov	r4, r3
 800622a:	f04f 0500 	mov.w	r5, #0
 800622e:	4622      	mov	r2, r4
 8006230:	462b      	mov	r3, r5
 8006232:	1891      	adds	r1, r2, r2
 8006234:	6339      	str	r1, [r7, #48]	; 0x30
 8006236:	415b      	adcs	r3, r3
 8006238:	637b      	str	r3, [r7, #52]	; 0x34
 800623a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800623e:	1912      	adds	r2, r2, r4
 8006240:	eb45 0303 	adc.w	r3, r5, r3
 8006244:	f04f 0000 	mov.w	r0, #0
 8006248:	f04f 0100 	mov.w	r1, #0
 800624c:	00d9      	lsls	r1, r3, #3
 800624e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006252:	00d0      	lsls	r0, r2, #3
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	1911      	adds	r1, r2, r4
 800625a:	65b9      	str	r1, [r7, #88]	; 0x58
 800625c:	416b      	adcs	r3, r5
 800625e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	461a      	mov	r2, r3
 8006266:	f04f 0300 	mov.w	r3, #0
 800626a:	1891      	adds	r1, r2, r2
 800626c:	62b9      	str	r1, [r7, #40]	; 0x28
 800626e:	415b      	adcs	r3, r3
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006276:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800627a:	f7f9 ffcb 	bl	8000214 <__aeabi_uldivmod>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4b8c      	ldr	r3, [pc, #560]	; (80064b4 <UART_SetConfig+0x38c>)
 8006284:	fba3 1302 	umull	r1, r3, r3, r2
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	2164      	movs	r1, #100	; 0x64
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	3332      	adds	r3, #50	; 0x32
 8006296:	4a87      	ldr	r2, [pc, #540]	; (80064b4 <UART_SetConfig+0x38c>)
 8006298:	fba2 2303 	umull	r2, r3, r2, r3
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062a4:	441e      	add	r6, r3
 80062a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a8:	4618      	mov	r0, r3
 80062aa:	f04f 0100 	mov.w	r1, #0
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	1894      	adds	r4, r2, r2
 80062b4:	623c      	str	r4, [r7, #32]
 80062b6:	415b      	adcs	r3, r3
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062be:	1812      	adds	r2, r2, r0
 80062c0:	eb41 0303 	adc.w	r3, r1, r3
 80062c4:	f04f 0400 	mov.w	r4, #0
 80062c8:	f04f 0500 	mov.w	r5, #0
 80062cc:	00dd      	lsls	r5, r3, #3
 80062ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062d2:	00d4      	lsls	r4, r2, #3
 80062d4:	4622      	mov	r2, r4
 80062d6:	462b      	mov	r3, r5
 80062d8:	1814      	adds	r4, r2, r0
 80062da:	653c      	str	r4, [r7, #80]	; 0x50
 80062dc:	414b      	adcs	r3, r1
 80062de:	657b      	str	r3, [r7, #84]	; 0x54
 80062e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	461a      	mov	r2, r3
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	1891      	adds	r1, r2, r2
 80062ec:	61b9      	str	r1, [r7, #24]
 80062ee:	415b      	adcs	r3, r3
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80062fa:	f7f9 ff8b 	bl	8000214 <__aeabi_uldivmod>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4b6c      	ldr	r3, [pc, #432]	; (80064b4 <UART_SetConfig+0x38c>)
 8006304:	fba3 1302 	umull	r1, r3, r3, r2
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	2164      	movs	r1, #100	; 0x64
 800630c:	fb01 f303 	mul.w	r3, r1, r3
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	3332      	adds	r3, #50	; 0x32
 8006316:	4a67      	ldr	r2, [pc, #412]	; (80064b4 <UART_SetConfig+0x38c>)
 8006318:	fba2 2303 	umull	r2, r3, r2, r3
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	f003 0207 	and.w	r2, r3, #7
 8006322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4432      	add	r2, r6
 8006328:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800632a:	e0b9      	b.n	80064a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800632c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632e:	461c      	mov	r4, r3
 8006330:	f04f 0500 	mov.w	r5, #0
 8006334:	4622      	mov	r2, r4
 8006336:	462b      	mov	r3, r5
 8006338:	1891      	adds	r1, r2, r2
 800633a:	6139      	str	r1, [r7, #16]
 800633c:	415b      	adcs	r3, r3
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006344:	1912      	adds	r2, r2, r4
 8006346:	eb45 0303 	adc.w	r3, r5, r3
 800634a:	f04f 0000 	mov.w	r0, #0
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	00d9      	lsls	r1, r3, #3
 8006354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006358:	00d0      	lsls	r0, r2, #3
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	eb12 0804 	adds.w	r8, r2, r4
 8006362:	eb43 0905 	adc.w	r9, r3, r5
 8006366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4618      	mov	r0, r3
 800636c:	f04f 0100 	mov.w	r1, #0
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	008b      	lsls	r3, r1, #2
 800637a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800637e:	0082      	lsls	r2, r0, #2
 8006380:	4640      	mov	r0, r8
 8006382:	4649      	mov	r1, r9
 8006384:	f7f9 ff46 	bl	8000214 <__aeabi_uldivmod>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4b49      	ldr	r3, [pc, #292]	; (80064b4 <UART_SetConfig+0x38c>)
 800638e:	fba3 2302 	umull	r2, r3, r3, r2
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	011e      	lsls	r6, r3, #4
 8006396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006398:	4618      	mov	r0, r3
 800639a:	f04f 0100 	mov.w	r1, #0
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	1894      	adds	r4, r2, r2
 80063a4:	60bc      	str	r4, [r7, #8]
 80063a6:	415b      	adcs	r3, r3
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063ae:	1812      	adds	r2, r2, r0
 80063b0:	eb41 0303 	adc.w	r3, r1, r3
 80063b4:	f04f 0400 	mov.w	r4, #0
 80063b8:	f04f 0500 	mov.w	r5, #0
 80063bc:	00dd      	lsls	r5, r3, #3
 80063be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063c2:	00d4      	lsls	r4, r2, #3
 80063c4:	4622      	mov	r2, r4
 80063c6:	462b      	mov	r3, r5
 80063c8:	1814      	adds	r4, r2, r0
 80063ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80063cc:	414b      	adcs	r3, r1
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f04f 0100 	mov.w	r1, #0
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	008b      	lsls	r3, r1, #2
 80063e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063e8:	0082      	lsls	r2, r0, #2
 80063ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80063ee:	f7f9 ff11 	bl	8000214 <__aeabi_uldivmod>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4b2f      	ldr	r3, [pc, #188]	; (80064b4 <UART_SetConfig+0x38c>)
 80063f8:	fba3 1302 	umull	r1, r3, r3, r2
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	2164      	movs	r1, #100	; 0x64
 8006400:	fb01 f303 	mul.w	r3, r1, r3
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	3332      	adds	r3, #50	; 0x32
 800640a:	4a2a      	ldr	r2, [pc, #168]	; (80064b4 <UART_SetConfig+0x38c>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006416:	441e      	add	r6, r3
 8006418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800641a:	4618      	mov	r0, r3
 800641c:	f04f 0100 	mov.w	r1, #0
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	1894      	adds	r4, r2, r2
 8006426:	603c      	str	r4, [r7, #0]
 8006428:	415b      	adcs	r3, r3
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006430:	1812      	adds	r2, r2, r0
 8006432:	eb41 0303 	adc.w	r3, r1, r3
 8006436:	f04f 0400 	mov.w	r4, #0
 800643a:	f04f 0500 	mov.w	r5, #0
 800643e:	00dd      	lsls	r5, r3, #3
 8006440:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006444:	00d4      	lsls	r4, r2, #3
 8006446:	4622      	mov	r2, r4
 8006448:	462b      	mov	r3, r5
 800644a:	eb12 0a00 	adds.w	sl, r2, r0
 800644e:	eb43 0b01 	adc.w	fp, r3, r1
 8006452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	4618      	mov	r0, r3
 8006458:	f04f 0100 	mov.w	r1, #0
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	008b      	lsls	r3, r1, #2
 8006466:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800646a:	0082      	lsls	r2, r0, #2
 800646c:	4650      	mov	r0, sl
 800646e:	4659      	mov	r1, fp
 8006470:	f7f9 fed0 	bl	8000214 <__aeabi_uldivmod>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4b0e      	ldr	r3, [pc, #56]	; (80064b4 <UART_SetConfig+0x38c>)
 800647a:	fba3 1302 	umull	r1, r3, r3, r2
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	2164      	movs	r1, #100	; 0x64
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	3332      	adds	r3, #50	; 0x32
 800648c:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <UART_SetConfig+0x38c>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	f003 020f 	and.w	r2, r3, #15
 8006498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4432      	add	r2, r6
 800649e:	609a      	str	r2, [r3, #8]
}
 80064a0:	bf00      	nop
 80064a2:	377c      	adds	r7, #124	; 0x7c
 80064a4:	46bd      	mov	sp, r7
 80064a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064aa:	bf00      	nop
 80064ac:	40011000 	.word	0x40011000
 80064b0:	40011400 	.word	0x40011400
 80064b4:	51eb851f 	.word	0x51eb851f

080064b8 <__libc_init_array>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	4d0d      	ldr	r5, [pc, #52]	; (80064f0 <__libc_init_array+0x38>)
 80064bc:	4c0d      	ldr	r4, [pc, #52]	; (80064f4 <__libc_init_array+0x3c>)
 80064be:	1b64      	subs	r4, r4, r5
 80064c0:	10a4      	asrs	r4, r4, #2
 80064c2:	2600      	movs	r6, #0
 80064c4:	42a6      	cmp	r6, r4
 80064c6:	d109      	bne.n	80064dc <__libc_init_array+0x24>
 80064c8:	4d0b      	ldr	r5, [pc, #44]	; (80064f8 <__libc_init_array+0x40>)
 80064ca:	4c0c      	ldr	r4, [pc, #48]	; (80064fc <__libc_init_array+0x44>)
 80064cc:	f000 f848 	bl	8006560 <_init>
 80064d0:	1b64      	subs	r4, r4, r5
 80064d2:	10a4      	asrs	r4, r4, #2
 80064d4:	2600      	movs	r6, #0
 80064d6:	42a6      	cmp	r6, r4
 80064d8:	d105      	bne.n	80064e6 <__libc_init_array+0x2e>
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e0:	4798      	blx	r3
 80064e2:	3601      	adds	r6, #1
 80064e4:	e7ee      	b.n	80064c4 <__libc_init_array+0xc>
 80064e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ea:	4798      	blx	r3
 80064ec:	3601      	adds	r6, #1
 80064ee:	e7f2      	b.n	80064d6 <__libc_init_array+0x1e>
 80064f0:	08010050 	.word	0x08010050
 80064f4:	08010050 	.word	0x08010050
 80064f8:	08010050 	.word	0x08010050
 80064fc:	08010054 	.word	0x08010054

08006500 <memcpy>:
 8006500:	440a      	add	r2, r1
 8006502:	4291      	cmp	r1, r2
 8006504:	f100 33ff 	add.w	r3, r0, #4294967295
 8006508:	d100      	bne.n	800650c <memcpy+0xc>
 800650a:	4770      	bx	lr
 800650c:	b510      	push	{r4, lr}
 800650e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006512:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006516:	4291      	cmp	r1, r2
 8006518:	d1f9      	bne.n	800650e <memcpy+0xe>
 800651a:	bd10      	pop	{r4, pc}

0800651c <memmove>:
 800651c:	4288      	cmp	r0, r1
 800651e:	b510      	push	{r4, lr}
 8006520:	eb01 0402 	add.w	r4, r1, r2
 8006524:	d902      	bls.n	800652c <memmove+0x10>
 8006526:	4284      	cmp	r4, r0
 8006528:	4623      	mov	r3, r4
 800652a:	d807      	bhi.n	800653c <memmove+0x20>
 800652c:	1e43      	subs	r3, r0, #1
 800652e:	42a1      	cmp	r1, r4
 8006530:	d008      	beq.n	8006544 <memmove+0x28>
 8006532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800653a:	e7f8      	b.n	800652e <memmove+0x12>
 800653c:	4402      	add	r2, r0
 800653e:	4601      	mov	r1, r0
 8006540:	428a      	cmp	r2, r1
 8006542:	d100      	bne.n	8006546 <memmove+0x2a>
 8006544:	bd10      	pop	{r4, pc}
 8006546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800654a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800654e:	e7f7      	b.n	8006540 <memmove+0x24>

08006550 <memset>:
 8006550:	4402      	add	r2, r0
 8006552:	4603      	mov	r3, r0
 8006554:	4293      	cmp	r3, r2
 8006556:	d100      	bne.n	800655a <memset+0xa>
 8006558:	4770      	bx	lr
 800655a:	f803 1b01 	strb.w	r1, [r3], #1
 800655e:	e7f9      	b.n	8006554 <memset+0x4>

08006560 <_init>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr

0800656c <_fini>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	bf00      	nop
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr
